//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.87;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.87] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.87: June 12, 2025
 * * Bug Fixes!
 * ** Fixed a bug where <JS Accuracy> and related notetags did not work.
 *    Fix made by Arisu.
 * ** Fixed a bug where dual wielding weapons with HP/MP bonuses would cause
 *    the max cache values to fluctuate per hit. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added fail safes for plugins that would sometimes add null battlers to
 *    animation queues. This update prevents crashes for potential checks.
 * ** Added better compatibility with Message Core's text language change.
 *    Enemy names did not convert prior to placing state icons and would cause
 *    misalignment.
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x46ffcc=_0xfd00;(function(_0x16c857,_0x51523a){const _0x38fa52=_0xfd00,_0x2f0437=_0x16c857();while(!![]){try{const _0x5f1fea=parseInt(_0x38fa52(0xbc4))/0x1+parseInt(_0x38fa52(0x8e9))/0x2+parseInt(_0x38fa52(0x3da))/0x3+-parseInt(_0x38fa52(0x99f))/0x4*(parseInt(_0x38fa52(0x2f6))/0x5)+-parseInt(_0x38fa52(0x92d))/0x6+parseInt(_0x38fa52(0x1ef))/0x7+-parseInt(_0x38fa52(0x7dc))/0x8*(-parseInt(_0x38fa52(0x639))/0x9);if(_0x5f1fea===_0x51523a)break;else _0x2f0437['push'](_0x2f0437['shift']());}catch(_0x453d8f){_0x2f0437['push'](_0x2f0437['shift']());}}}(_0x20d1,0x8788d));function _0x20d1(){const _0x5b88d0=['ActSeq_Mechanics_EmulateSkillCost','_actorCommandWindow','setMoveEasingType','statesWindowRect','isUnderAnimation','user','mpHealingFmt','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','isForOneBattleCore','getBattlePortrait','_createCursorArea','right','increaseHits','createStatesWindow','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','CreateCommonEventKeys','TpGaugeOffsetY','Shadow2','VisuMZ_3_SideviewBattleUI','LIGHT\x20BULB','wait','clearActiveWeaponSlot','BattleManager_processAbort','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','isHiddenSkill','preemptive','_branch','ITEM','_svBattlerSprite','BattleSystemCTB','textAlignment','_executeHpDamage','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','BreakShields','startGrow','BgType','rate','Parse_Notetags_TraitObjects','setupBattleback','CastMagical','placeStateIcon','_inputting','enemy','SvWeaponSolo-%1-%2','deactivate','_visibleDuration','ActSeq_BattleLog_WaitForNewLine','onEnemyCancel','alive\x20actors','ChargeRate','ext','compatibilityVisible','LIGHT','NameAttachStateIcon','isSkillItemWindowsMiddle','ComboWindow_DrawJS','setVisibleUI','updateCallMenu','ActSeq_Animation_BalloonAnimation','svActor','counterAttack','DamageDisplay','isTurnBased','isBattleTest','enemyShowParametersAlways','ANTI_TINT_UI','isSubjectValidForAnyoneSelect','normalColor','damageOffsetY','playCursor','friendsUnit','USER-DEFINED\x204','_commonEventQueue','_performDamageMotion','_animation','ActSeq_Camera_FocusTarget','_updateColorFilter','Game_Battler_performDamage','createEnemyNameContainer','arRedRate','CombatLogIcon','ActSeq_Target_CurrentIndex','status','_list','okButtonText','stateColor','displayMiss','createBattleField','_growY','setSubject','isForDeadFriend','_opacityDuration','Window_BattleLog_displayCurrentState','_floatHeight','SwitchCritical','_targetSkewX','Scene_Battle_commandFight','PreDamage%1JS','setText','_targetOpacity','inBattleStatusWindowRect','DefaultHardCap','AS\x20USER','BattleSystemSTB','_homeDuration','lukEffectRate','all\x20enemies','charged','HpGauge','Amp','updateBattlebackBitmap1','isFloating','StyleON','itemHit','Skill-%1-%2','requestBattleBalloon','apply','isBattlerFlipped','initBattlePortrait','alterActionCostPTB','placeTimeGauge','subject','all\x20actors','target','isActing','sortEnemies','stateMotionIndex','SkillItemStandardCols','_drawTextBody','WaitForSkew','hitIndex','freezeFrame','_dragonbonesSpriteContainer','_statusType','usePremadeActionSequence','UNTITLED','boxWidth','addBuff','canAttack','contents','_padding','performActionEndMembers','getNextSubject','addSkillTypeCommand','state','enemyHpGaugeRate','onOpacityEnd','_aspectData','Window_BattleActor_hide','Targets2','setActiveWeaponSlot','isForAliveFriend','_cancelButton','Mechanics','FvAniCenterAll','process_VisuMZ_BattleCore_Action_Notetags','drawItemActorSvBattler','ScaleToFit','arPenRate','PosOffsetY','performMiss','processEscape','CounterPlayback','_item','custom','Scene_Battle_windowAreaHeight','isOptionsCommandAdded','isOverworld','isStatusAffected','setLetter','VisuMZ_2_AggroControlSystem','adjustPosition_1for1','PostApplyAsUserJS','skillTypes','ParseStateNotetags','BattleManager_isTpbMainPhase','_enemyIDs','open','drawTurnsRemaining','portraitFlipVert','drawStates','drawItemStatusXPStyle','showNormalAnimation','_growEasing','_buttonText','checkExtendTroopCompatibility','getDefeatedEnemies','optDisplayTp','stypeId','clamp','ActSeq_Movement_HomeMoveToTarget','ActSeq_Element_Clear','_forcedBattlers','ActionEndUpdate','Weapon-%1-%2','_lineHeight','hardDamageCap','DistanceAdjust','battleZoom','isSceneBattle','playEnemyDamage','DefaultSoftCap','activate','enemyShowParametersIfBattleTest','ShowPortraits','SkipPartyCmd','ActSeq_Mechanics_StbExploit','ParseClassNotetags','isDying','needsSelection','trim','snapForBackground','float','isAnyBattleBalloonPlaying','getBattlePortraitFilename','moveBattlerDistance','multiTargetWindowRect','setupBattlebackBattleCore','displayCounter','processPostBattleCommonEvents','portraitFilename','ChangeOrderBy','setBattlerBattleCore','updateStateSprite','_handlers','isForAliveFriendBattleCore','updateEventMain','ForceDeath','bitmapHeight','onGrowEnd','isEscapeCommandEnabled','sliceMax','isAnyoneFloating','ActSeq_Impact_ZoomBlurTargetCenter','addChild','isCharging','turnsFmt','_enemy','hasBeenDefeatedBefore','HelpSkillType','command283','isForOpponentBattleCore','itemEffectRecoverHp','USER-DEFINED\x203','updateForceAction','jsScaleUp','parse','invokeAction','BattleManager_updatePhase','changeCtbCastTime','Sprite_Battler_initMembers','isQueueOptionsMenu','code','EFFECT_COMMON_EVENT','createLowerLayer','processEnemyModeTouchBattleCore','ActSeq_Grid_PullToTargetNode','removeAnimation','CriticalHitFlat','ActSeq_Mechanics_AddBuffDebuff','moveBattlerHomeToPoint','noSimilarSTypes','damageText','AggroControlSystem','extendTroopMembers','prev\x20target','die','startAction','isActiveTpbReady','isBattlerTargeted','isOpen','isItemCommandEnabled','AS\x20TARGET','_battlerName','drawEnemyName','toLowerCase','isSpriteVisible','commandFight','isPhysical','centerFrontViewSprite','Sprite_Enemy_setHue','HelpOptions','cancelActorInput','battleGrow','Game_Battler_clearDamagePopup','StartName','measureTextWidth','Game_BattlerBase_canGuard','freezeTime','ExtDisplayedParams','_tempEquipCheck','SkewX','sortDamageSprites','Scene_Battle_stop','_partyWindow','Game_Temp_requestAnimation','refresh','Sprite_Gauge_smoothness','processTouch','STR','Window_BattleActor_processTouch','Duration','getSkillIdWithName','Sprite_Enemy_createStateIconSprite','Game_Troop_setup','PostRegenerateJS','visualCutinPortraitFilename','Game_Action_itemTargetCandidates','_methods','_hpGaugeSprite','addedStateObjects','ActSeq_BattleVoice_PlaySpecialLine','ShowButton','setup','addAutoBattleCommands','_growDuration','SideviewSelect','isSTB','PostDamageAsUserJS','_hideAllIcons','ExtraSettings','_nameTempVisibleDuration','_requestRefresh','updateDuration','Window_BattleLog_performActionEnd','addText','excludeListing','BattleGridSystem','itemLineRect','ActSeq_Mechanics_HpMpTp','FocusX','isDead','Window_BattleEnemy_initialize','Targets','isItem','command236','innerHeight','ActSeq_ChangeSkew','Game_Actor_makeActionList','VisuMZ_3_BattleVoices','Game_Action_isForDeadFriend','createBattleFieldBattleCore','actor','removeChildFromUiContainer','AddOption','startSpin','SceneManager_isSceneChanging','ElementStatusCore','CriticalDuration','ActSeq_BattleLog_Clear','BattleManager_onEncounter','animationWait','Enemy','indexOf','addedDebuffs','<CENTER>%1','AutoMeleeSolo','drawItemStyleIcon','_customDamageFormula','expRate','placeGauge','SLEEP','displayCritical','_motionType','loadEnemy','actorCommandEscape','addStateTurns','displayActionResults','ActSeq_Movement_MoveBy','hpRate','HP_Rate','...','extraHeight','itemTargetCandidates','ShuffleArray','ActSeq_Animation_ShowAnimationJS','ActSeq_Grid_MoveTargetsInDirection','_targetX','ActSeq_Mechanics_EmulateAttackEffect','ActSeq_Mechanics_EmulateGuardEffect','drawActorBuffRates','_showWeapon','Enable','BattleManager_inputtingAction','VisuMZ_2_BattleSystemBTB','_targetY','WtypeId','sort','VisuMZ_0_CoreEngine','Scene_Battle_createAllWindowsIBS','ActSeq_Impact_MotionBlurScreen','JS\x20%1DAMAGE\x20%2','_floatDuration','ActSeq_Movement_FaceTarget','hasAspectData','numTargets','isOpenAndActive','undecided','lineRect','performSTBExploiter','autoMeleeSingleTargetActionSet','startActorSelection','_selectionEffectCount','pageButtonY','createBattleFieldContainer','Game_Action_itemHit','applyImmortal','motionIdle','smooth','441010XYVnDU','TALK','updateWaitMode','_back2Sprite','show','skillItemWindowRectMiddle','isForAnyoneFocusOpponents','performActionStart','drawItemStatusListStyle','basicGaugesY','negativeLifeSteal','Scene_Battle_createHelpWindow','jsAccuracyAsTarget','drawDebuffs','AnchorY','waitForAnimation','createSeparateDamagePopups','Game_BattlerBase_param','updateHpGaugePosition','refreshBattlerMotions','Param','setCustomDamageFormula','ShakeFlinchDuration','battleMembers','\x5cC[%1]','buffNameFmt','faceRect','cancelButtonText','onEscapeFailure','BattleManager_startTurn','performTpbActiveCheckSwitch','BackColor','visualCutinPortraitIndex','updateBorderStyle','forceMotion','cancelMpLifeSteal','setReturnWindow','ActSeq_Animation_ShowAnimation','opponentsUnit','callOkHandler','debuffAdd','_activeWeaponSlot','createEffectActionSet','makeTargets','Angle','clearBattleCoreData','toUseBoostPoints','addLoadListener','actionsFmt','_battlePortrait','\x5cHEXCOLOR<%1>','ActSeq_Set_WholeActionSet','FRUSTRATION','getBattlerFromKey','Scene_Options','updateMain','WEAPON\x20SWAP','updateScale','linkSprite','randomInt','setColorTone','isCancelLifeSteal','SyncBuffExpire','isIncludedInEnemyWindow','missile','_escapeRatio','actorId','Game_Action_setSkill','jsAccuracyAsUser','isTpbReady','_offsetX','jumpBattler','ANNOYED','attackMotions','deathStateId','Sprite_Actor_createStateSprite','ActSeq_Motion_MotionType','STB','match','declareGlobalVariables','createCommandVisibleJS','emerge','prepareBorderActor','applyItem','ShowTpDmg','createEnemySprite','Game_BattlerBase_addNewState','stateHelpFmt','findSymbolExt','_cacheTextWidth','hasStaticSvBattler','Sprite_Actor_updateBitmap','portraitType','stop','currentDisplayedValue','ActSeq_Grid_TraverseToNode','pow','1:1','#%1','ShowMissEvasion','+%1','battleAngle','CastAnimation','Victory','checkTpbInputOpen','loadSvActor','_weaponImageId','weaponTypes','skewBattler','EasingType','waitForMovement','AUTO\x20BATTLE','Game_Temp_initialize','front\x20center','applyBattleCoreJS','traitObjects','WeaponTypeID','Sprite_Battleback_adjustPosition','characterName','_createDamageContainer','commandNameWindowDrawBackground','numberFontFace','getAttackMotionSlot','selectLast','isCertainHit','WaitForEffect','PreApplyJS','FlinchDuration','remove','offsetY','updateLink','isShownOnBattlePortrait','process_VisuMZ_BattleCore_CommonEventKeys','_baseLineStack','Window_BattleLog_performMagicEvasion','SkewY','damagePopupPosition','ActSeq_Zoom_WaitForZoom','updateStateSpriteBattleCore','_angleDuration','getColor','isATB','isCancelled','_stateTurns','endVisualCutin','ALL_ENEMIES','clearForcedGameTroopSettingsBattleCore','onActorCancel','updateShadowPosition','StateIconOffsetX','Scene_Boot_onDatabaseLoaded','pointY','BattleManager_endAction','changePaintOpacity','VisuMZ_3_VisualCutinEffect','updateBattleVariables','drawingAreaWidth','turnOrderChangeOTB','base','FUNC','processBattleCoreJS','targetBattlerContainerOpacity','surprise','CmdIconFight','MUSIC\x20NOTE','ActSeq_Impact_MotionTrailRemove','onDisabledPartyCommandSelection','setCommonEvent','getLastPluginCommandInterpreter','compareBattlerSprites','commandNameWindowDrawText','performMoveToTargets','isStateResist','setFrame','_damageCounterWindow','isJumping','isBreakStunned','updateUiContainerPosition','ShowCounter','createDigits','isFlipped','ANGLE','max','battleStatusSprite','_enemies','PerformAction','softDamageCapRate','gainTp','registerCommand','VisualCutinEffect','_updateFilterArea','opacityStart','_borderPortraitTargetX','ARRAYEVAL','battleLayoutStyle','ShowReflectWait','textColor','checkTpbInputClose','forceWeaponAnimation','GetActionSequenceSpecialTarget','slices','PreEndTurnJS','clone','anchorX','_animationContainer','ActSeq_Mechanics_BoostPointsStoreData','magicReflection','_damageContainer','isOptionsCommandEnabled','refreshCursor','active','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','updateBattleProcess','addBattleCoreAutoBattleStyleCommand','getDamageStyle','HITTYPE_CERTAIN','setBattleZoom','onEncounter','AutoMeleeAoE','battleSys','emulateAction','isEffecting','pages','SlotID','opacitySpeed','sliceMin','ActSeq_Motion_ClearFreezeFrame','autoRemovalTiming','createUIContainer','Game_Action_numRepeats','VisuMZ_2_BattleSystemPTB','VisuMZ_1_SkillsStatesCore','_battleField','setBattlerFlip','addCommand','Pre','Spriteset_Battle_update','BattleLog','BaseTroopIDs','DigitGroupingDamageSprites','makeActionOrders','_skewY','setLastPluginCommandInterpreter','ActSeq_Animation_AttackAnimation','ActSeq_Horror_GlitchRemove','getMenuImage','cutinExit','stepBack','setHelpWindow','bossCollapse','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','process_VisuMZ_BattleCore_CreateRegExp','selectAllEnemies','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','addStatusCommand','_underAnimationContainer','isCurrentItemEnabled','targetObjects','lastBattleSkill','Sprite_Battler_update','changeWeather','destroy','ActSeq_Projectile_Animation','movement','spinBattler','ConvertActionSequenceTarget','gainMp','filterArea','Scene_Battle_createEnemyWindow','LastSelected','Wave','ARRAYSTR','changeBattlerOpacity','StatusWindow_DrawJS','damageCounterWindowRect','fadeShiftX','processBattleBalloonRequests','isForFriendBattleCore','name','colSpacing','getHalfActionsPTB','onActorOk','NewPopupBottom','ApplyImmortal','_lastEnemy','ActSeq_Target_NextTarget','HpGaugeOffsetX','Targets1','isCommandEnabled','sideview_ui','addCustomCommands','Mirror','portraitIndex','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','Reveal','applyResultSwitches','JS\x20%1END\x20BATTLE','ActSeq_Grid_TeleportToNode','updateCancelButton','Game_Battler_makeSpeed','autoSelectPriority','onEncounterBattleCore','AutoBattleCancel','_targetSkewY','BattleManager_checkBattleEnd','needsSelectionBattleCore','blockWidth','TargetLocation','getConfigValue','Scale','▲%1','NO\x20ACTOR\x20FOUND!','isActionSelectionValid','head','battleEffect','portrait','_forcing','BattleManager_cancelActorInput','_battleCoreBattleStartEvent','setBattler','isDeathStateAffected','ActionStart','ActSeq_Set_FinishAction','isLearnedSkill','addBattlerBuffsDebuffs','setupDesaturateImpactFilter','initMembers','Scene_Battle_updateStatusWindowPosition','_updateCursorFilterArea','ActSeq_Impact_MotionBlurTarget','createMultiTargetWindows','swing','Window_BattleLog_displayActionResults','canGuard','_battlerKeyCache','Sprite_Damage_createChildSprite','_offsetY','drawItemActorSprite','PopupDuration','blt','_surprise','Window_Options_statusText','updateFlip','EscapeSuccessJS','displayBattleCoreTransitionErrorMsg','_enemyWindow','_isProjectile','makeTargetsBattleCore','ActSeq_Impact_ShockwaveCenterTargets','4144399QVXHFo','ActSeq_Inject_WaitForInjectAni','OffsetAdjust','Game_BattlerBase_isStateResist','makeActionListAutoAttack','portraitFlipHorz','abnormal','CmdIconEscape','ActSeq_Movement_HomeMoveBy','VisuMZ_3_ActSeqCamera','ActSeq_Impact_TimeStop','redrawForGaugeRate','enemyTpGaugeRate','Window_BattleLog_performCounter','BattleManager_endBattle','setBlendColor','BARE\x20HANDS','isBusy','CheckVisibleSwitchNotetags','Scene_Battle_createActorCommandWindow','_currentActor','Sprite_Battler_damageOffsetY','messageSpeed','partyCommandWindowRect','_skewX','VariableHeal','Scene_Battle_onEnemyCancel','updateLastTarget','svBattlerAnchorX','PostDamageAsTargetJS','isDisarmLifeSteal','drawItemImageXPStyle','Window_BattleLog_clear','not\x20focus','updateRefresh','height','itemEffectGainTp','equipSlots','updateTargetValue','iconIndex','RegExp','FvAniEachTarget','regionId','atbInterrupt','HITTYPE_PHYSICAL','_bypassCanCounterCheck','Sprite_SvEnemy','createMainSprite','moveToStartPosition','Window_BattleLog_performCollapse','BattleSystemBTB','parseLocalizedText','_jumpHeight','AttackAnimation','casting','addBattlerAspect','StatusWindowSelectableBackHide','WaitCount','dimColor1','addPartyCommand','PopupShiftY','selectPreviousCommand','ActSeq_Set_SetupAction','createBattleUIOffsetX','updateAttachedSprites','ActSeq_Mechanics_CtbOrder','createActorCommandWindow','StatusWindowAttachmentBack','_floatWholeDuration','updateCancel','repeatTargets','getReturnWindow','canUseItemCommand','_totalDamage','RevertAngle','effects','setItem','pageButtonX','ESCAPE','setGuard','MDF','applyAngleChange','isAppeared','PostDamageJS','animationShouldMirror','ActSeq_Impact_Desaturate','border','DefaultStyle','ActSeq_Element_AddElements','displayChangedBuffs','isAnyoneInjectAniPrepping','_lastPluginCommandInterpreter','ActSeq_Grid_RemovePassiveStatesFromNode','ActionAnimation','VisuMZ_2_BattleSystemSTB','processBorderActor','_colorTone','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','worldTransform','placeActorName','onJumpEnd','LIGHTBULB','_angleEasing','currentAction','isBattleFlipped','updateStateIconSprite','statusWindowRectXPStyle','collapseType','regenerateAll','startInput','ActSeq_Angle_Reset','createStateSprite','MeleeDistance','process_VisuMZ_BattleCore_Notetags','actionEffect','Scene_Battle_update','isAtbCastingState','VisuMZ_2_BattleGridSystem','statusText','_weather','bitmap','ActSeq_Impact_ZoomBlurPoint','Users','statusHelpDesc','displayedParams','onHomeMoveEnd','ShowWeapon','StepDuration','itemWindowRect','endInBattleStatus','bottom','mainSpriteScaleX','createBattleUIOffsetY','itemPadding','startDamagePopup','testApply','_targetBattlerKey','process_VisuMZ_BattleCore_PluginParams','isBattleRefreshRequested','floor','canEscape','top','ActSeq_Element_NullElements','mpDamage','bgType','onFloatEnd','startIcon','playReflection','isHidden','resetBreakShield','isMoving','ActSeq_DB_DragonbonesMotionAni','characterIndex','WaitComplete','helpAreaBottom','isForOne','performSubstitute','battlerShadowScaleX','Formula','waitForNewLine','setupBattleCoreData','ActSeq_DB_DragonbonesTimeScale','setFullActionsPTB','drawItemStyleIconText','VisuMZ_4_CombatLog','applyData','makeSuccess','AdjustRect','ActSeq_BattleLog_PushBaseLine','addOnceParallelInterpreter','lastCommandSymbol','resizeWindowXPStyle','Elements','FrontViewSelect','thrust','index','clearDamagePopup','_motion','EnableSoftCap','WaitForProjectile','finishActionSet','opacity','_skewDuration','animationBaseDelay','Game_Battler_forceAction','Sprite_Actor_setBattler','ALL_ACTORS','battlelog','_targets','Style','fadeShiftY','maxBattleMembers','VisuMZ_4_IconBalloons','SHOW_BUTTON','updateActors','clearBattlerMotionTrailData','drawItemImage','compareEnemySprite','Index','CheckActSeqProjectileVersion','frameCount','drawBattlerData','BattleLogRectJS','addDamageSprite','evalDamageFormulaBattleCore','hpAffected','_homeX','dead','_hue','gradientFillRect','_endingBattle','setLastBattleSkill','BindCommonEventKeysForObj','effect','isForOpponent','CmdStyle','%1StartActionJS','WaitForJump','_updateTargetValue','isBuffAffected','enabled','performMagicEvasion','resetFontSettings','drawBuffs','displayAddedStates','enemyShowLevel','_targetAngle','updatePointAnimations','canUse','createAllWindows','setupBattleCore','allowCollapse','_preBattleCommonEvent','damageFlat','lifeStealTrait','PostStartActionJS','jsCritRateAsTarget','SwitchMissEvade','Game_Action_setSubject','\x5cI[%1]%2','partyCommandWindowRectBorderStyle','call','_attackAnimationId','ActSeq_Mechanics_Multipliers','NameFontSize','Debuffs','alive\x20actors\x20not\x20target','displayChangedStates','Immortal','VisuMZ_2_BattleSystemETB','targetActionSet','ScaleUp','Sprite_Battler_updateMain','fontSize','createHelpWindow','WaitForAngle','alive\x20friends','extraPositionScaledY','Window_BattleLog_displayMiss','smoothSelect','applyGlobal','_targetGrowY','ActSeq_BattleLog_WaitForBattleLog','10YgWhxI','textBaseline','Game_Action_evalDamageFormula','iconText','updateAngleCalculations','setupHpGaugeSprite','aspect','isArray','calcWindowHeight','ActSeq_Movement_Scale','battleInjectAni','Strength','_commandNameWindow','paramBuffRate','loadFaceImages','selectNextCommandTpb','clearFreezeMotionForWeapons','DestinationJS','Game_Action_setGuard','Game_Enemy_transform','_buttonKey','NameLegacy','pha','Spriteset_Battle_createBattleField','updateCommandNameWindow','_subject','ActorOffsetY','description','aliveMembers','resize','BattleManager_onEscapeSuccess','Game_BattlerBase_die','_forActor','Game_Action_setAttack','BattleManager_startInput','ActSeq_Movement_FaceDirection','closeBattleActorWindow','updateEvent','BattleLayout','buffColor','DistanceX','findIndex','_battleCoreNoElement','Window_BattleLog_performSubstitute','BindCommonEventKeysForGroup','setBattlePortrait','position','applyEasing','meetsSelectFrontviewActorConditions','message1','temporaryVisibile','itemEffectRecoverMp','battleFloat','onSelectAction','dataId','isNonSubmenuCancel','actionSplicePoint','setupBlueRedInvertImpactFilter','drawItemActorFace','Scene_Battle_partyCommandWindowRect','pageup','ParseWeaponNotetags','PostDamage%1JS','cameraOffsetDuration','Sprite_Weapon_loadBitmap','startEnemySelection','updateShadowScale','addItemCommand','_regionBattleback1','Item-%1-%2','applyTargetFilters','createActionSequenceProjectile','initMembersBattleCore','makeStateName','createAttachedSprites','HelpStatus','_makeCursorAlpha','gaugeRate','ShakeFlinch','StatusWindow_RectJS','isForAll','Actions','shift','parseForcedGameTroopSettingsBattleCore','doesPageHaveOnceParallelStart','windowAreaHeight','FaceAway','buffValueFmt','createTroopNote','Game_BattlerBase_eraseState','canBattlerMove','Destination','svAnchorX','magicSkills','BattleCore','message2','ActSeq_Mechanics_StbRemoveExcessActions','getAttackMotion','refreshMotion','_pattern','Game_Party_removeActor','faceWidth','startPartyCommandSelection','VisuMZ_3_ActiveChainSkills','refreshStatusWindow','processRefresh','NameDamageVisibility','logWindowRect','showPortraits','ActSeq_Mechanics_ActiveChainInputDisable','isBorderPortraitSpriteVisible','customFontFace','ActSeq_Grid_ClearPassiveStatesFromNode','ActSeq_Mechanics_ArmorPenetration','WindowWidth','hide','getAttackWeaponAnimationId','setActionState','Game_BattlerBase_refresh','autoBattleStyle','_animationSprites','drawActorName','Rate','HalfActions','_effectDuration','_executedValue','updateEffectContainers','displayAction','ForceExploiter','Window_BattleStatus_drawItemImage','POST-','createMultiTargetWindow','performAttack','parameters','loadBattleback1','Window_BattleLog_displayTpDamage','ForceRandom','drawItem','CalcActionSpeedJS','autoBattle','wholeActionSet','pattern','processVictory','concat','showHelpWindow','CastCertain','_phase','victory','setEventCallback','itemTextAlign','NameOffsetX','VisuMZ_2_DragonbonesUnion','BattleManager_processDefeat','ActionItemMsg','ANGER','createEnemies','CopyCombatLog','alphabetic','chantStyle','setImmortal','svBattlerName','CriticalColor','drawParamData','setBattleSkew','_uiContainer','paramValueByName','fontFace','isRepeated','drawActorSimpleStatus','font','CommandAddStatus','SvMotionIdleMass-%1-%2','applyHardDamageCap','isOnCurrentMap','setCursorRect','_flashDuration','isSelected','drain','Sprite_Enemy_updateBossCollapse','autoSelectLastSelected','updateOpacity','Window_BattleLog_refresh','_onceParallelInterpreters','commandEscape','isForAnyoneFocusFriends','FlashDuration','_targetOffsetX','CriticalDmgFlat','members','isForNotUser','isPreviousSceneBattleTransitionable','ActSeq_Grid_AnimationTypeAtNode','MaxLines','redraw','disarmMpLifeSteal','_pagedownButton','ActSeq_Movement_WaitForJump','_autoBattleWindow','getStateDisplay','PopupOffsetX','scale','checkAutoCustomActionSequenceNotetagEffect','Game_Actor_setup','MAXHP','CriticalDmgRate','Game_Battler_onBattleEnd','evade','FlashColor','Sprite_Actor_updateFrame','critical','ParseActorNotetags','isFrameVisible','attackAnimationIdSlot','_targetHomeX','Filename','canAddSkillCommand','clearGlobalVariables','requestAnimation','mainSprite','addMeleeReturnActionSet','ActionSkillMsg2','ActSeq_Projectile_Picture','createEnemyWindow','isNextScene','addGuardCommand','ForceExploited','startFloat','isRightInputMode','370077nVVONP','findTargetSprite','makeBattleCommand','selectAllActors','cancelTargetSelectionVisibility','createEnemyNames','ENEMY_OFFSET_X','trueRandomTarget','performAction','initialize','actions','nameColor','autoBattleWindowRect','displayHpDamage','IconStypeNorm','customDamageFormula','SkillItemBorderCols','lineHeight','pageButtons','isAttack','Game_Action_setItem','Scene_Battle_logWindowRect','ParseAllNotetags','ShowCosts','loop','HpGaugeOffsetY','debuffNameFmt','currentSymbol','Setting','Scene_Battle_selectNextCommand','Game_Action_isForOne','forceEscapeSprite','ButtonAssist','isForFriend','battleDisplayText','ActSeq_Weapon_ClearActiveWeapon','ACTOR_OFFSET_Y','TextColor','NameOffsetY','_indent','Scene_Battle_helpWindowRect','Game_BattlerBase_canAttack','anchor','coreEngineRepositionEnemies','isGuard','showEnemyAttackAnimation','maxWidth','isAnyoneJumping','push','drawActorStateTurns','inBattle','ShowAddedBuff','flipVisualCutinVert','PreDamageAsTargetJS','frameDelay','create','PreStartBattleJS','battleProjectiles','_isBattlerFlipped','isAlwaysVisible','Window_Options_addGeneralOptions','startSkew','debuffHelpFmt','attackTimesAdd','_buffTurns','clearWeaponAnimation','_mainSprite','moveBattlerHomeDistance','_shadowSprite','select','Scene_Battle_startEnemySelection','ActSeq_Skew_WaitForSkew','battleCommands','isMagicSkill','HP_Flat','ComboWindow_RectJS','transform','battleJump','BattleVictoryJS','DistanceY','Game_Action_isForRandom','AGI','startInBattleStatus','Window_BattleActor_show','BTB','constructor','battler','growBattler','_enemyNameContainer','equips','eraseState','createPageButtons','troop','itemCri','_enemyId','Parse_Notetags_Action','value1','move','HelpEscape','RequiresDefeat','Scene_Battle_createAllWindows','battlerKey','createHpGaugeSprite','attackAnimationId2','arPenFlat','partyCommandWindowRectXPStyle','isSkill','addChildToUiContainer','-----','_index','width','_actor','IconIndex','dying','VoiceLine','displayItemMessage','sprite','waitForJump','ActSeq_Camera_WaitForCamera','_battleBalloonQueue','logActionList','updateStart','Game_Battler_startTpbTurn','updateOnceParallelInterpreters','displayBuffs','updateShakeFlinch','updateStaticSvBattlerFrames','rec','svShadow','AttachStateOffsetY','setClickHandler','Game_Troop_expTotal','startMotion','Scene_Battle_createCancelButton','tpbActorSwitchConditionsMet','updateBitmap','exit','getNextSubjectFromPool','-%1\x20MP','abort','isSideButtonLayout','_displayBattleCoreTransitionErrorMsg','icon','ActSeqImpact','_text','performDamage','inputting','moveToStartPositionBattleCore','_borderPortraitSprite','launchBattle','isAnimationPlaying','ActSeq_Inject_AnimationPauseResume','battleUIOffsetX','CommonEventID','endIcon','mpColor','nameY','isTriggered','_stypeIDs','bind','Normal','makeTargetsBattleCoreJS','ActSeq_Grid_RemoveTriggerFromNode','battleInjectPrep','Game_BattlerBase_initMembers','BattleManager_onEscapeFailure','ActSeq_BattleLog_Refresh','openBattleActorWindow','VarianceFormulaJS','states','VisuMZ_1_MessageCore','USER-DEFINED\x201','GroupDigits','addImmortal','ActSeq_Mechanics_CustomDmgFormula','setupMotionBlurImpactFilter','BattleManager_processVictory','onBattleStartOnceParallels','_tempActor','NameAlwaysHidden','paintOpacity','targetsForOpponents','attackStates','_skillWindow','cutinEnter','find','makeDeepCopy','PreRegenerateJS','clearRect','list','format','_tpbSceneChangeCacheActor','isSkipPartyCommandWindow','applyGuard','setHome','_createColorFilter','performFlinch','moveBattlerToPoint','USER-DEFINED\x202','#ffffff','makeEscapeRatio','isImmortal','processOk','canAlterActionCostPTB','forceSelect','SvMotionIdleSolo-%1-%2','comboWindowOffsetX','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','WaitForNewLine','parallaxScrollYinvertEnemy','turnCount','createPartyCommandWindow','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','Scene_Battle_createPartyCommandWindowIBS','%1StartTurnJS','createDamageContainer','itemEffectAddAttackState','adjustPosition','Skills','getBattleMembers','???','isAnyoneGrowing','fight','drawTextEx','BattleStartEvent','Sprite_Battler_setHome','ActSeq_Movement_WaitForFloat','onStaticEnemyBitmapLoad','createKeyJS','PreStartActionJS','BattleManager_setup','pageOffsetY','ATK','singleSkill','drawSkillCost','requestFauxAnimation','addBattleCoreAutoBattleStartupCommand','save','Radius','escape','AllowRandomSpeed','ActSeq_Movement_FacePoint','StatusWindowAttachmentFrontOffsetY','targetDistortionSpritePosition','_angleRevertOnFinish','battleCamera','commandAutoBattle','alterPriority','_jumpWholeDuration','abs','Sprite_Battler_damageOffsetX','textWidth','isGuardWaiting','playOnceParallelTroopPage','min','endBattle','setHorrorEffectSettings','_shakeFlinchDuration','damageContainer','Game_Battler_regenerateAll','_pageupButton','getItemDamageAmountLabelBattleCore','isBigCharacter','svActorVertCells','ARRAYSTRUCT','MaxMP','checkSceneBattleTransitionable','swapEnemyIDs','isConfused','_bypass_applyBattleCoreHitRateJS','GetActionSequenceSpecialTargetWithFlags','hpHealingFmt','restore','PartyCmd','_autoBattle','processExtendTroopMembers','nextActor','extraPositionX','initBattleCore','isCustomBattleScope','faceHeight','getChildIndex','TpbActiveChangeEnabled','createAttachmentSprites','encounterList','randomTargets','helpAreaHeight','split','DamageStyles','MAT','resetTextColor','_inBattleStatusWindow','Sprite_StateIcon_updateFrame','makeActions','FaceDirection','autoBattleStart','displayCurrentState','notFocusValid','svBattlerShadowVisible','ParseSkillNotetags','_lastAction','ActSeq_Mechanics_RemoveBuffDebuff','preparePartyRefresh','drawIcon','ShowFacesListStyle','Game_Action_needsSelection','_battler','item','actorCommandWindowRect','_visualHpGauge_JustDied','setupCriticalEffect','_actorSprites','Scene_Battle_terminate','_itemWindow','gainStoredBoostPoints','flashColor','PreDamageJS','_statesWindow','adjustWeaponSpriteOffset','isBattleSys','FvAniCenterScreen','Game_Action_itemEffectAddNormalState','BattleManager_abort','adjustPosition_ScaleDown','actionBattleCoreJS','autoMeleeMultiTargetActionSet','textSizeEx','sleep','IconSet','Window_BattleLog_performAction','Window_BattleLog_performMiss','ActSeq_Grid_AnimationJsAtNode','isGuardLifeSteal','svbattler','guardLifeSteal','WaitForFloat','createWeather','ActionCenteredName','PopupOffsetY','destroyDamageSprite','_actions','applyBattleCoreCriticalHitRateJS','_skewEasing','debuffColor','cancelLifeSteal','getParamBuffAndStateRate','performLifeSteal','isAnyProjectilePresent','_targetHomeY','ActSeq_Mechanics_OnceParallel','MP_Flat','ActSeq_Angle_WaitForAngle','ActSeq_Motion_RefreshMotion','setActiveWeaponSet','normalHelp','startHomeMove','AnimationID','makeHpDamageText','updateTargetPosition','putActiveBattlerOnTop','allowRandomSpeed','onBattleStartBattleCore','ActSeq_Horror_NoiseCreate','gainBravePoints','setEnemyWindowMode','ActSeq_Grid_AddTriggerToNodeJS','commandOptions','enemyNames','Window_BattleLog_performRecovery','setWaitMode','ActSeq_Cutin_EndVisualCutinEffectAll','mainSpriteWidth','isCancelTriggered','updateMotionCount','isPlaying','_currentAngle','dead\x20actors','_weaponSprite','motionType','addSingleSkillCommand','startOpacity','TP_Rate','EnableDamageCap','ConfigManager_makeData','battleMove','createChildSprite','TpbGaugeOffsetY','battlerHue','_immortal','shouldHideBattleEndPopups','prepare','anchorY','useItem','HITTYPE_MAGICAL','Interrupt','createInBattleStatusWindow','criticalHitRate','performWeaponAnimation','Scene_Map_launchBattle','ActSeq_Horror_TVCreate','MotionAni','statusWindowRectBorderStyle','type','WaitCount2','AspectNameFmt','refreshActorPortrait','addNewState','CmdIconOptions','Scene_Battle_createPartyCommandWindow','stepForward','CoreEngine','string','setHue','Game_Interpreter_command301','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','padding','updatePositionBattleCore','loadBitmap','addAnimationSpriteToContainer','Game_BattlerBase_meetsUsableItemConditions','onMoveEnd','Sprite_Battler_startMove','finalizeScale','addOptionsCommand','MAXMP','performActionEnd','drawLineText','totalHealFmt','animationId','DualWield','Game_Action_executeHpDamage','icons','SceneManager_push','unchanged','_borderPortraitDuration','ActSeq_Weapon_SetActiveWeapon','updateBattlebackBitmap2','StateID','DefaultDamageStyle','clearElementChanges','parallaxScrollX','onDatabaseLoaded','isTpbCharged','isForRandom','FlinchDistanceY','\x5cC[0]','JS\x20%1START\x20TURN','callOptions','setHandler','getStypeIdWithName','VisuMZ_3_BattleCmdTalk','ActSeq_Movement_BattleStep','Settings','ActSeq_Movement_Skew','_waitCount','setupDamagePopup','isAnyoneSpinning','_jumpDuration','startVisualCutin','performRecovery','Sprite_Enemy_initVisibility','isPreviousScene','clearOnceParallelInterpreters','ActSeq_Movement_Spin','attackStatesRate','damagePopupOffsetX','showAnimation','ActSeq_Camera_FocusPoint','updateCollapse','ClearBattleLog','createString','createActors','canMove','ComboWindow','command3011','updateBossCollapse','requestBalloon','ATTACK','%1\x20Aspect','battleSpin','BattleManager_makeActionOrders','JS\x20BATTLE\x20VICTORY','CommandWidth','contentsBack','refreshRequest','pushBaseLine','isSideView','replace','_growWholeDuration','Scene_Options_maxCommands','walk','displayType','isInputting','AlphaFilter','displayMpDamage','addChildToBack','%1StartBattleJS','noise','removeState','VisuMZ_1_ElementStatusCore','enemyId','formula','iterateBattler','createCommandNameWindow','OffsetY','ActSeq_Impact_ShockwaveEachTargets','reverse','_iconIndex','guardHpLifeSteal','-%1','Sprite_Enemy_update','Name','ActSeq_Movement_MoveToTarget','_effectType','checkSubstitute','setupNegativeImpactFilter','FullActions','ShowSubstituteWait','bitmapWidth','isBattleMember','WaitForZoom','setBattlerMotionTrailData','_scene','callUpdateHelp','parallaxScrollXinvertEnemy','VisuMZ_4_BreakShields','getNextDamagePopup','shadow','statusWindowRectDefaultStyle','ActSeq_Horror_Clear','isTpbMainPhase','FocusY','ConvertParams','ScaleY','updateBorderSprite','shouldPopupDamage','requestMotion','_shadowScaleY','battleUIOffsetY','finishActorInput','getBattlePortraitOffsetX','removeBuffsAuto','updateInterpreter','ParseArmorNotetags','ActSeq_Target_PrevTarget','onTurnEnd','Game_Battler_clearMotion','addEscapeCommand','VisuMZ_3_ActSeqProjectiles','HitFlat','battleBalloon','BattleManager_invokeCounterAttack','retreat','jsScaleDown','addExtendedTroopMembers','invokeMagicReflection','selectedBattlers','PrioritySortActors','skillItemWindowRectBorderStyle','getDualWieldTimes','StatusWindowSkinHide','createPartyCommandWindowBattleCore','getItemDamageAmountTextOriginal','ActSeq_Animation_AttackAnimation2','_shakeFlinchPower','updateAction','_frontAttachmentSprite','_homeY','Game_Interpreter_updateWaitMode','version','addAutoBattleCommand','isAlive','makeTargetSelectionMoreVisible','startTurn','AllActorsText','BattleDefeatJS','useDigitGrouping','occasion','processForcedAction','setupTextPopup','addSingleSkillCommands','passive','skew','delay','setAttack','Direction','MOTIONS','CmdIconStatus','DefaultSoftScaler','_tpbNeedsPartyCommand','ShowPortraitsBorderStyle','hitsDmgFmt','removeImmortal','ArRedFlat','criticalDmgFlat','MUSICNOTE','popBaseLine','slice','splice','ShowReflect','ScaleX','battlerSmoothImage','Game_Enemy_setup','displayTpDamage','isNameTemporarilyVisible','log','startInjectAnimation','9441tAOgqm','start','Game_Action_clear','_wtypeIDs','TP_Flat','isETB','Scene_Battle_itemWindowRect','disarmHpLifeSteal','disperseDamage','Window_BattleLog_displayMpDamage','_distortionSprite','guard','Scene_Party','Scene_ItemBase_applyItem','helpWindowRectBorderStyle','PrioritySortActive','\x5cC[4](Passive)','Actor','Sprite_Enemy_setBattler','ActSeqProjectiles','Scene_Battle_startActorCommandSelection','scope','unshift','addFightCommand','BattleManager_endAction_ComboWindow','buff','displayAffectedStatus','_back1Sprite','StatusWindowAttachmentBackOffsetX','isEnemy','performCounter','ActSeq_Element_ForceElements','onBattleStart','adjustPosition_ScaleUp','clearBattleRefreshRequest','drawTextTopAligned','Game_Temp_requestBalloon','Scene_Battle_createAllWindows_ComboWindow','_actionBattlers','CmdTextAutoBattle','ActSeq_Camera_Reset','_doubleTouch','isForRandomBattleCore','CustomFontFace','needsInputWindowChange','battleCameraData','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','performAttackSlot','isBypassDamageCap','uiMenuStyle','loadWindowskin','ARRAYJSON','createStateIconSprite','Game_Action_isForAll','options','_appeared','isMeleeMultiTargetAction','Buffs','updateJump','hidden','JS\x20%1START\x20ACTION','BattleAI','drawActorFace','BattleManager_initMembers','battleCoreResumeLaunchBattle','ActSeq_Cutin_EndVisualCutinEffectType','Window_BattleLog_performDamage','turn','some','_targetGrowX','buffIconIndex','TextFmt','jsScaleToFit','gainCurrentActionsFTB','performJump','getBattlerKeyTargetReplacement','Game_Battler_onTurnEnd','ActSeq_Mechanics_StbExtraAction','resizeWindowBorderStyle','startBattle','_floatEasing','emulateActionEffect','attack','changeTextColor','focus','updateEffectsContainer','ActSeq_Set_TargetActionSet','Scene_Battle_onActorOk','_motionCount','addBattlerStates','_tpbState','updateCounter','_duration','onAngleEnd','isTeamBased','resetCounter','process_VisuMZ_BattleCore_BaseTroops','Scene_Battle_skillWindowRect','svBattlerAnchorY','ActSeq_Mechanics_OtbOrder','MotionFrameWait','ActorJS','Window_BattleStatus_initialize','getEnemyIdWithName','_shadowScaleX','includes','updatePosition','origin','%1-%2','message4','removeCurrentAction','Shadow','_returnWindow','checkShowHideSwitchNotetags','_growX','itemRect','softDamageCap','paySkillCost','graphicType','_enemyID','addBattleGridMoveCommand','clearAllVisualCutins','time','isNextSceneBattleTransitionable','StepDistanceX','isTpb','ActSeq_Animation_BalloonIcon','addTextToCombatLog','AutoAddState','battleVoices','ZZZ','Game_Battler_performMiss','_dimmerSprite','damage','_battleCoreForcedElements','makeTargetSprites','AutoBattle','ActSeq_Animation_PlayAtCoordinate','Window_BattleLog_pushBaseLine','BattleEndEvent','ActSeq_Inject_AnimationStart','isSkewing','ActSeq_Mechanics_AnalyzeWeakness','meetsUsableItemConditions','isAnyoneChangingOpacity','tone','updateWeather','setHelpWindowItem','map','AsTarget','damageOffsetX','close','hitFlat','WaitForCamera','itemLifeStealRate','DTB','cancel','createHelpWindowBattleCore','CheckVisibleBattleNotetags','setBattleAngle','includeState','round','Game_Map_setupBattleback','zoomDuration','Spriteset_Battle_updateActors','ActionSkillMsg1','ActSeq_Mechanics_EtbAction','_actorWindow','startJump','loadSvEnemy','<CUSTOM\x20ACTION\x20SEQUENCE>','\x5cI[%1]\x5cHEXCOLOR<%3>%2','ActSeq_Impact_TimeScale','removeBattleBalloon','ActionEffect','_enemySprites','DigitGrouping','getBattlerKeyTargets','_windowLayer','BTestBypass','isAutoBattleCommandEnabled','tpbCommandFight','ActSeq_Projectile_Icon','mmp','ActSeq_Cutin_WaitForEntrance','totalDmgFmt','performShakeFlinch','spell','frontviewSpriteY','DEF','hitRate','_colorFilter','AutoBattleBgType','spriteId','isDebuffAffected','SmoothImage','clearMotion','performActionMotions','VisuMZ_1_MainMenuCore','waitForFloat','Scene_Battle_needsInputWindowChangeIBS','\x5cC[16]%1\x5cC[0]','drawActorStateData','addState','%1EndBattleJS','makeDamageValue','processTurn','removeOnceParallelInterpreter','_linkedSprite','ShowAddedDebuff','process_VisuMZ_BattleCore_TraitObject_Notetags','changeAtbChargeTime','StatusWindowAttachmentFrontOffsetX','makeStateHelpText','isDuringNonLoopingMotion','requestRefresh','dragonbonesData','physical','actorCommandCancelTPB','Window_BattleLog_displayFailure','_battlerContainer','Sprite_Actor_updateShadow','_colorType','performReflection','\x5cI[%1]\x5cC[%3]%2','updateKeyboardKeys','updateBattleBalloons','ActSeq_Mechanics_WaitForEffect','valueColor','ActSeq_Grid_PushFromTargetNode','Parse_Notetags_HelpDescription','_skewWholeDuration','ActionSequence','attackSkillId','getLastHpDamage','Window_ActorCommand_initialize','onBattleEndBattleCore','Sprite_Battler_isMoving','MotionSpeed','default','updatePageButtonVisibility','endAction','weaponImageId','commandNameWindowCenter','isPlaytest','updateGrow','_baseX','value2','playSystemSound','_flashColor','minimumHits','_states','ActSeq_Movement_HomeMoveToJsPoint','_targetHits','EscapeSuccess','isActor','setupBattleCoreAspects','addCombatLogCommand','_battleBalloonSprites','getFullActionsPTB','ActSeq_Motion_FreezeMotionFrame','makeCommandList','WaitForExit','setupIconTextPopup','changeInputWindow','createAnimationContainer','_battleCoreAddedElements','clearActiveWeaponSet','removeActor','collapse','_emptyBitmap','SkillID','Game_BattlerBase_allIconsIBS','angle','_blendColor','getDragonbones','_damagePopupArray','PopupPosition','jsCritRateAsUser','commandName','Game_Interpreter_command283','checkBattleEnd','ActSeq_Impact_MotionTrailCreate','isCTB','isBTB','prepareCustomActionSequence','ActSeq_Grid_AnimationIDAtNode','changeCtbChargeTime','ShowCurrentState','VisuMZ_3_FrontviewBattleUI','canInput','normalText','battleback2Name','Window_BattleEnemy_show','clearNameTempVisibility','FlinchDistanceX','Sprite_Enemy_updateStateSprite','Scene_Battle_initialize','validTargets','jump','pause','param','_frame','StyleOFF','statesMaxWidth','_createClientArea','ActSeq_Animation_ItemAnimation','command119','DamageRate','_helpWindow','special','_updateClientArea','ActSeq_Impact_Negative','inputtingAction','autoSelect','isAnyoneSkewing','hasSkill','LifeStealRegExp','ActionEnd','changeBattlebacks','horzCells','CheckVisibleSkillNotetags','AutoBattleMsg','hpDamage','maxLines','CalcEscapeRatioJS','getInputButtonString','ActSeq_Target_RandTarget','windowPadding','_forcedBattleLayout','damagePopupOffsetY','updatePhase','battleSpriteSkew','PortraitScaleBorderStyle','_spriteset','normal','toString','getBattlePortraitOffsetY','ConfigManager_applyData','boxHeight','statusTextAutoBattleStyle','battleOpacity','guardMpLifeSteal','reduce','performCollapse','turns','makeActionList','SKILLS','StatusWindowAttachmentBackOffsetY','AspectIcon','fittingHeight','passiveText','frontview_ui','setupActionSet','resetResultSwitches','lastFilename','CmdIconItem','getAspectData','_partyCommandWindow','ActSeq_Mechanics_EmulateItemEffect','maxTp','_backAttachmentSprite','ActSeq_Mechanics_TextPopup','maxCols','ActSeq_Movement_Jump','random','removeHorrorEffect','powerUpColor','isDamagePopupRequested','Game_Action_apply','_createEffectsContainer','rowSpacing','Game_Battler_performActionStart','_deathStateApplied','balloonId','VariableDmg','toUpperCase','okTargetSelectionVisibility','performCastAnimation','Window_BattleEnemy_hide','visualCutinPortraitHue','parent','Game_Party_addActor','Scene_Battle_onEnemyOk','ReflectAnimation','ActSeq_Movement_WaitForMovement','_buffs','setupChild','startAttackWeaponAnimation','onEnemyOk','center','EscapeFailureJS','weatherPower','text','freezeMotion','isActiveTpb','getCommonEventIdWithName','changeTurnOrderByCTB','MotionType','_svBattlerData','Scene_Battle_updateCancelButton','isPTB','shouldDisperseDamage','forceAction','Game_Battler_onBattleStart','traitSet','glitch','wtypeId','setStateTooltipBattler','ActSeq_Movement_Float','parallaxHue','statusWindowRect','isClicked','Game_Action_applyGlobal','Window_BattleLog_displayEvasion','isBorderStylePortraitShown','_statusWindow','InBattleStatus','command357','1144pfLmmV','EndBattlePopups','innerWidth','command301_PreBattleEvent','AntiTintUiElements','ACTOR_OFFSET_X','_eventId','removeChild','Exploiter','pauseInjectAnimation','makeTurnsText','overworldBattleback1Name','_stateSprite','timeScale','partyCommandWindowRectDefaultStyle','evaded','currentExt','currentMaxValue','checkCacheKey','ActSeq_Zoom_Scale','setValue','AllEnemiesText','motionSpeed','GetParamIcon','currentValue','updateSpin','makeSpeed','forActor','ActSeq_Mechanics_SwapWeapon','updateCustomActionSequence','isUndecided','Game_Map_encounterList','performMoveToPoint','makeUniqueNames','OverallFormulaJS','createJS','ItemID','updateSkew','JS\x20ESCAPE\x20SUCCESS','executeDamage','result','Game_Interpreter_PluginCommand','Game_Action_isForOpponent','MpGaugeOffsetX','addShowHpGaugeCommand','isMeleeSingleTargetAction','gainHp','_endBattle','retrieveBattleBalloon','ActSeq_Movement_FaceJsPoint','ActSeq_Mechanics_Immortal','switchToWeaponType','playCancel','ArRedRate','displayReflectionPlayBack','updateStyleOpacity','none','OffsetX','CTB','updateNameTempVisibility','nextActiveWeaponSlot','DamageStyleList','pageButtonPosition','onSkewEnd','NUM','PostStartBattleJS','ActSeq_BattleVoice_PlayCommonLine','isMVAnimation','_targetIndex','setBattleCameraTargets','StateOverlayOffsetY','processCancel','battlerName','VisuMZ_2_WeaponSwapSystem','_baseTexture','makeBuffHelpText','StatusGraphic','updateVisibility','adjustFlippedBattlefield','auto','canSingleOrMultipleSelect','EVAL','actorCommandAutoBattle','ActSeq_Mechanics_BtbGain','_lastActor','buffRemove','updateFrame','MANUAL','expTotal','Scene_Battle_updateBattleProcess','PostApplyAsTargetJS','alive\x20actors\x20not\x20user','Scene_Battle_isTimeActiveIBS','Window_BattleLog_popupDamage','processDefeat','executeHpDamage','applyDamageCaps','VisuMZ_2_PartySystem','isGrowing','dead\x20enemies','JS\x20%1APPLY\x20%2','ArPenFlat','processRandomizedData','AutoNotetag','hpDamageFmt','isNegativeLifeSteal','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','evalDamageFormula','drawGauge','addActor','startShakeFlinch','_enemySprite','_totalValue','updateShadow','isForAnyone','actor%1-portrait','missed','Game_Action_executeMpDamage','ActSeq_Mechanics_PtbAlterCost','_battleLayoutStyle','alterCost','setActorHome','getSpecificBattlerKeyTarget','isFriendly','createCancelButton','applySoftDamageCap','loadOtherActorImages','LUK','isPartyTpbInputtable','stbGainInstant','alterBreakShield','ActSeq_Mechanics_FtbAction','StyleName','isStateAffected','disarmLifeSteal','makeBuffName','onRegeneratePlayStateAnimation','isDisplayEmergedEnemies','QUESTION','_skillIDs','stateRate','IconStypeMagic','_cursorArea','\x20to\x20%1\x20midbattle.','setupWeaponAnimation','selectNextCommand','Game_Interpreter_terminate','AutoBattleOK','clearTargetBattlerKey','Text','_cursorSprite','Scene_Battle_commandEscape','ActSeq_Mechanics_BreakShieldReset','processDrawEnemyBattler','smoothness','_actorMultiTargetWindow','WIDTH','HitRate','applyBattleCoreHitRateJS','enemyStatus','angleDuration','updateShadowVisibility','_opacityWholeDuration','terminate','offsetX','update','updatePadding','createInnerPortrait','setTargetBattlerKey','updateHelp','addNormalStatus','selectNextActor','Game_Action_testApply','battlerSprites','children','%1Damage%2JS','attackAnimationId1','createTargetsJS','Game_System_initialize','ActSeq_Grid_AddTriggerToNode','Game_Map_battleback2Name','isPartyCommandWindowDisabled','updateFloat','speed','missle','ActSeq_Mechanics_Collapse','Damage','flashDuration','getHardDamageCap','VisuMZ_2_BattleSystemCTB','removeAnimationFromContainer','All\x20Enemies','clearBattleCoreAspects','isAutoBattle','_forcedHomeX','BattleManager_startBattle','Mute','ActorCmd','Window_ItemList_maxCols','_multipliers','Sprite_Enemy_updateCollapse','ChantStyle','createDamageSprite','regenerateAllBattleCore','waitCount','isBattlerGrounded','WaitForAnimation','ActionCount','itemEffectAddNormalState','skill','Scene_Map_initialize','HelpItem','criticalDmgRate','_allTargets','Window_BattleLog_displayCritical','floatBattler','drawItemImagePortraitStyle','visualHpGauge','_waitMode','DefeatEvent','buffHelpFmt','_armorPenetration','filter','Game_Action_isForAliveFriend','mainSpriteScaleY','_target','createDamageCounterWindow','drawSingleSkillCost','pop','MUSIC','mainSpriteHeight','lifeSteaItem','loadSystem','enemyShowParametersIfDefeated','addDebuff','drawDarkRect','addChildAt','actor%1-gauge-%2','%1\x20%2','ShowCritical','revealNewWeaknesses','setupShockwaveImpactFilter','invokeCounterAttack','Height','isDTB','EXCLAMATION','ActSeq_Grid_ActionAnimationAtNode','PostApplyJS','ShowAddedState','callNextMethod','applyForcedGameTroopSettingsBattleCore','Game_Action_isForFriend','BattlebackScale','power','$target','processAnimationRequests','Game_Actor_equips','_callSceneOptions','ActiveTpbOptionsMessage','SkillsStatesCore','inHomePosition','lifeStealRate','Game_Action_updateLastTarget','Linear','traits','startActorCommandSelection','USER-DEFINED\x205','_updateDuration','revertTpbCachedActor','496242WJDKQF','globalAlpha','_effectsContainer','WaitForMovement','duration','_animationCount','setBattleCameraPoint','removeStatesAuto','_logWindow','_lastHpDamage','statusDescription','setHalfActionsPTB','svActorHorzCells','drawComboText','targetsForFriends','isTickBased','battleCorePreBattleCommonEvent','Sprite_Animation_targetSpritePosition','processActorCommandCancelTPB','drawText','note','visibilityState','gaugeLineHeight','ActSeq_Mechanics_CtbSpeed','front\x20base','isCommonEventReserved','updateStatusWindowPosition','isCustomActionSequence','setSTBExploited','WaitForEntrance','loadPicture','Window_SkillList_maxCols','Scene_Battle_createActorCommandWindowIBS','_angleWholeDuration','PostEndTurnJS','ActSeq_Movement_HomeMoveToPoint','ActSeq_Animation_WaitForAnimation','_active','enemyMpGaugeRate','Post','iconWidth','commandSymbol','setBattlerFacePoint','performEvasion','svBattlerData','ActSeq_Mechanics_StateTurnsChangeTo','CastPhysical','pagedown','process_VisuMZ_BattleCore_DamageStyles','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','onEscapeSuccess','PostStartTurnJS','CriticalHitRate','commandStyle','clear','removeDamageSprite','PRE-','ParseItemNotetags','ActSeq_Cutin_WaitForExit','Point','Enemy-%1-%2','EmergeText','drawActorGraphic','startTpbTurn','obj','process_VisuMZ_BattleCore_Failsafes','loadCharacter','TextAlign','3587478ysyrFL','setupFont','ActSeq_Motion_PerformAction','STYPES','addBattleCommandTalk','StatusWindowSkinFilename','_preemptive','GUARD','weapons','ActSeq_Movement_WaitForOpacity','JumpToLabel','Sprite_Actor_moveToStartPosition','Scene_Battle_onActorCancel','CreateActionSequenceTargets','DamageType%1','isTimeActive','startWeaponAnimation','allBattleMembers','setTroopPage','ActSeq_Motion_WaitMotionFrame','processAbort','itemHeight','PostEndActionJS','value','skills','_stateIconSprite','_totalHits','CalcEscapeRaiseJS','PreStartTurnJS','_freezeMotionData','isAffectedByBreakShield','textAlign','PopupShiftX','isWaiting','_cache','svAnchorY','PosOffsetX','alive\x20enemies','waitForOpacity','ActSeq_Mechanics_EmulateSkillEffect','touchUI','weatherType','_opacityEasing','applyVariance','isMagical','mhp','PreApplyAsTargetJS','JS\x20%1START\x20BATTLE','Scene_Battle_startPartyCommandSelection','contentsOpacity','ShowEnemyGauge','canGuardBattleCore','command301','setupOversaturateImpactFilter','createContents','alive\x20enemies\x20not\x20target','XPSpriteYLocation','startMove','Sprite_AnimationMV_updatePosition','negativeHpLifeSteal','createRateJS','setSvBattlerSprite','iconHeight','battleStatusWindowAnimationContainer','%1EndActionJS','_makeFontNameText','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','CreateCutinSettings','getItemDamageAmountLabelOriginal','EscapeFail','debuffValueFmt','filters','Intensity','Sprite_Actor_setActorHome','isBattleCoreTargetScope','hasSvBattler','removeBuff','LIGHT-BULB','updateAttachmentSprites','createShadowSprite','_targetFloatHeight','setupRgbSplitImpactFilter','_baseY','_damages','_regionBattleback2','comboWindowOffsetY','Frame','CheckSkillCommandShowSwitches','NameAlwaysSelectOnly','Balloon','AllowCollapse','ShowHide','Spriteset_Battle_createLowerLayer','_forcedHomeY','damageRate','VisuMZ_3_ActSeqImpact','requestMotionRefresh','displayReflection','CmdIconAutoBattle','_defeatedEnemies','StepDistanceY','State-%1-%2','isAnimationShownOnBattlePortrait','StateOverlayOffsetX','TpGaugeOffsetX','Window_BattleLog_performReflection','CommandAddAutoBattle','battleAnimation','ParseEnemyNotetags','MultiTarget','Game_Action_itemEffectAddAttackState','Window_BattleLog_popBaseLine','stepFlinch','isAutoBattleCommandAdded','802984wzrfSQ','extraPositionY','isChangingOpacity','animationNextDelay','setupZoomBlurImpactFilter','ShowRemovedBuff','updateBattlebackBitmap','setSkill','AnchorX','makeData','helpWindowRect','reserveCommonEvent','Scene_Map_updateCallMenu','QoL','%1▲','_homeEasing','getItemDamageAmountTextBattleCore','ActSeq_BattleLog_PopBaseLine','StateIconOffsetY','BattleManager_selectNextCommand','dead\x20friends','displayEvasion','ENEMY_OFFSET_Y','_flinched','_flipScaleX','XPActorDefaultHeight','SETTINGS','100%','_commonEventKey','addedBuffs','Width','process_VisuMZ_BattleCore_PreBattleCommonEvent','length','alignBattleCoreDamageSprite','prototype','JS\x20BATTLE\x20DEFEAT','join','scrollTo','guardSkillId','_lastRegenFrameCount','_drawTextOutline','gainFullActionsPTB','ActSeq_BattleLog_DisplayAction','_jumpMaxHeight','setBackgroundType','waitForEffect','resetNameTempVisibility','updateHomeMove','battleCommandIcon','_forceAction','registerDefeatedEnemy','playOnceParallelInterpreter','CommandVisible','battleback1Name','autoBattleUseSkills','becomeSTBExploited','charging','_inBattleStatusMode','targetObject','battleSkew','Game_Action_makeTargets','PreDamageAsUserJS','TimeScale','createBattleBalloon','_character','_battleCoreBattleResumeAfter','drawActorIcons','VisuMZ_2_BattleSystemATB','updateShadowBattleCore','_action','Slot','drawEnemyBattler','canAttackBattleCore','CheckMapBattleEventValid','minimumStayDuration','onBattleEnd','_lines','_enemyWindowMode','addWindow','updateBattlerContainer','drawItemBackground','endAnimation','hitText','StatusWindowAttachmentFront','left','Turns','deselect','States','previousActor','View\x20battle\x20member\x20status.','ActSeq_Skew_Reset','_commonEventIDs','addGeneralOptions','Defeat','action','_targetDamage','ActSeq_Impact_ColorBreak','_tempBattler','isDrain','_motionSpeed','repositionCancelButtonBorderStyle','battleCoreTpbMainPhase','WaitCount1','deadMembers','createActorCommandWindowBattleCore','pageOffsetX','createDistortionSprite','alterChange','clearFreezeMotion','TurnsFmt','battleCommandName','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Parse_Notetags_Targets','Game_Battler_performEvasion','BoostPoints','autoBattleAtStart','MUSIC-NOTE','ceil','VisuMZ_2_HorrorEffects','attachSpritesToDistortionSprite','hitsHealFmt','AsUser','actorCommandSingleSkill','COBWEB','_homeWholeDuration','increaseTotal','executeMpDamage','commandStyleCheck','SkillItemMiddleLayout','addAttackCommand','process_VisuMZ_BattleCore_jsFunctions','PreEndActionJS','visible','▼%1','applyGlobalCommonEventNotetags','maxItems','Scene_Battle_selectPreviousCommand','setStateTurns','HelpFight','getWtypeIdWithName'];_0x20d1=function(){return _0x5b88d0;};return _0x20d1();}var label=_0x46ffcc(0x354),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x15d972){const _0x5818bb=_0x46ffcc;return _0x15d972[_0x5818bb(0xa7d)]&&_0x15d972[_0x5818bb(0x311)][_0x5818bb(0x6a2)]('['+label+']');})[0x0];VisuMZ[label][_0x46ffcc(0x59e)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x46ffcc(0x5ee)]=function(_0x242d61,_0x1f8689){const _0xccd963=_0x46ffcc;for(const _0xc9351a in _0x1f8689){if(_0xc9351a[_0xccd963(0xe0)](/(.*):(.*)/i)){const _0x56aed2=String(RegExp['$1']),_0x195b73=String(RegExp['$2'])[_0xccd963(0x7b1)]()[_0xccd963(0xafd)]();let _0x2ab94d,_0x3be787,_0x4ad7f7;switch(_0x195b73){case _0xccd963(0x81c):_0x2ab94d=_0x1f8689[_0xc9351a]!==''?Number(_0x1f8689[_0xc9351a]):0x0;break;case'ARRAYNUM':_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON['parse'](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787[_0xccd963(0x6cd)](_0x3442e7=>Number(_0x3442e7));break;case _0xccd963(0x82d):_0x2ab94d=_0x1f8689[_0xc9351a]!==''?eval(_0x1f8689[_0xc9351a]):null;break;case _0xccd963(0x153):_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON[_0xccd963(0xb21)](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787[_0xccd963(0x6cd)](_0x26e952=>eval(_0x26e952));break;case'JSON':_0x2ab94d=_0x1f8689[_0xc9351a]!==''?JSON['parse'](_0x1f8689[_0xc9351a]):'';break;case _0xccd963(0x66c):_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON['parse'](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787['map'](_0x5978ac=>JSON[_0xccd963(0xb21)](_0x5978ac));break;case _0xccd963(0x131):_0x2ab94d=_0x1f8689[_0xc9351a]!==''?new Function(JSON[_0xccd963(0xb21)](_0x1f8689[_0xc9351a])):new Function('return\x200');break;case'ARRAYFUNC':_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON[_0xccd963(0xb21)](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787[_0xccd963(0x6cd)](_0x16ba82=>new Function(JSON[_0xccd963(0xb21)](_0x16ba82)));break;case _0xccd963(0xb56):_0x2ab94d=_0x1f8689[_0xc9351a]!==''?String(_0x1f8689[_0xc9351a]):'';break;case _0xccd963(0x1a1):_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON[_0xccd963(0xb21)](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787['map'](_0x22d946=>String(_0x22d946));break;case'STRUCT':_0x4ad7f7=_0x1f8689[_0xc9351a]!==''?JSON['parse'](_0x1f8689[_0xc9351a]):{},_0x242d61[_0x56aed2]={},VisuMZ[_0xccd963(0x5ee)](_0x242d61[_0x56aed2],_0x4ad7f7);continue;case _0xccd963(0x4e2):_0x3be787=_0x1f8689[_0xc9351a]!==''?JSON[_0xccd963(0xb21)](_0x1f8689[_0xc9351a]):[],_0x2ab94d=_0x3be787['map'](_0x33fcde=>VisuMZ[_0xccd963(0x5ee)]({},JSON['parse'](_0x33fcde)));break;default:continue;}_0x242d61[_0x56aed2]=_0x2ab94d;}}return _0x242d61;},(_0x583e61=>{const _0xe3397f=_0x46ffcc,_0x43473c=_0x583e61[_0xe3397f(0x1a8)];for(const _0x108e2e of dependencies){if(!Imported[_0x108e2e]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0xe3397f(0x498)](_0x43473c,_0x108e2e)),SceneManager['exit']();break;}}const _0x524d62=_0x583e61[_0xe3397f(0x311)];if(_0x524d62[_0xe3397f(0xe0)](/\[Version[ ](.*?)\]/i)){const _0x3f1f9c=Number(RegExp['$1']);_0x3f1f9c!==VisuMZ[label][_0xe3397f(0x613)]&&(alert(_0xe3397f(0x4a9)['format'](_0x43473c,_0x3f1f9c)),SceneManager[_0xe3397f(0x462)]());}if(_0x524d62[_0xe3397f(0xe0)](/\[Tier[ ](\d+)\]/i)){const _0x2479f9=Number(RegExp['$1']);_0x2479f9<tier?(alert(_0xe3397f(0x91a)['format'](_0x43473c,_0x2479f9,tier)),SceneManager[_0xe3397f(0x462)]()):tier=Math[_0xe3397f(0x148)](_0x2479f9,tier);}VisuMZ[_0xe3397f(0x5ee)](VisuMZ[label]['Settings'],_0x583e61['parameters']);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x583db4){const _0x42620b=_0x46ffcc;let _0x5ebbe1=[];for(const _0x7282c0 of _0x583db4){_0x5ebbe1=_0x5ebbe1[_0x42620b(0x385)](VisuMZ['ConvertActionSequenceTarget'](_0x7282c0));}return _0x5ebbe1[_0x42620b(0x8ba)](_0x253d46=>_0x253d46);},VisuMZ[_0x46ffcc(0x19b)]=function(_0x3a4380){const _0x7ba782=_0x46ffcc,_0x104f0c=BattleManager['allBattleMembers']()[_0x7ba782(0x8ba)](_0x49969e=>_0x49969e&&_0x49969e[_0x7ba782(0x241)]()),_0x398439=BattleManager['_subject'],_0x51455b=BattleManager[_0x7ba782(0x8bd)],_0x3a93fc=BattleManager[_0x7ba782(0x8b1)]?BattleManager[_0x7ba782(0x8b1)][_0x7ba782(0x62f)](0x0):_0x104f0c;_0x3a4380=_0x3a4380[_0x7ba782(0xb3e)]()[_0x7ba782(0xafd)]();if(_0x3a4380===_0x7ba782(0xa30))return[_0x398439];else{if(_0x3a4380==='current\x20target')return[_0x51455b];else{if(_0x3a4380===_0x7ba782(0xb34)){if(_0x51455b){const _0x3b88cf=_0x3a93fc['indexOf'](_0x51455b);return _0x3b88cf>=0x0?[_0x3a93fc[_0x3b88cf-0x1]||_0x51455b]:[_0x51455b];}}else{if(_0x3a4380==='next\x20target'){if(_0x51455b){const _0x3616aa=_0x3a93fc[_0x7ba782(0xb8c)](_0x51455b);return _0x3616aa>=0x0?[_0x3a93fc[_0x3616aa+0x1]||_0x51455b]:[_0x51455b];}}else{if(_0x3a4380==='all\x20targets')return _0x3a93fc;else{if(_0x3a4380===_0x7ba782(0x68d))return[_0x398439][_0x7ba782(0x385)](_0x3a93fc);else{if(_0x3a4380===_0x7ba782(0x210))return _0x104f0c[_0x7ba782(0x8ba)](_0x10a444=>_0x10a444!==_0x398439&&!_0x3a93fc[_0x7ba782(0x6a2)](_0x10a444)&&_0x10a444[_0x7ba782(0x503)]());else{if(_0x3a4380===_0x7ba782(0x76f))return[VisuMZ['GetActionSequenceSpecialTarget']()];else{if(_0x3a4380[_0x7ba782(0xe0)](/SPECIAL (.*)>/i)){const _0x2133ea=String(RegExp['$1'])[_0x7ba782(0x4f9)](',')[_0x7ba782(0x6cd)](_0x4bafec=>_0x4bafec['trim']());return[VisuMZ[_0x7ba782(0x4e8)](_0x2133ea)];}}}}}}}}}if(_0x398439){if(_0x3a4380===_0x7ba782(0x2ef))return _0x398439[_0x7ba782(0xa71)]()[_0x7ba782(0x312)]();else{if(_0x3a4380==='alive\x20friends\x20not\x20user')return _0x398439[_0x7ba782(0xa71)]()[_0x7ba782(0x312)]()['filter'](_0x2f133b=>_0x2f133b!==_0x398439);else{if(_0x3a4380==='alive\x20friends\x20not\x20target')return _0x398439[_0x7ba782(0xa71)]()['aliveMembers']()[_0x7ba782(0x8ba)](_0x21739f=>_0x21739f!==_0x51455b);else{if(_0x3a4380===_0x7ba782(0x9b3))return _0x398439[_0x7ba782(0xa71)]()[_0x7ba782(0xa06)]();else{if(_0x3a4380[_0x7ba782(0xe0)](/FRIEND INDEX (\d+)/i)){const _0x1dd86a=Number(RegExp['$1']);return[_0x398439[_0x7ba782(0xa71)]()[_0x7ba782(0x3b2)]()[_0x1dd86a]];}}}}}if(_0x3a4380==='alive\x20opponents')return _0x398439[_0x7ba782(0xbea)]()[_0x7ba782(0x312)]();else{if(_0x3a4380==='alive\x20opponents\x20not\x20target')return _0x398439['opponentsUnit']()[_0x7ba782(0x312)]()[_0x7ba782(0x8ba)](_0x371a78=>_0x371a78!==_0x51455b);else{if(_0x3a4380==='dead\x20opponents')return _0x398439['opponentsUnit']()[_0x7ba782(0xa06)]();else{if(_0x3a4380[_0x7ba782(0xe0)](/OPPONENT INDEX (\d+)/i)){const _0x1b2bee=Number(RegExp['$1']);return[_0x398439['opponentsUnit']()['members']()[_0x1b2bee]];}}}}}if(_0x3a4380===_0x7ba782(0xa5b))return $gameParty[_0x7ba782(0x312)]();else{if(_0x3a4380===_0x7ba782(0x837))return $gameParty[_0x7ba782(0x312)]()['filter'](_0x58ec32=>_0x58ec32!==_0x398439);else{if(_0x3a4380===_0x7ba782(0x2e5))return $gameParty['aliveMembers']()['filter'](_0x31ba4a=>_0x31ba4a!==_0x51455b);else{if(_0x3a4380===_0x7ba782(0x552))return $gameParty[_0x7ba782(0xa06)]();else{if(_0x3a4380[_0x7ba782(0xe0)](/ACTOR INDEX (\d+)/i)){const _0x50afdd=Number(RegExp['$1']);return[$gameParty[_0x7ba782(0x3b2)]()[_0x50afdd]];}else{if(_0x3a4380[_0x7ba782(0xe0)](/ACTOR ID (\d+)/i)){const _0x144173=Number(RegExp['$1']);return[$gameActors[_0x7ba782(0xb81)](_0x144173)];}}}}}}if(_0x3a4380===_0x7ba782(0x952))return $gameTroop[_0x7ba782(0x312)]();else{if(_0x3a4380==='alive\x20enemies\x20not\x20user')return $gameTroop[_0x7ba782(0x312)]()['filter'](_0x51e4f4=>_0x51e4f4!==_0x398439);else{if(_0x3a4380===_0x7ba782(0x964))return $gameTroop[_0x7ba782(0x312)]()['filter'](_0x169128=>_0x169128!==_0x51455b);else{if(_0x3a4380===_0x7ba782(0x83f))return $gameTroop[_0x7ba782(0xa06)]();else{if(_0x3a4380[_0x7ba782(0xe0)](/ENEMY INDEX (\d+)/i)){const _0x577b0d=Number(RegExp['$1']);return[$gameTroop['members']()[_0x577b0d]];}else{if(_0x3a4380[_0x7ba782(0xe0)](/ENEMY ID (\d+)/i)){const _0x24311a=Number(RegExp['$1']);return $gameTroop[_0x7ba782(0x312)]()[_0x7ba782(0x8ba)](_0x95a4b6=>_0x95a4b6[_0x7ba782(0x5ce)]()===_0x24311a);}}}}}}if(_0x3a4380==='alive\x20battlers')return _0x104f0c[_0x7ba782(0x8ba)](_0x2e9259=>_0x2e9259[_0x7ba782(0x615)]());else{if(_0x3a4380==='alive\x20battlers\x20not\x20user')return _0x104f0c[_0x7ba782(0x8ba)](_0x12f56a=>_0x12f56a[_0x7ba782(0x615)]()&&_0x12f56a!==_0x398439);else{if(_0x3a4380==='alive\x20battlers\x20not\x20target')return _0x104f0c[_0x7ba782(0x8ba)](_0x629006=>_0x629006[_0x7ba782(0x615)]()&&_0x629006!==_0x51455b);else{if(_0x3a4380==='dead\x20battlers')return _0x104f0c[_0x7ba782(0x8ba)](_0x359c7d=>_0x359c7d[_0x7ba782(0xb76)]());}}}return[];},VisuMZ[_0x46ffcc(0x159)]=function(){const _0x459730=_0x46ffcc;return BattleManager[_0x459730(0x8bd)];},VisuMZ[_0x46ffcc(0x4e8)]=function(_0x572341){const _0x2dacf0=_0x46ffcc;return BattleManager[_0x2dacf0(0x8bd)];},PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x22d),_0x1bb516=>{const _0xd04afc=_0x46ffcc;if(!SceneManager[_0xd04afc(0xaf2)]())return;VisuMZ[_0xd04afc(0x5ee)](_0x1bb516,_0x1bb516);const _0xca790e=$gameTemp[_0xd04afc(0x13a)](),_0x42c86e=BattleManager['_action'],_0x82c4ac=BattleManager[_0xd04afc(0x30f)],_0x251605=BattleManager[_0xd04afc(0x8b1)]?BattleManager[_0xd04afc(0x8b1)]['slice'](0x0):[],_0x199a15=BattleManager[_0xd04afc(0x8f1)];if(!_0xca790e||!_0x42c86e||!_0x82c4ac)return;if(!_0x42c86e[_0xd04afc(0x50d)]())return;if(_0x1bb516['DisplayAction'])_0x199a15['displayAction'](_0x82c4ac,_0x42c86e[_0xd04afc(0x50d)]());_0x1bb516[_0xd04afc(0x1ad)]&&_0x199a15[_0xd04afc(0x40a)](_0xd04afc(0xbc1),_0x82c4ac,_0x251605,!![]);if(_0x1bb516[_0xd04afc(0x1d3)])_0x199a15[_0xd04afc(0x40a)](_0xd04afc(0xbcb),_0x82c4ac,_0x42c86e);if(_0x1bb516[_0xd04afc(0x8ec)])_0x199a15['push'](_0xd04afc(0x100));if(_0x1bb516[_0xd04afc(0xf8)])_0x199a15[_0xd04afc(0x40a)]('performCastAnimation',_0x82c4ac,_0x42c86e);if(_0x1bb516[_0xd04afc(0x8aa)])_0x199a15[_0xd04afc(0x40a)](_0xd04afc(0xbd3));_0xca790e[_0xd04afc(0x54b)](_0xd04afc(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xc5),_0x4a30d1=>{const _0x1c1531=_0x46ffcc;if(!SceneManager[_0x1c1531(0xaf2)]())return;VisuMZ[_0x1c1531(0x5ee)](_0x4a30d1,_0x4a30d1);const _0x3bd9db=$gameTemp[_0x1c1531(0x13a)](),_0x235919=BattleManager['_action'],_0xeade6c=BattleManager[_0x1c1531(0x30f)],_0x20541b=BattleManager[_0x1c1531(0x8b1)]?BattleManager[_0x1c1531(0x8b1)]['slice'](0x0):[],_0x494e89=BattleManager[_0x1c1531(0x8f1)],_0x5bab8a=_0x4a30d1[_0x1c1531(0x587)]??![];if(!_0x3bd9db||!_0x235919||!_0xeade6c)return;if(!_0x235919[_0x1c1531(0x50d)]())return;let _0x3631fe=_0x5bab8a?_0x494e89[_0x1c1531(0x609)](_0xeade6c):0x1;for(let _0x14f461=0x0;_0x14f461<_0x3631fe;_0x14f461++){_0x5bab8a&&_0xeade6c[_0x1c1531(0x738)]()&&_0x494e89[_0x1c1531(0x40a)](_0x1c1531(0x53b),_0xeade6c,_0x14f461);if(_0x4a30d1[_0x1c1531(0x14b)])_0x494e89[_0x1c1531(0x40a)](_0x1c1531(0x3e2),_0xeade6c,_0x235919);if(_0x4a30d1[_0x1c1531(0x228)]>0x0)_0x494e89['push'](_0x1c1531(0x8a8),_0x4a30d1[_0x1c1531(0x228)]);if(_0x4a30d1[_0x1c1531(0x24c)])_0x494e89[_0x1c1531(0x40a)]('showAnimation',_0xeade6c,_0x20541b,_0x235919[_0x1c1531(0x50d)]()[_0x1c1531(0x586)]);if(_0x4a30d1[_0x1c1531(0x8aa)])_0x494e89[_0x1c1531(0x40a)](_0x1c1531(0xbd3));for(const _0x3e58a5 of _0x20541b){if(!_0x3e58a5)continue;if(_0x4a30d1[_0x1c1531(0x6e7)])_0x494e89['push'](_0x1c1531(0x261),_0xeade6c,_0x3e58a5);}}_0x5bab8a&&_0xeade6c[_0x1c1531(0x738)]()&&_0x494e89[_0x1c1531(0x40a)](_0x1c1531(0x744),_0xeade6c);if(_0x4a30d1[_0x1c1531(0x1ad)])_0x494e89['push'](_0x1c1531(0xbc1),_0xeade6c,_0x20541b,![]);_0x3bd9db['setWaitMode'](_0x1c1531(0x2aa));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x68f),_0x4fddfc=>{const _0x3c7611=_0x46ffcc;if(!SceneManager[_0x3c7611(0xaf2)]())return;VisuMZ[_0x3c7611(0x5ee)](_0x4fddfc,_0x4fddfc);const _0x101828=$gameTemp['getLastPluginCommandInterpreter'](),_0x137e15=BattleManager[_0x3c7611(0x9e4)],_0x1f0483=BattleManager[_0x3c7611(0x30f)],_0x1b614f=BattleManager[_0x3c7611(0x8b1)]?BattleManager[_0x3c7611(0x8b1)][_0x3c7611(0x62f)](0x0):[],_0x27c07b=BattleManager['_logWindow'],_0x7855e9=_0x4fddfc[_0x3c7611(0x587)]??![];if(!_0x101828||!_0x137e15||!_0x1f0483)return;if(!_0x137e15[_0x3c7611(0x50d)]())return;let _0x204e9f=_0x7855e9?_0x27c07b['getDualWieldTimes'](_0x1f0483):0x1;for(let _0x179ee1=0x0;_0x179ee1<_0x204e9f;_0x179ee1++){for(const _0x5ba419 of _0x1b614f){if(!_0x5ba419)continue;_0x7855e9&&_0x1f0483[_0x3c7611(0x738)]()&&_0x27c07b[_0x3c7611(0x40a)](_0x3c7611(0x53b),_0x1f0483,_0x179ee1);if(_0x4fddfc[_0x3c7611(0x14b)])_0x27c07b['push']('performAction',_0x1f0483,_0x137e15);if(_0x4fddfc[_0x3c7611(0xa05)]>0x0)_0x27c07b[_0x3c7611(0x40a)](_0x3c7611(0x8a8),_0x4fddfc[_0x3c7611(0xa05)]);if(_0x4fddfc[_0x3c7611(0x24c)])_0x27c07b[_0x3c7611(0x40a)]('showAnimation',_0x1f0483,[_0x5ba419],_0x137e15[_0x3c7611(0x50d)]()['animationId']);if(_0x4fddfc[_0x3c7611(0x56d)]>0x0)_0x27c07b[_0x3c7611(0x40a)]('waitCount',_0x4fddfc[_0x3c7611(0x56d)]);if(_0x4fddfc[_0x3c7611(0x6e7)])_0x27c07b[_0x3c7611(0x40a)](_0x3c7611(0x261),_0x1f0483,_0x5ba419);}}_0x7855e9&&_0x1f0483['isActor']()&&_0x27c07b['push']('clearActiveWeaponSet',_0x1f0483);if(_0x4fddfc[_0x3c7611(0x1ad)])_0x27c07b[_0x3c7611(0x40a)]('applyImmortal',_0x1f0483,_0x1b614f,![]);_0x101828[_0x3c7611(0x54b)](_0x3c7611(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x1d4),_0xe7248e=>{const _0x3fb67b=_0x46ffcc;if(!SceneManager[_0x3fb67b(0xaf2)]())return;VisuMZ[_0x3fb67b(0x5ee)](_0xe7248e,_0xe7248e);const _0x42491f=$gameTemp['getLastPluginCommandInterpreter'](),_0x41e673=BattleManager[_0x3fb67b(0x9e4)],_0x22f6db=BattleManager['_subject'],_0xfed00b=BattleManager[_0x3fb67b(0x8b1)]?BattleManager['_allTargets']['slice'](0x0):[],_0x2a12b1=BattleManager[_0x3fb67b(0x8f1)];if(!_0x42491f||!_0x41e673||!_0x22f6db)return;if(!_0x41e673[_0x3fb67b(0x50d)]())return;if(_0xe7248e[_0x3fb67b(0x1ad)])_0x2a12b1[_0x3fb67b(0x40a)](_0x3fb67b(0xbc1),_0x22f6db,_0xfed00b,![]);if(_0xe7248e[_0x3fb67b(0x4aa)])_0x2a12b1['push']('waitForNewLine');if(_0xe7248e[_0x3fb67b(0x10f)])_0x2a12b1[_0x3fb67b(0x40a)](_0x3fb67b(0x9cc));if(_0xe7248e[_0x3fb67b(0x5af)])_0x2a12b1[_0x3fb67b(0x40a)](_0x3fb67b(0x91f));if(_0xe7248e[_0x3fb67b(0x777)])_0x2a12b1[_0x3fb67b(0x40a)](_0x3fb67b(0x583),_0x22f6db);if(_0xe7248e[_0x3fb67b(0x8ec)])_0x2a12b1['push'](_0x3fb67b(0x100));_0x42491f['setWaitMode'](_0x3fb67b(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_ChangeAngle',_0x23de7b=>{const _0x1b5ae8=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b5ae8(0x1f8)])return;VisuMZ['ConvertParams'](_0x23de7b,_0x23de7b);const _0x38673f=$gameTemp[_0x1b5ae8(0x13a)](),_0x379b33=_0x23de7b[_0x1b5ae8(0x2ee)];if(!_0x38673f)return;$gameScreen[_0x1b5ae8(0x6d8)](_0x23de7b[_0x1b5ae8(0xbf0)],_0x23de7b['Duration'],_0x23de7b[_0x1b5ae8(0xff)]);if(_0x379b33)_0x38673f[_0x1b5ae8(0x54b)]('battleAngle');}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x25d),_0x52cb15=>{const _0x2330f6=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2330f6(0x1f8)])return;VisuMZ[_0x2330f6(0x5ee)](_0x52cb15,_0x52cb15);const _0x124f6e=$gameTemp['getLastPluginCommandInterpreter'](),_0x77996a=_0x52cb15[_0x2330f6(0x2ee)];if(!_0x124f6e)return;$gameScreen['setBattleAngle'](0x0,_0x52cb15[_0x2330f6(0xb58)],_0x52cb15['EasingType']);if(_0x77996a)_0x124f6e[_0x2330f6(0x54b)](_0x2330f6(0xf7));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x539),_0x7f0294=>{const _0x5cc172=_0x46ffcc;if(!SceneManager[_0x5cc172(0xaf2)]())return;if(!Imported[_0x5cc172(0x1f8)])return;const _0xf03cf3=$gameTemp[_0x5cc172(0x13a)]();if(!_0xf03cf3)return;_0xf03cf3[_0x5cc172(0x54b)](_0x5cc172(0xf7));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Animation_ActionAnimation',_0x3ea190=>{const _0x1fcc6d=_0x46ffcc;if(!SceneManager[_0x1fcc6d(0xaf2)]())return;VisuMZ[_0x1fcc6d(0x5ee)](_0x3ea190,_0x3ea190);const _0x5296bb=$gameTemp[_0x1fcc6d(0x13a)](),_0x4d9e0d=BattleManager[_0x1fcc6d(0x9e4)],_0x2de9d4=BattleManager[_0x1fcc6d(0x30f)],_0x17d7aa=VisuMZ[_0x1fcc6d(0x93a)](_0x3ea190[_0x1fcc6d(0xb78)]),_0x4336ea=_0x3ea190[_0x1fcc6d(0x1b5)],_0x1074d5=BattleManager[_0x1fcc6d(0x8f1)];if(!_0x5296bb||!_0x4d9e0d||!_0x2de9d4)return;if(!_0x4d9e0d['item']())return;let _0xf931d5=_0x4d9e0d['item']()['animationId'];if(_0xf931d5<0x0)_0xf931d5=_0x2de9d4[_0x1fcc6d(0x88c)]();$gameTemp[_0x1fcc6d(0x3cf)](_0x17d7aa,_0xf931d5,_0x4336ea),_0x3ea190['WaitForAnimation']&&_0x5296bb[_0x1fcc6d(0x54b)](_0x1fcc6d(0x998));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x185),_0x20fb03=>{const _0x4c1a4b=_0x46ffcc;if(!SceneManager[_0x4c1a4b(0xaf2)]())return;VisuMZ[_0x4c1a4b(0x5ee)](_0x20fb03,_0x20fb03);const _0x52e1ce=$gameTemp['getLastPluginCommandInterpreter'](),_0x12c990=BattleManager[_0x4c1a4b(0x30f)],_0x1de162=VisuMZ[_0x4c1a4b(0x93a)](_0x20fb03[_0x4c1a4b(0xb78)]),_0x4140a9=_0x20fb03[_0x4c1a4b(0x1b5)],_0x1e8e8a=BattleManager[_0x4c1a4b(0x8f1)];if(!_0x52e1ce||!_0x12c990)return;const _0x5b3ef2=_0x12c990[_0x4c1a4b(0x88c)]();$gameTemp[_0x4c1a4b(0x3cf)](_0x1de162,_0x5b3ef2,_0x4140a9),_0x20fb03['WaitForAnimation']&&_0x52e1ce['setWaitMode']('battleAnimation');}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x60d),_0x66944f=>{const _0x491e18=_0x46ffcc;if(!SceneManager[_0x491e18(0xaf2)]())return;VisuMZ[_0x491e18(0x5ee)](_0x66944f,_0x66944f);const _0x418126=_0x5daeb3[_0x491e18(0x3ca)](_0x66944f[_0x491e18(0x9e5)]);if(_0x418126<=0x0)return;const _0x35d0bf=$gameTemp[_0x491e18(0x13a)](),_0x5daeb3=BattleManager[_0x491e18(0x30f)],_0x180fb1=VisuMZ[_0x491e18(0x93a)](_0x66944f[_0x491e18(0xb78)]),_0x171cd2=_0x66944f[_0x491e18(0x1b5)],_0x26f19d=BattleManager[_0x491e18(0x8f1)];if(!_0x35d0bf||!_0x5daeb3)return;$gameTemp['requestAnimation'](_0x180fb1,_0x418126,_0x171cd2),_0x66944f[_0x491e18(0x8aa)]&&_0x35d0bf[_0x491e18(0x54b)](_0x491e18(0x998));}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0xa65),_0x5573c3=>{const _0x2efdaa=_0x46ffcc;if(!SceneManager[_0x2efdaa(0xaf2)]())return;VisuMZ[_0x2efdaa(0x5ee)](_0x5573c3,_0x5573c3);const _0x196136=$gameTemp[_0x2efdaa(0x13a)](),_0x33dd90=VisuMZ['CreateActionSequenceTargets'](_0x5573c3[_0x2efdaa(0xb78)]),_0x17ac05=_0x5573c3[_0x2efdaa(0x986)];let _0x2305cc=0x0;switch(_0x17ac05['toUpperCase']()[_0x2efdaa(0xafd)]()){case'!':case _0x2efdaa(0x8d1):_0x2305cc=0x1;break;case'?':case _0x2efdaa(0x866):_0x2305cc=0x2;break;case _0x2efdaa(0x8c1):case'NOTE':case _0x2efdaa(0x136):case _0x2efdaa(0xa13):case _0x2efdaa(0x62d):_0x2305cc=0x3;break;case'HEART':case'LOVE':_0x2305cc=0x4;break;case _0x2efdaa(0x147):case _0x2efdaa(0x390):_0x2305cc=0x5;break;case'SWEAT':_0x2305cc=0x6;break;case _0x2efdaa(0xa1a):case _0x2efdaa(0xda):case _0x2efdaa(0xc6):_0x2305cc=0x7;break;case'SILENCE':case _0x2efdaa(0xb9e):_0x2305cc=0x8;break;case _0x2efdaa(0xa5f):case'BULB':case _0x2efdaa(0xa3e):case _0x2efdaa(0x97a):case _0x2efdaa(0x254):_0x2305cc=0x9;break;case'Z':case'ZZ':case _0x2efdaa(0x6bb):case _0x2efdaa(0xb94):_0x2305cc=0xa;break;case _0x2efdaa(0x485):_0x2305cc=0xb;break;case _0x2efdaa(0x4a0):_0x2305cc=0xc;break;case _0x2efdaa(0xb1e):_0x2305cc=0xd;break;case _0x2efdaa(0xa72):_0x2305cc=0xe;break;case _0x2efdaa(0x8e6):_0x2305cc=0xf;break;}for(const _0x4e1176 of _0x33dd90){if(!_0x4e1176)continue;$gameTemp[_0x2efdaa(0xa9e)](_0x4e1176,_0x2305cc);}_0x5573c3['WaitComplete']&&_0x196136&&(_0x196136[_0x2efdaa(0xa3f)](0x1),_0x196136[_0x2efdaa(0x54b)](_0x2efdaa(0x600)));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6b7),_0x6dff04=>{const _0xc1e8e9=_0x46ffcc;if(!SceneManager[_0xc1e8e9(0xaf2)]())return;if(!Imported[_0xc1e8e9(0x2af)])return;VisuMZ['ConvertParams'](_0x6dff04,_0x6dff04);const _0x56e83c=$gameTemp[_0xc1e8e9(0x13a)](),_0x259fd1=VisuMZ[_0xc1e8e9(0x93a)](_0x6dff04[_0xc1e8e9(0xb78)]),_0x1170ba=_0x6dff04[_0xc1e8e9(0x44a)];for(const _0x751d22 of _0x259fd1){if(!_0x751d22)continue;$gameTemp[_0xc1e8e9(0xa9e)](_0x751d22,[_0x1170ba]);}_0x6dff04['WaitComplete']&&_0x56e83c&&(_0x56e83c[_0xc1e8e9(0xa3f)](0x1),_0x56e83c[_0xc1e8e9(0x54b)](_0xc1e8e9(0x600)));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_BalloonIconRange',_0x15a463=>{const _0x24d045=_0x46ffcc;if(!SceneManager[_0x24d045(0xaf2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x24d045(0x5ee)](_0x15a463,_0x15a463);const _0x16b843=$gameTemp['getLastPluginCommandInterpreter'](),_0x327b9f=VisuMZ['CreateActionSequenceTargets'](_0x15a463['Targets']),_0xb655e1=Math['min'](Number(_0x15a463[_0x24d045(0x281)]||0x0),Number(_0x15a463[_0x24d045(0x474)]||0x0)),_0x5f3b07=Math[_0x24d045(0x148)](Number(_0x15a463['startIcon']||0x0),Number(_0x15a463['endIcon']||0x0)),_0x228110=[];for(let _0x5b0880=_0xb655e1;_0x5b0880<=_0x5f3b07;_0x5b0880++){_0x228110[_0x24d045(0x40a)](_0x5b0880);}for(const _0xbf5c71 of _0x327b9f){if(!_0xbf5c71)continue;$gameTemp['requestBattleBalloon'](_0xbf5c71,_0x228110);}_0x15a463[_0x24d045(0x288)]&&_0x16b843&&(_0x16b843['wait'](0x1),_0x16b843[_0x24d045(0x54b)]('battleBalloon'));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_BalloonIconSpecific',_0x3a4313=>{const _0x1c1043=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c1043(0x2af)])return;VisuMZ[_0x1c1043(0x5ee)](_0x3a4313,_0x3a4313);const _0x1f3168=$gameTemp[_0x1c1043(0x13a)](),_0x4500de=VisuMZ[_0x1c1043(0x93a)](_0x3a4313[_0x1c1043(0xb78)]),_0x4154c5=_0x3a4313[_0x1c1043(0x589)];for(const _0x3fdb57 of _0x4500de){if(!_0x3fdb57)continue;$gameTemp[_0x1c1043(0xa9e)](_0x3fdb57,_0x4154c5);}_0x3a4313[_0x1c1043(0x288)]&&_0x1f3168&&(_0x1f3168['wait'](0x1),_0x1f3168[_0x1c1043(0x54b)](_0x1c1043(0x600)));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_CastAnimation',_0x25e64b=>{const _0x4ef621=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4ef621(0x5ee)](_0x25e64b,_0x25e64b);const _0x5c5d16=$gameTemp[_0x4ef621(0x13a)](),_0x217baf=BattleManager[_0x4ef621(0x9e4)],_0x29b912=_0x25e64b[_0x4ef621(0x1b5)],_0x20a234=VisuMZ['CreateActionSequenceTargets'](_0x25e64b[_0x4ef621(0xb78)]);if(!_0x5c5d16||!_0x217baf)return;if(!_0x217baf[_0x4ef621(0x50d)]())return;for(const _0x4a35f0 of _0x20a234){if(!_0x4a35f0)continue;_0x4a35f0[_0x4ef621(0x7b3)](_0x217baf,_0x29b912);}if(_0x25e64b[_0x4ef621(0x8aa)])_0x5c5d16['setWaitMode']('battleAnimation');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_ChangeBattlePortrait',_0x197abb=>{const _0x2aeff5=_0x46ffcc;VisuMZ[_0x2aeff5(0x5ee)](_0x197abb,_0x197abb);const _0x1ffe72=$gameTemp[_0x2aeff5(0x13a)](),_0x3a6e56=VisuMZ[_0x2aeff5(0x93a)](_0x197abb[_0x2aeff5(0xb78)]),_0xbb957b=_0x197abb[_0x2aeff5(0x3cc)];if(!_0xbb957b)return;for(const _0x7c0bac of _0x3a6e56){if(!_0x7c0bac)continue;if(!_0x7c0bac['isActor']())continue;_0x7c0bac[_0x2aeff5(0x323)](_0xbb957b);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x1c6800=>{const _0x1136d7=_0x46ffcc;VisuMZ['ConvertParams'](_0x1c6800,_0x1c6800);const _0x320f1a=_0x1c6800[_0x1136d7(0x69e)](),_0x22b517=$gameActors[_0x1136d7(0xb81)](_0x320f1a)||null;if(!_0x22b517){console[_0x1136d7(0x637)](_0x1136d7(0x1c9));return;}const _0x494075=_0x1c6800['FilenameJS']();_0x22b517['setBattlePortrait'](_0x494075);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_GuardAnimation',_0x284b31=>{const _0x339699=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x339699(0x5ee)](_0x284b31,_0x284b31);const _0x288383=$gameTemp[_0x339699(0x13a)](),_0x459552=BattleManager['_subject'],_0xec85ac=VisuMZ[_0x339699(0x93a)](_0x284b31[_0x339699(0xb78)]),_0x387993=_0x284b31['Mirror'];if(!_0x288383||!_0x459552)return;const _0x408e18=$dataSkilles[_0x459552[_0x339699(0x9c5)]()],_0x2da56b=_0x408e18[_0x339699(0x586)];$gameTemp[_0x339699(0x3cf)](_0xec85ac,_0x2da56b,_0x387993),_0x284b31[_0x339699(0x8aa)]&&_0x288383[_0x339699(0x54b)](_0x339699(0x998));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x76b),_0x3a2523=>{const _0x4cfaff=_0x46ffcc;if(!SceneManager[_0x4cfaff(0xaf2)]())return;VisuMZ[_0x4cfaff(0x5ee)](_0x3a2523,_0x3a2523);const _0x4cc248=$gameTemp[_0x4cfaff(0x13a)](),_0x12b11d=VisuMZ[_0x4cfaff(0x93a)](_0x3a2523[_0x4cfaff(0xb78)]),_0x5bd25e=Number(_0x3a2523[_0x4cfaff(0x800)]||0x1),_0x5dfe4c=$dataItems[_0x5bd25e],_0x146e14=_0x3a2523[_0x4cfaff(0x1b5)];if(!_0x4cc248)return;if(!_0x5dfe4c)return;let _0x1ea26e=_0x5dfe4c['animationId'];$gameTemp[_0x4cfaff(0x3cf)](_0x12b11d,_0x1ea26e,_0x146e14),_0x3a2523[_0x4cfaff(0x8aa)]&&_0x4cc248[_0x4cfaff(0x54b)](_0x4cfaff(0x998));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6c2),_0x4653f0=>{const _0x5f0b02=_0x46ffcc;if(!SceneManager[_0x5f0b02(0x5e4)])return;if(!SceneManager['_scene'][_0x5f0b02(0x787)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x5f0b02(0x5ee)](_0x4653f0,_0x4653f0);const _0x56860c=$gameTemp[_0x5f0b02(0x13a)](),_0x1c78c7=Math['round'](_0x4653f0['pointX']),_0x2d1c17=Math[_0x5f0b02(0x6da)](_0x4653f0[_0x5f0b02(0x129)]);$gameTemp['requestPointAnimation'](_0x1c78c7,_0x2d1c17,_0x4653f0[_0x5f0b02(0x53e)],_0x4653f0[_0x5f0b02(0x1b5)],_0x4653f0[_0x5f0b02(0x8a0)]),_0x4653f0[_0x5f0b02(0x288)]&&_0x56860c&&(SceneManager[_0x5f0b02(0x5e4)][_0x5f0b02(0x787)][_0x5f0b02(0x2d2)](),_0x56860c[_0x5f0b02(0x54b)](_0x5f0b02(0x998)));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xbe9),_0xfcc5e=>{const _0xe0deaf=_0x46ffcc;if(!SceneManager[_0xe0deaf(0xaf2)]())return;VisuMZ[_0xe0deaf(0x5ee)](_0xfcc5e,_0xfcc5e);const _0xaef2b3=$gameTemp['getLastPluginCommandInterpreter'](),_0x4380e6=VisuMZ[_0xe0deaf(0x93a)](_0xfcc5e[_0xe0deaf(0xb78)]),_0x44d3df=_0xfcc5e[_0xe0deaf(0x53e)],_0x17758d=_0xfcc5e[_0xe0deaf(0x1b5)];if(!_0xaef2b3)return;$gameTemp[_0xe0deaf(0x3cf)](_0x4380e6,_0x44d3df,_0x17758d);if(_0xfcc5e[_0xe0deaf(0x8aa)])_0xaef2b3['setWaitMode'](_0xe0deaf(0x998));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xba2),_0x483e8c=>{const _0x252bde=_0x46ffcc;if(!SceneManager[_0x252bde(0xaf2)]())return;VisuMZ[_0x252bde(0x5ee)](_0x483e8c,_0x483e8c);const _0x567df5=$gameTemp[_0x252bde(0x13a)](),_0xf6569d=VisuMZ[_0x252bde(0x93a)](_0x483e8c['Targets']),_0x22eecf=Number(_0x483e8c['AnimationID'])||0x1,_0x253499=_0x483e8c[_0x252bde(0x1b5)];if(!_0x567df5)return;$gameTemp[_0x252bde(0x3cf)](_0xf6569d,_0x22eecf,_0x253499);if(_0x483e8c[_0x252bde(0x8aa)])_0x567df5[_0x252bde(0x54b)](_0x252bde(0x998));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Animation_SkillAnimation',_0x11fde9=>{const _0x182b43=_0x46ffcc;if(!SceneManager[_0x182b43(0xaf2)]())return;VisuMZ[_0x182b43(0x5ee)](_0x11fde9,_0x11fde9);const _0x26fac2=$gameTemp['getLastPluginCommandInterpreter'](),_0x284e33=VisuMZ[_0x182b43(0x93a)](_0x11fde9['Targets']),_0x2af929=Number(_0x11fde9[_0x182b43(0x748)]||0x1),_0x347e70=$dataSkills[_0x2af929],_0x5c48a9=_0x11fde9[_0x182b43(0x1b5)];if(!_0x26fac2)return;if(!_0x347e70)return;let _0x51d112=_0x347e70[_0x182b43(0x586)];$gameTemp[_0x182b43(0x3cf)](_0x284e33,_0x51d112,_0x5c48a9),_0x11fde9[_0x182b43(0x8aa)]&&_0x26fac2['setWaitMode'](_0x182b43(0x998));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x90d),_0x1630ae=>{const _0x2b0a16=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;const _0x5e3c6e=$gameTemp[_0x2b0a16(0x13a)]();if(!_0x5e3c6e)return;_0x5e3c6e[_0x2b0a16(0x54b)](_0x2b0a16(0x998));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_BattleLog_AddText',_0x109d7f=>{const _0x490b36=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x490b36(0x5ee)](_0x109d7f,_0x109d7f);const _0x5dc8d4=BattleManager[_0x490b36(0x8f1)],_0x4f727a=_0x109d7f[_0x490b36(0x392)]&&Imported[_0x490b36(0x293)];_0x5dc8d4[_0x490b36(0xb70)](_0x109d7f[_0x490b36(0x871)]),_0x4f727a&&Imported[_0x490b36(0x293)]&&$gameSystem[_0x490b36(0x6b8)](_0x109d7f[_0x490b36(0x871)]||'',_0x109d7f[_0x490b36(0xa7b)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb88),_0x4be53e=>{const _0x217bd8=_0x46ffcc;if(!SceneManager[_0x217bd8(0xaf2)]())return;const _0x52657b=BattleManager[_0x217bd8(0x8f1)];_0x52657b['clear']();}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x9c9),_0x14c917=>{const _0x5b0479=_0x46ffcc;if(!SceneManager[_0x5b0479(0xaf2)]())return;const _0x2b1d78=$gameTemp[_0x5b0479(0x13a)](),_0xa65dd8=BattleManager[_0x5b0479(0x9e4)],_0xd0b80e=BattleManager[_0x5b0479(0x30f)],_0x39dba1=BattleManager['_logWindow'];if(!_0x2b1d78||!_0xa65dd8||!_0xd0b80e)return;if(!_0xa65dd8[_0x5b0479(0x50d)]())return;_0x39dba1[_0x5b0479(0x375)](_0xd0b80e,_0xa65dd8[_0x5b0479(0x50d)]()),_0x2b1d78['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x9b0),_0x345bb2=>{const _0x4613a1=_0x46ffcc;if(!SceneManager[_0x4613a1(0xaf2)]())return;const _0x540e9f=BattleManager[_0x4613a1(0x8f1)];_0x540e9f[_0x4613a1(0x62e)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x297),_0xdbb31f=>{const _0x55f413=_0x46ffcc;if(!SceneManager[_0x55f413(0xaf2)]())return;const _0x5e6b68=BattleManager[_0x55f413(0x8f1)];_0x5e6b68[_0x55f413(0x5bf)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x480),_0x5d4fd1=>{const _0xe33d03=_0x46ffcc;if(!SceneManager[_0xe33d03(0xaf2)]())return;const _0x4ebce4=BattleManager['_logWindow'];_0x4ebce4[_0xe33d03(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_BattleLog_UI',_0x373eb9=>{const _0xb351c9=_0x46ffcc;if(!SceneManager[_0xb351c9(0xaf2)]())return;VisuMZ[_0xb351c9(0x5ee)](_0x373eb9,_0x373eb9),SceneManager[_0xb351c9(0x5e4)][_0xb351c9(0xa63)](_0x373eb9[_0xb351c9(0x988)]);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x2f5),_0x40dff8=>{const _0x5b6c73=_0x46ffcc;if(!SceneManager[_0x5b6c73(0xaf2)]())return;const _0x21f19f=$gameTemp[_0x5b6c73(0x13a)]();_0x21f19f['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xa59),_0x1d8506=>{const _0x4ca92d=_0x46ffcc;if(!SceneManager[_0x4ca92d(0xaf2)]())return;const _0x1cb369=$gameTemp[_0x4ca92d(0x13a)](),_0x3d4c2c=BattleManager[_0x4ca92d(0x8f1)];_0x3d4c2c[_0x4ca92d(0x28e)](),_0x1cb369[_0x4ca92d(0x54b)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Camera_Clamp',_0xdca673=>{const _0x2f40b7=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2f40b7(0x5ee)](_0xdca673,_0xdca673);const _0x599676=$gameScreen[_0x2f40b7(0x666)]();_0x599676['cameraClamp']=_0xdca673[_0x2f40b7(0x3f6)];}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x5ad),_0x402d8d=>{const _0x52adc1=_0x46ffcc;if(!SceneManager[_0x52adc1(0xaf2)]())return;if(!Imported[_0x52adc1(0x1f8)])return;VisuMZ[_0x52adc1(0x5ee)](_0x402d8d,_0x402d8d);const _0x57c5f5=$gameTemp[_0x52adc1(0x13a)](),_0x4032f7=_0x402d8d[_0x52adc1(0x6d2)];$gameScreen[_0x52adc1(0x8ef)](_0x402d8d[_0x52adc1(0xb75)],_0x402d8d[_0x52adc1(0x5ed)],_0x402d8d[_0x52adc1(0xb58)],_0x402d8d[_0x52adc1(0xff)]);if(_0x4032f7)_0x57c5f5[_0x52adc1(0x54b)](_0x52adc1(0x4cf));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xa76),_0x5a7cc6=>{const _0xf1e44f=_0x46ffcc;if(!SceneManager[_0xf1e44f(0xaf2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xf1e44f(0x5ee)](_0x5a7cc6,_0x5a7cc6);const _0x45baa=$gameTemp['getLastPluginCommandInterpreter'](),_0xfea567=VisuMZ[_0xf1e44f(0x93a)](_0x5a7cc6[_0xf1e44f(0xb78)]),_0x48ffe9=_0x5a7cc6[_0xf1e44f(0x6d2)];$gameScreen[_0xf1e44f(0x821)](_0xfea567,_0x5a7cc6[_0xf1e44f(0xb58)],_0x5a7cc6[_0xf1e44f(0xff)]);if(_0x48ffe9)_0x45baa[_0xf1e44f(0x54b)](_0xf1e44f(0x4cf));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Camera_Offset',_0x567d69=>{const _0xeb4459=_0x46ffcc;if(!SceneManager[_0xeb4459(0xaf2)]())return;if(!Imported[_0xeb4459(0x1f8)])return;VisuMZ['ConvertParams'](_0x567d69,_0x567d69);const _0x96f6eb=$gameTemp[_0xeb4459(0x13a)](),_0x533d6b=_0x567d69['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0x567d69['OffsetX'],_0x567d69['OffsetY'],_0x567d69[_0xeb4459(0xb58)],_0x567d69['EasingType']);if(_0x533d6b)_0x96f6eb[_0xeb4459(0x54b)](_0xeb4459(0x4cf));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x661),_0x25d793=>{const _0x3bb41c=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3bb41c(0x1f8)])return;VisuMZ['ConvertParams'](_0x25d793,_0x25d793);const _0x2e1d7b=$gameTemp[_0x3bb41c(0x13a)](),_0x110b2c=_0x25d793['ResetFocus'],_0x7f53bc=_0x25d793['ResetOffset'],_0x2990ff=_0x25d793[_0x3bb41c(0x6d2)];if(_0x110b2c){const _0x3a2e74=Math[_0x3bb41c(0x6da)](Graphics['width']/0x2),_0x4c5fc2=Math['round'](Graphics[_0x3bb41c(0x212)]/0x2);$gameScreen['setBattleCameraPoint'](_0x3a2e74,_0x4c5fc2,_0x25d793['Duration'],_0x25d793[_0x3bb41c(0xff)]);}_0x7f53bc&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x25d793[_0x3bb41c(0xb58)],_0x25d793[_0x3bb41c(0xff)]);if(_0x2990ff)_0x2e1d7b[_0x3bb41c(0x54b)]('battleCamera');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x450),_0x37fd83=>{const _0x5283da=_0x46ffcc;if(!SceneManager[_0x5283da(0xaf2)]())return;if(!Imported[_0x5283da(0x1f8)])return;const _0x437018=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x437018)return;_0x437018['setWaitMode'](_0x5283da(0x4cf));}),VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x970)]=function(_0x5234ab){const _0x162949=_0x46ffcc;_0x5234ab[_0x162949(0xb07)]='';const _0x58805d=VisuMZ[_0x162949(0x14f)]['CreateCutinSettings'](_0x5234ab),_0x497990=VisuMZ[_0x162949(0x93a)](_0x5234ab[_0x162949(0xb78)])[0x0]||null;return _0x497990&&(_0x58805d[_0x162949(0xb07)]=_0x497990[_0x162949(0xb5d)](),_0x58805d[_0x162949(0x1b6)]=_0x497990[_0x162949(0xbe4)](),_0x58805d['portraitHue']=_0x497990[_0x162949(0x7b5)](),_0x58805d[_0x162949(0xee)]=_0x497990['visualCutinPortraitType'](),_0x497990[_0x162949(0x656)]()&&(_0x497990['flipVisualCutinHorz']()&&(_0x58805d[_0x162949(0x1f4)]=!_0x58805d[_0x162949(0x1f4)]),_0x497990[_0x162949(0x40e)]()&&(_0x58805d[_0x162949(0xade)]=!_0x58805d[_0x162949(0xade)]),_0x58805d[_0x162949(0xee)]===_0x162949(0xa66)&&(_0x58805d[_0x162949(0x1f4)]=!_0x58805d['portraitFlipHorz']),_0x5234ab['ExtraSettings'][_0x162949(0x5e6)]&&(_0x58805d[_0x162949(0x592)]*=-0x1),_0x5234ab[_0x162949(0xb6b)][_0x162949(0x4ab)]&&(_0x58805d['parallaxScrollY']*=-0x1),_0x58805d[_0x162949(0x7d3)]+=_0x5234ab['ExtraSettings']['parallaxHueEnemyModifier']??0x0)),_0x58805d;},PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Cutin_AddVisualCutinEffect',_0x2e63e8=>{const _0x458753=_0x46ffcc;if(!SceneManager[_0x458753(0xaf2)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x458753(0x5ee)](_0x2e63e8,_0x2e63e8);const _0x27821d=VisuMZ[_0x458753(0x354)][_0x458753(0x970)](_0x2e63e8);SceneManager['_scene'][_0x458753(0x5a4)](_0x27821d);const _0xb4f753=$gameTemp['getLastPluginCommandInterpreter']();_0xb4f753&&_0x2e63e8[_0x458753(0x906)]&&_0xb4f753[_0x458753(0x54b)](_0x458753(0x492));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x54c),_0x20d6ec=>{const _0x328f3a=_0x46ffcc;if(!SceneManager[_0x328f3a(0xaf2)]())return;if(!Imported[_0x328f3a(0x12c)])return;VisuMZ['ConvertParams'](_0x20d6ec,_0x20d6ec),SceneManager['_scene'][_0x328f3a(0x6b2)]();const _0x4904f9=$gameTemp[_0x328f3a(0x13a)]();_0x4904f9&&_0x20d6ec[_0x328f3a(0x73f)]&&_0x4904f9[_0x328f3a(0x54b)](_0x328f3a(0x188));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x67a),_0x25ce3d=>{const _0x18a9ec=_0x46ffcc;if(!SceneManager[_0x18a9ec(0xaf2)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x18a9ec(0x5ee)](_0x25ce3d,_0x25ce3d);const _0x31d9ce=_0x25ce3d[_0x18a9ec(0x56c)]['toLowerCase']()[_0x18a9ec(0xafd)]();SceneManager[_0x18a9ec(0x5e4)][_0x18a9ec(0x122)](_0x31d9ce);const _0x2e45a5=$gameTemp[_0x18a9ec(0x13a)]();_0x2e45a5&&_0x25ce3d[_0x18a9ec(0x73f)]&&_0x2e45a5[_0x18a9ec(0x54b)](_0x18a9ec(0x188));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6f1),_0x26432a=>{const _0x28be46=_0x46ffcc;if(!SceneManager[_0x28be46(0xaf2)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x18bc54=$gameTemp[_0x28be46(0x13a)]();_0x18bc54[_0x28be46(0x54b)]('cutinEnter');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x923),_0x393f0e=>{const _0x10ea76=_0x46ffcc;if(!SceneManager[_0x10ea76(0xaf2)]())return;if(!Imported[_0x10ea76(0x12c)])return;const _0x2a83ca=$gameTemp['getLastPluginCommandInterpreter']();_0x2a83ca[_0x10ea76(0x54b)](_0x10ea76(0x188));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x286),_0x481a6a=>{const _0x3aa8b2=_0x46ffcc;if(!SceneManager[_0x3aa8b2(0xaf2)]())return;if(!Imported[_0x3aa8b2(0x38d)])return;VisuMZ[_0x3aa8b2(0x5ee)](_0x481a6a,_0x481a6a);const _0x373fde=VisuMZ[_0x3aa8b2(0x93a)](_0x481a6a[_0x3aa8b2(0xb78)]),_0x2ad255=_0x481a6a[_0x3aa8b2(0x56a)]['toLowerCase']()['trim']();for(const _0x170118 of _0x373fde){if(!_0x170118)continue;_0x170118['requestDragonbonesAnimation'](_0x2ad255);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x290),_0x387a6a=>{const _0x50f0c1=_0x46ffcc;if(!SceneManager[_0x50f0c1(0xaf2)]())return;if(!Imported[_0x50f0c1(0x38d)])return;VisuMZ[_0x50f0c1(0x5ee)](_0x387a6a,_0x387a6a);const _0x212d91=VisuMZ[_0x50f0c1(0x93a)](_0x387a6a[_0x50f0c1(0xb78)]),_0x36da03=_0x387a6a[_0x50f0c1(0x9dd)];for(const _0x28a22e of _0x212d91){if(!_0x28a22e)continue;_0x28a22e[_0x50f0c1(0x711)]()[_0x50f0c1(0x7e9)]=_0x36da03;}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x247),_0x1d3f0e=>{const _0x523f97=_0x46ffcc;if(!SceneManager[_0x523f97(0xaf2)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x523f97(0x5ee)](_0x1d3f0e,_0x1d3f0e);const _0x8e20d4=BattleManager[_0x523f97(0x9e4)],_0x2ec5da=_0x1d3f0e[_0x523f97(0x29b)];if(!_0x8e20d4)return;_0x8e20d4[_0x523f97(0x743)]=_0x2ec5da;}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xaea),_0x199af3=>{const _0x2ed4ef=_0x46ffcc;if(!SceneManager[_0x2ed4ef(0xaf2)]())return;if(!Imported[_0x2ed4ef(0x5cd)])return;const _0x18c1d3=BattleManager[_0x2ed4ef(0x9e4)];if(!_0x18c1d3)return;_0x18c1d3[_0x2ed4ef(0x591)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x658),_0x58fd17=>{const _0x7c0ff7=_0x46ffcc;if(!SceneManager[_0x7c0ff7(0xaf2)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x7c0ff7(0x5ee)](_0x58fd17,_0x58fd17);const _0x237aa1=BattleManager[_0x7c0ff7(0x9e4)],_0x553dd5=_0x58fd17['Elements'];if(!_0x237aa1)return;_0x237aa1[_0x7c0ff7(0x6bf)]=_0x553dd5;}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x27d),_0x15bba9=>{const _0x3a6c3d=_0x46ffcc;if(!SceneManager[_0x3a6c3d(0xaf2)]())return;if(!Imported[_0x3a6c3d(0x5cd)])return;const _0x5a2734=BattleManager[_0x3a6c3d(0x9e4)];if(!_0x5a2734)return;_0x5a2734[_0x3a6c3d(0x320)]=!![];}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x8d2),_0x43f8b6=>{const _0x1895a4=_0x46ffcc;VisuMZ[_0x1895a4(0xb72)][_0x1895a4(0x8d2)](_0x43f8b6);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Grid_AddPassiveStatesToNode',_0x4d4484=>{const _0x3c12ce=_0x46ffcc;VisuMZ[_0x3c12ce(0xb72)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x4d4484);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x88f),_0x2d76c3=>{const _0x3b9987=_0x46ffcc;VisuMZ[_0x3b9987(0xb72)]['ActSeq_Grid_AddTriggerToNode'](_0x2d76c3);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x547),_0x315871=>{const _0x475e70=_0x46ffcc;VisuMZ[_0x475e70(0xb72)][_0x475e70(0x88f)](_0x315871);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x757),_0x5aa77e=>{const _0x3b3498=_0x46ffcc;VisuMZ[_0x3b3498(0xb72)][_0x3b3498(0x757)](_0x5aa77e);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Grid_AnimationJsAtNode',_0x3c3f53=>{const _0x23c11e=_0x46ffcc;VisuMZ[_0x23c11e(0xb72)][_0x23c11e(0x525)](_0x3c3f53);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x3b5),_0x21b21d=>{const _0x159dcd=_0x46ffcc;VisuMZ[_0x159dcd(0xb72)][_0x159dcd(0x3b5)](_0x21b21d);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x1b377d=>{const _0x290bdb=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x290bdb(0x366)](_0x1b377d);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xba3),_0x2a12da=>{const _0x149938=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x149938(0xba3)](_0x2a12da);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb2b),_0x5d6434=>{const _0x3a4b24=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x3a4b24(0xb2b)](_0x5d6434);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x71e),_0x563663=>{const _0x1eb26b=_0x46ffcc;VisuMZ[_0x1eb26b(0xb72)]['ActSeq_Grid_PushFromTargetNode'](_0x563663);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x24b),_0x5e241c=>{const _0x5cb07f=_0x46ffcc;VisuMZ[_0x5cb07f(0xb72)][_0x5cb07f(0x24b)](_0x5e241c);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Grid_RemoveTriggerFromNode',_0x4f9e88=>{const _0x225480=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x225480(0x47c)](_0x4f9e88);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Grid_TeleportToNode',_0x237d4d=>{const _0x3cb066=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x3cb066(0x1bb)](_0x237d4d);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0xf1),_0x24b8ba=>{const _0x2808d7=_0x46ffcc;VisuMZ['BattleGridSystem'][_0x2808d7(0xf1)](_0x24b8ba);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x5eb),_0x5c2238=>{const _0x79e518=_0x46ffcc;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x79e518(0x5ee)](_0x5c2238,_0x5c2238);const _0x56d58a=VisuMZ[_0x79e518(0x93a)](_0x5c2238[_0x79e518(0xb78)]);for(const _0x1272d7 of _0x56d58a){if(!_0x1272d7)continue;_0x1272d7['removeHorrorEffect'](_0x79e518(0x5cb)),_0x1272d7[_0x79e518(0x7a7)]('glitch'),_0x1272d7['removeHorrorEffect']('tv'),_0x1272d7['clearHorrorEffects']();}$gamePlayer[_0x79e518(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Horror_GlitchCreate',_0x46691e=>{const _0x1740f5=_0x46ffcc;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1740f5(0xaf2)]())return;VisuMZ[_0x1740f5(0x5ee)](_0x46691e,_0x46691e);const _0x450de3=VisuMZ[_0x1740f5(0x93a)](_0x46691e['Targets']),_0x3c8934=_0x1740f5(0x7cf);_0x46691e[_0x1740f5(0x173)]=Math[_0x1740f5(0xa14)](_0x46691e['slices']/0x2),_0x46691e[_0x1740f5(0xb12)]=_0x46691e[_0x1740f5(0x15a)],_0x46691e[_0x1740f5(0x5be)]=!![];for(const _0x48415f of _0x450de3){if(!_0x48415f)continue;_0x48415f[_0x1740f5(0x4da)](_0x3c8934,_0x46691e);}$gamePlayer[_0x1740f5(0xb53)]();}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x186),_0x5573d1=>{const _0x17d97f=_0x46ffcc;if(!Imported[_0x17d97f(0xa15)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17d97f(0x5ee)](_0x5573d1,_0x5573d1);const _0x3bcdac=VisuMZ[_0x17d97f(0x93a)](_0x5573d1[_0x17d97f(0xb78)]);for(const _0x46395c of _0x3bcdac){if(!_0x46395c)continue;_0x46395c[_0x17d97f(0x7a7)](_0x17d97f(0x7cf));}$gamePlayer[_0x17d97f(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x544),_0x59855e=>{const _0xf2fb53=_0x46ffcc;if(!Imported[_0xf2fb53(0xa15)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xf2fb53(0x5ee)](_0x59855e,_0x59855e);const _0x345fde=VisuMZ[_0xf2fb53(0x93a)](_0x59855e[_0xf2fb53(0xb78)]),_0x4f35ab=_0xf2fb53(0x5cb);for(const _0x33ec07 of _0x345fde){if(!_0x33ec07)continue;_0x33ec07['setHorrorEffectSettings'](_0x4f35ab,_0x59855e);}$gamePlayer['refresh']();}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Horror_NoiseRemove',_0xff522d=>{const _0x16f4bc=_0x46ffcc;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x16f4bc(0xaf2)]())return;VisuMZ[_0x16f4bc(0x5ee)](_0xff522d,_0xff522d);const _0x679add=VisuMZ[_0x16f4bc(0x93a)](_0xff522d[_0x16f4bc(0xb78)]);for(const _0x2f9a85 of _0x679add){if(!_0x2f9a85)continue;_0x2f9a85[_0x16f4bc(0x7a7)](_0x16f4bc(0x5cb));}$gamePlayer[_0x16f4bc(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x569),_0x56ab17=>{const _0x1cec9e=_0x46ffcc;if(!Imported[_0x1cec9e(0xa15)])return;if(!SceneManager[_0x1cec9e(0xaf2)]())return;VisuMZ[_0x1cec9e(0x5ee)](_0x56ab17,_0x56ab17);const _0x374d11=VisuMZ[_0x1cec9e(0x93a)](_0x56ab17[_0x1cec9e(0xb78)]),_0x22bd00='tv';for(const _0x1f72df of _0x374d11){if(!_0x1f72df)continue;_0x1f72df[_0x1cec9e(0x4da)](_0x22bd00,_0x56ab17);}$gamePlayer[_0x1cec9e(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Horror_TVRemove',_0x199822=>{const _0xbaa690=_0x46ffcc;if(!Imported[_0xbaa690(0xa15)])return;if(!SceneManager[_0xbaa690(0xaf2)]())return;VisuMZ[_0xbaa690(0x5ee)](_0x199822,_0x199822);const _0x1354d4=VisuMZ[_0xbaa690(0x93a)](_0x199822['Targets']);for(const _0x26d1dd of _0x1354d4){if(!_0x26d1dd)continue;_0x26d1dd['removeHorrorEffect']('tv');}$gamePlayer[_0xbaa690(0xb53)]();}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Impact_BlueRedInvert',_0x1793cc=>{const _0x1e2783=_0x46ffcc;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3b5763=SceneManager['_scene'][_0x1e2783(0x787)];if(!_0x3b5763)return;if(VisuMZ[_0x1e2783(0x469)]['version']<=1.04){alert(_0x1e2783(0xa32)),SceneManager[_0x1e2783(0x462)]();return;}VisuMZ[_0x1e2783(0x5ee)](_0x1793cc,_0x1793cc);const _0x1ffa0b=_0x1793cc[_0x1e2783(0xba9)];_0x3b5763[_0x1e2783(0x32f)](_0x1ffa0b);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x9ff),_0x46ca96=>{const _0x342bc2=_0x46ffcc;if(!SceneManager[_0x342bc2(0xaf2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2f7027=SceneManager[_0x342bc2(0x5e4)][_0x342bc2(0x787)];if(!_0x2f7027)return;VisuMZ[_0x342bc2(0x5ee)](_0x46ca96,_0x46ca96);const _0x3795af=_0x46ca96[_0x342bc2(0x975)]||0x1,_0x212421=_0x46ca96['Duration']||0x1,_0x595a3=_0x46ca96[_0x342bc2(0xff)]||_0x342bc2(0x8e3);_0x2f7027[_0x342bc2(0x97e)](_0x3795af,_0x212421,_0x595a3);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x244),_0x143437=>{const _0x9dd80a=_0x46ffcc;if(!Imported[_0x9dd80a(0x98c)])return;const _0x109673=SceneManager[_0x9dd80a(0x5e4)][_0x9dd80a(0x787)];if(!_0x109673)return;if(VisuMZ[_0x9dd80a(0x469)][_0x9dd80a(0x613)]<=1.04){alert(_0x9dd80a(0xa32)),SceneManager[_0x9dd80a(0x462)]();return;}VisuMZ['ConvertParams'](_0x143437,_0x143437);const _0x35f95f=_0x143437[_0x9dd80a(0xba9)];_0x109673[_0x9dd80a(0x1d7)](_0x35f95f);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xbb1),_0x2e9264=>{const _0x51efd5=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5825bb=SceneManager[_0x51efd5(0x5e4)][_0x51efd5(0x787)];if(!_0x5825bb)return;VisuMZ[_0x51efd5(0x5ee)](_0x2e9264,_0x2e9264);const _0x531d92=Number(_0x2e9264[_0x51efd5(0xbf0)])||0x0,_0x3aa2d1=Number(_0x2e9264[_0x51efd5(0x370)]),_0x4bfe18=_0x2e9264[_0x51efd5(0xb58)]||0x1,_0x30a7eb=_0x2e9264['EasingType']||_0x51efd5(0x8e3);_0x5825bb[_0x51efd5(0x489)](_0x531d92,_0x3aa2d1,_0x4bfe18,_0x30a7eb);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x1db),_0x1cf828=>{const _0x41681f=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x41681f(0x98c)])return;const _0x16fe97=SceneManager[_0x41681f(0x5e4)][_0x41681f(0x787)];if(!_0x16fe97)return;VisuMZ[_0x41681f(0x5ee)](_0x1cf828,_0x1cf828);const _0xf4f491=Number(_0x1cf828['Angle'])||0x0,_0x4f4710=Number(_0x1cf828['Rate']),_0x5d3bc4=_0x1cf828[_0x41681f(0xb58)]||0x1,_0x46a41b=_0x1cf828['EasingType']||_0x41681f(0x8e3),_0x5b6496=VisuMZ[_0x41681f(0x93a)](_0x1cf828[_0x41681f(0xb78)]);for(const _0x190aff of _0x5b6496){if(!_0x190aff)continue;if(!_0x190aff[_0x41681f(0x430)]())continue;_0x190aff['battler']()[_0x41681f(0x489)](_0xf4f491,_0x4f4710,_0x5d3bc4,_0x46a41b);}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x753),_0xee86da=>{const _0x29c7c0=_0x46ffcc;if(!SceneManager[_0x29c7c0(0xaf2)]())return;if(!Imported[_0x29c7c0(0x98c)])return;VisuMZ[_0x29c7c0(0x5ee)](_0xee86da,_0xee86da);const _0x17ee08={'delay':_0xee86da[_0x29c7c0(0x621)],'duration':_0xee86da[_0x29c7c0(0x8ed)],'hue':_0xee86da['hue'],'opacityStart':_0xee86da[_0x29c7c0(0x151)],'tone':_0xee86da[_0x29c7c0(0x6ca)],'visible':!![]},_0x27e603=VisuMZ[_0x29c7c0(0x93a)](_0xee86da[_0x29c7c0(0xb78)]);for(const _0x54af1a of _0x27e603){if(!_0x54af1a)continue;_0x54af1a[_0x29c7c0(0x5e3)](_0x17ee08);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x137),_0x285781=>{const _0x49b5f3=_0x46ffcc;if(!SceneManager[_0x49b5f3(0xaf2)]())return;if(!Imported[_0x49b5f3(0x98c)])return;VisuMZ[_0x49b5f3(0x5ee)](_0x285781,_0x285781);const _0x30fcc8=VisuMZ[_0x49b5f3(0x93a)](_0x285781[_0x49b5f3(0xb78)]);for(const _0x4f2ad0 of _0x30fcc8){if(!_0x4f2ad0)continue;_0x4f2ad0[_0x49b5f3(0x2b2)]();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x771),_0x25d3c9=>{const _0x3d2fd0=_0x46ffcc;if(!Imported[_0x3d2fd0(0x98c)])return;const _0x154735=SceneManager['_scene']['_spriteset'];if(!_0x154735)return;if(VisuMZ[_0x3d2fd0(0x469)][_0x3d2fd0(0x613)]<=1.04){alert(_0x3d2fd0(0xa32)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x25d3c9,_0x25d3c9);const _0x1d57c5=_0x25d3c9[_0x3d2fd0(0xba9)];_0x154735[_0x3d2fd0(0x5dd)](_0x1d57c5);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Impact_Oversaturate',_0x14dfa5=>{const _0x121f61=_0x46ffcc;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2c23cd=SceneManager[_0x121f61(0x5e4)][_0x121f61(0x787)];if(!_0x2c23cd)return;if(VisuMZ[_0x121f61(0x469)][_0x121f61(0x613)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x121f61(0x462)]();return;}VisuMZ[_0x121f61(0x5ee)](_0x14dfa5,_0x14dfa5);const _0x3c7e3f=_0x14dfa5['Enable'];_0x2c23cd[_0x121f61(0x962)](_0x3c7e3f);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Impact_ShockwavePoint',_0x3e0758=>{const _0x4d8d75=_0x46ffcc;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x536f9c=SceneManager[_0x4d8d75(0x5e4)][_0x4d8d75(0x787)];if(!_0x536f9c)return;VisuMZ[_0x4d8d75(0x5ee)](_0x3e0758,_0x3e0758);const _0x389cac=_0x3e0758['X']||0x0,_0x14c399=_0x3e0758['Y']||0x0,_0x3677db=_0x3e0758[_0x4d8d75(0xa98)]||0x0,_0x4c483d=_0x3e0758[_0x4d8d75(0x1a0)]||0x0,_0x376f8d=_0x3e0758[_0x4d8d75(0xb58)]||0x1;_0x536f9c[_0x4d8d75(0x8cd)](_0x389cac,_0x14c399,_0x3677db,_0x4c483d,_0x376f8d);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x5d3),_0x138e37=>{const _0xf9ea8d=_0x46ffcc;if(!SceneManager[_0xf9ea8d(0xaf2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x28a7a2=SceneManager['_scene'][_0xf9ea8d(0x787)];if(!_0x28a7a2)return;VisuMZ[_0xf9ea8d(0x5ee)](_0x138e37,_0x138e37);const _0x10c128=VisuMZ[_0xf9ea8d(0x93a)](_0x138e37[_0xf9ea8d(0xb78)]),_0x1b8993=_0x138e37['TargetLocation'],_0x57783a=_0x138e37[_0xf9ea8d(0x815)]||0x0,_0x1d083c=_0x138e37[_0xf9ea8d(0x5d2)]||0x0,_0x2b7626=_0x138e37[_0xf9ea8d(0xa98)]||0x0,_0x4de6e0=_0x138e37['Wave']||0x0,_0x2eb6fd=_0x138e37[_0xf9ea8d(0xb58)]||0x1;for(const _0x4e51e7 of _0x10c128){if(!_0x4e51e7)continue;if(!_0x4e51e7[_0xf9ea8d(0x430)]())continue;const _0x3084ca=_0x4e51e7[_0xf9ea8d(0x430)]();let _0x414758=_0x3084ca['_baseX'],_0x3eea48=_0x3084ca[_0xf9ea8d(0x97f)];_0x414758+=(Graphics[_0xf9ea8d(0x448)]-Graphics[_0xf9ea8d(0xab3)])/0x2,_0x3eea48+=(Graphics['height']-Graphics[_0xf9ea8d(0x78c)])/0x2;if(_0x1b8993[_0xf9ea8d(0xe0)](/front/i))_0x414758+=(_0x4e51e7[_0xf9ea8d(0x656)]()?0x1:-0x1)*_0x3084ca[_0xf9ea8d(0x54d)]()/0x2;else _0x1b8993[_0xf9ea8d(0xe0)](/back/i)&&(_0x414758+=(_0x4e51e7[_0xf9ea8d(0x656)]()?-0x1:0x1)*_0x3084ca[_0xf9ea8d(0x54d)]()/0x2);if(_0x1b8993[_0xf9ea8d(0xe0)](/head/i))_0x3eea48-=_0x3084ca['mainSpriteHeight']();else _0x1b8993[_0xf9ea8d(0xe0)](/center/i)&&(_0x3eea48-=_0x3084ca[_0xf9ea8d(0x8c2)]()/0x2);_0x414758+=_0x57783a,_0x3eea48+=_0x1d083c,_0x28a7a2['setupShockwaveImpactFilter'](_0x414758,_0x3eea48,_0x2b7626,_0x4de6e0,_0x2eb6fd);}}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x1ee),_0x35731c=>{const _0xa14c84=_0x46ffcc;if(!SceneManager[_0xa14c84(0xaf2)]())return;if(!Imported[_0xa14c84(0x98c)])return;const _0x262050=SceneManager[_0xa14c84(0x5e4)]['_spriteset'];if(!_0x262050)return;VisuMZ[_0xa14c84(0x5ee)](_0x35731c,_0x35731c);const _0x1d5dd5=VisuMZ[_0xa14c84(0x93a)](_0x35731c[_0xa14c84(0xb78)]),_0x3b704d=_0x35731c[_0xa14c84(0x1c5)],_0x3ccf96=_0x35731c[_0xa14c84(0x815)]||0x0,_0x37805f=_0x35731c['OffsetY']||0x0,_0x55ec8e=_0x35731c['Amp']||0x0,_0x4ed676=_0x35731c[_0xa14c84(0x1a0)]||0x0,_0x4ed45f=_0x35731c[_0xa14c84(0xb58)]||0x1,_0x22ba85=Math[_0xa14c84(0x4d8)](..._0x1d5dd5['map'](_0x4244b1=>_0x4244b1[_0xa14c84(0x430)]()[_0xa14c84(0x72f)]-_0x4244b1[_0xa14c84(0x430)]()[_0xa14c84(0x54d)]()/0x2)),_0x19932a=Math[_0xa14c84(0x148)](..._0x1d5dd5['map'](_0x32c379=>_0x32c379[_0xa14c84(0x430)]()[_0xa14c84(0x72f)]+_0x32c379['battler']()[_0xa14c84(0x54d)]()/0x2)),_0xedd4eb=Math[_0xa14c84(0x4d8)](..._0x1d5dd5[_0xa14c84(0x6cd)](_0x296119=>_0x296119[_0xa14c84(0x430)]()['_baseY']-_0x296119['battler']()[_0xa14c84(0x8c2)]())),_0x1b3bb8=Math[_0xa14c84(0x148)](..._0x1d5dd5[_0xa14c84(0x6cd)](_0x33cff1=>_0x33cff1[_0xa14c84(0x430)]()[_0xa14c84(0x97f)])),_0x2a2b5a=_0x1d5dd5[_0xa14c84(0x8ba)](_0xa6d347=>_0xa6d347[_0xa14c84(0x738)]())[_0xa14c84(0x9bf)],_0x318512=_0x1d5dd5[_0xa14c84(0x8ba)](_0x102e0c=>_0x102e0c['isEnemy']())[_0xa14c84(0x9bf)];let _0x319a87=0x0,_0x40c739=0x0;if(_0x3b704d[_0xa14c84(0xe0)](/front/i))_0x319a87=_0x2a2b5a>=_0x318512?_0x22ba85:_0x19932a;else{if(_0x3b704d[_0xa14c84(0xe0)](/middle/i))_0x319a87=(_0x22ba85+_0x19932a)/0x2,melee=-0x1;else _0x3b704d['match'](/back/i)&&(_0x319a87=_0x2a2b5a>=_0x318512?_0x19932a:_0x22ba85);}if(_0x3b704d['match'](/head/i))_0x40c739=_0xedd4eb;else{if(_0x3b704d['match'](/center/i))_0x40c739=(_0xedd4eb+_0x1b3bb8)/0x2;else _0x3b704d[_0xa14c84(0xe0)](/base/i)&&(_0x40c739=_0x1b3bb8);}_0x319a87+=(Graphics[_0xa14c84(0x448)]-Graphics[_0xa14c84(0xab3)])/0x2,_0x40c739+=(Graphics['height']-Graphics[_0xa14c84(0x78c)])/0x2,_0x319a87+=_0x3ccf96,_0x40c739+=_0x37805f,_0x262050[_0xa14c84(0x8cd)](_0x319a87,_0x40c739,_0x55ec8e,_0x4ed676,_0x4ed45f);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x6e5),_0x17271f=>{const _0x5ae4a0=_0x46ffcc;if(!Imported[_0x5ae4a0(0x98c)])return;const _0x289402=SceneManager[_0x5ae4a0(0x5e4)]['_spriteset'];if(!_0x289402)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x5ae4a0(0x462)]();return;}VisuMZ[_0x5ae4a0(0x5ee)](_0x17271f,_0x17271f);const _0x219223=$gameTemp[_0x5ae4a0(0x13a)](),_0x476f62=Math[_0x5ae4a0(0x148)](0.01,_0x17271f[_0x5ae4a0(0x1c7)]);$gameTemp['setBattleImpactTimeScale'](_0x476f62,_0x219223);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x1f9),_0x3aae10=>{const _0x344cbc=_0x46ffcc;if(!Imported[_0x344cbc(0x98c)])return;const _0x42fc08=SceneManager[_0x344cbc(0x5e4)][_0x344cbc(0x787)];if(!_0x42fc08)return;if(VisuMZ[_0x344cbc(0x469)][_0x344cbc(0x613)]<=1.04){alert(_0x344cbc(0xa32)),SceneManager['exit']();return;}VisuMZ[_0x344cbc(0x5ee)](_0x3aae10,_0x3aae10);const _0x783fb9=$gameTemp['getLastPluginCommandInterpreter'](),_0x33e33e=_0x3aae10['ms']||0x1;VisuMZ[_0x344cbc(0x469)][_0x344cbc(0xb4b)](_0x33e33e,_0x783fb9);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x268),_0x4bf3a4=>{const _0x1c7530=_0x46ffcc;if(!Imported[_0x1c7530(0x98c)])return;const _0x3b13bf=SceneManager[_0x1c7530(0x5e4)][_0x1c7530(0x787)];if(!_0x3b13bf)return;VisuMZ[_0x1c7530(0x5ee)](_0x4bf3a4,_0x4bf3a4);const _0x2003f8=_0x4bf3a4['X']||0x0,_0x4711e3=_0x4bf3a4['Y']||0x0,_0x2f17ce=_0x4bf3a4['Strength']||0x0,_0x5986e0=_0x4bf3a4[_0x1c7530(0x4c8)]||0x0,_0x1c1536=_0x4bf3a4[_0x1c7530(0xb58)]||0x1,_0x3f6c4f=_0x4bf3a4[_0x1c7530(0xff)]||_0x1c7530(0x8e3);_0x3b13bf[_0x1c7530(0x9a3)](_0x2f17ce,_0x2003f8,_0x4711e3,_0x5986e0,_0x1c1536,_0x3f6c4f);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb14),_0x5f45df=>{const _0x32782d=_0x46ffcc;if(!Imported[_0x32782d(0x98c)])return;const _0x13a52b=SceneManager['_scene']['_spriteset'];if(!_0x13a52b)return;VisuMZ[_0x32782d(0x5ee)](_0x5f45df,_0x5f45df);const _0xe86c42=VisuMZ[_0x32782d(0x93a)](_0x5f45df['Targets']),_0x66992a=_0x5f45df[_0x32782d(0x1c5)],_0xf0a545=_0x5f45df[_0x32782d(0x815)]||0x0,_0x3cae4f=_0x5f45df[_0x32782d(0x5d2)]||0x0,_0x58657e=_0x5f45df[_0x32782d(0x301)]||0x0,_0xbbcd09=_0x5f45df[_0x32782d(0x4c8)]||0x0,_0x1222bb=_0x5f45df[_0x32782d(0xb58)]||0x1,_0x69b5ca=_0x5f45df[_0x32782d(0xff)]||_0x32782d(0x8e3),_0x120056=Math[_0x32782d(0x4d8)](..._0xe86c42['map'](_0x20236d=>_0x20236d[_0x32782d(0x430)]()[_0x32782d(0x72f)]-_0x20236d[_0x32782d(0x430)]()[_0x32782d(0x54d)]()/0x2)),_0x30b8d4=Math[_0x32782d(0x148)](..._0xe86c42[_0x32782d(0x6cd)](_0x3f8da9=>_0x3f8da9[_0x32782d(0x430)]()['_baseX']+_0x3f8da9[_0x32782d(0x430)]()[_0x32782d(0x54d)]()/0x2)),_0x17cc99=Math[_0x32782d(0x4d8)](..._0xe86c42[_0x32782d(0x6cd)](_0x511929=>_0x511929[_0x32782d(0x430)]()[_0x32782d(0x97f)]-_0x511929[_0x32782d(0x430)]()[_0x32782d(0x8c2)]())),_0x179360=Math[_0x32782d(0x148)](..._0xe86c42[_0x32782d(0x6cd)](_0x5d1417=>_0x5d1417[_0x32782d(0x430)]()['_baseY'])),_0x5a193d=_0xe86c42['filter'](_0x420fa4=>_0x420fa4[_0x32782d(0x738)]())[_0x32782d(0x9bf)],_0x19c4ab=_0xe86c42[_0x32782d(0x8ba)](_0x1f1ea8=>_0x1f1ea8['isEnemy']())['length'];let _0x3df8fd=0x0,_0x435ef0=0x0;if(_0x66992a[_0x32782d(0xe0)](/front/i))_0x3df8fd=_0x5a193d>=_0x19c4ab?_0x120056:_0x30b8d4;else{if(_0x66992a['match'](/middle/i))_0x3df8fd=(_0x120056+_0x30b8d4)/0x2,melee=-0x1;else _0x66992a[_0x32782d(0xe0)](/back/i)&&(_0x3df8fd=_0x5a193d>=_0x19c4ab?_0x30b8d4:_0x120056);}if(_0x66992a[_0x32782d(0xe0)](/head/i))_0x435ef0=_0x17cc99;else{if(_0x66992a[_0x32782d(0xe0)](/center/i))_0x435ef0=(_0x17cc99+_0x179360)/0x2;else _0x66992a[_0x32782d(0xe0)](/base/i)&&(_0x435ef0=_0x179360);}_0x3df8fd+=(Graphics[_0x32782d(0x448)]-Graphics[_0x32782d(0xab3)])/0x2,_0x435ef0+=(Graphics[_0x32782d(0x212)]-Graphics[_0x32782d(0x78c)])/0x2,_0x3df8fd+=_0xf0a545,_0x435ef0+=_0x3cae4f,_0x13a52b[_0x32782d(0x9a3)](_0x58657e,_0x3df8fd,_0x435ef0,_0xbbcd09,_0x1222bb,_0x69b5ca);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6c5),_0x3e35f7=>{const _0x4d3d26=_0x46ffcc;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1a7c7f=SceneManager[_0x4d3d26(0x5e4)][_0x4d3d26(0x787)];if(!_0x1a7c7f)return;if(VisuMZ[_0x4d3d26(0x469)][_0x4d3d26(0x613)]<=1.05){alert(_0x4d3d26(0xa32)),SceneManager[_0x4d3d26(0x462)]();return;}VisuMZ['ConvertParams'](_0x3e35f7,_0x3e35f7);const _0x56e5e8=VisuMZ[_0x4d3d26(0x93a)](_0x3e35f7['Targets']),_0x1cf874={'filename':_0x3e35f7[_0x4d3d26(0x3cc)],'horzCells':_0x3e35f7[_0x4d3d26(0x779)]||0x1,'vertCells':_0x3e35f7['vertCells']||0x1,'frameDelay':_0x3e35f7[_0x4d3d26(0x410)]||0x1,'smooth':_0x3e35f7[_0x4d3d26(0xbc3)]||![],'anchorX':_0x3e35f7[_0x4d3d26(0x15d)]||0x0,'anchorY':_0x3e35f7[_0x4d3d26(0x561)]||0x0,'offsetX':_0x3e35f7['offsetX']||0x0,'offsetY':_0x3e35f7[_0x4d3d26(0x113)]||0x0};for(const _0x44c45b of _0x56e5e8){if(!_0x44c45b)continue;if(!_0x44c45b[_0x4d3d26(0x430)]())continue;_0x44c45b[_0x4d3d26(0x430)]()[_0x4d3d26(0x638)](_0x1cf874);}const _0x4fa93d=$gameTemp[_0x4d3d26(0x13a)]();_0x4fa93d&&_0x4fa93d[_0x4d3d26(0x54b)](_0x4d3d26(0x47d));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Inject_AnimationEnd',_0x310868=>{const _0x884b54=_0x46ffcc;if(!Imported[_0x884b54(0x98c)])return;const _0xe8d416=SceneManager[_0x884b54(0x5e4)]['_spriteset'];if(!_0xe8d416)return;if(VisuMZ[_0x884b54(0x469)][_0x884b54(0x613)]<=1.05){alert(_0x884b54(0xa32)),SceneManager[_0x884b54(0x462)]();return;}VisuMZ[_0x884b54(0x5ee)](_0x310868,_0x310868);const _0x3a252f=VisuMZ[_0x884b54(0x93a)](_0x310868['Targets']);for(const _0x4a5371 of _0x3a252f){if(!_0x4a5371)continue;if(!_0x4a5371[_0x884b54(0x430)]())continue;_0x4a5371[_0x884b54(0x430)]()['stopInjectAnimation']();}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x471),_0x5e273c=>{const _0xf98bb7=_0x46ffcc;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4e255f=SceneManager['_scene'][_0xf98bb7(0x787)];if(!_0x4e255f)return;if(VisuMZ[_0xf98bb7(0x469)][_0xf98bb7(0x613)]<=1.05){alert(_0xf98bb7(0xa32)),SceneManager[_0xf98bb7(0x462)]();return;}VisuMZ[_0xf98bb7(0x5ee)](_0x5e273c,_0x5e273c);const _0x4b6224=VisuMZ[_0xf98bb7(0x93a)](_0x5e273c['Targets']),_0x16df61=_0x5e273c[_0xf98bb7(0x765)];for(const _0x22519f of _0x4b6224){if(!_0x22519f)continue;if(!_0x22519f[_0xf98bb7(0x430)]())continue;_0x22519f[_0xf98bb7(0x430)]()[_0xf98bb7(0x7e5)](_0x16df61);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x1f0),_0x416dbf=>{const _0x35e844=_0x46ffcc;if(!SceneManager[_0x35e844(0xaf2)]())return;const _0x4d3131=$gameTemp[_0x35e844(0x13a)]();if(!_0x4d3131)return;_0x4d3131[_0x35e844(0x54b)](_0x35e844(0x300));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_ActionEffect',_0x3bada5=>{const _0x374c0a=_0x46ffcc;if(!SceneManager[_0x374c0a(0xaf2)]())return;VisuMZ[_0x374c0a(0x5ee)](_0x3bada5,_0x3bada5);const _0x3cb6e6=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a251f=BattleManager[_0x374c0a(0x9e4)],_0x49467e=BattleManager['_subject'],_0x34969a=BattleManager['_logWindow'];if(!_0x3cb6e6||!_0x1a251f||!_0x49467e)return;if(!_0x1a251f[_0x374c0a(0x50d)]())return;const _0x534196=VisuMZ[_0x374c0a(0x93a)](_0x3bada5['Targets']);for(const _0x52ccb3 of _0x534196){if(!_0x52ccb3)continue;_0x34969a[_0x374c0a(0x40a)](_0x374c0a(0x261),_0x49467e,_0x52ccb3);}_0x3cb6e6[_0x374c0a(0x54b)](_0x374c0a(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x363),_0x596a17=>{const _0x25688f=_0x46ffcc;if(!SceneManager[_0x25688f(0xaf2)]())return;if(!Imported[_0x25688f(0x35d)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0xb2e),_0x4129c6=>{const _0x4f3d74=_0x46ffcc;if(!SceneManager[_0x4f3d74(0xaf2)]())return;VisuMZ[_0x4f3d74(0x5ee)](_0x4129c6,_0x4129c6);const _0x221196=['MAXHP',_0x4f3d74(0x582),_0x4f3d74(0x4c2),'DEF',_0x4f3d74(0x4fb),_0x4f3d74(0x23f),_0x4f3d74(0x42b),_0x4f3d74(0x85b)],_0x4e799e=_0x4129c6[_0x4f3d74(0x672)],_0x58946b=_0x4129c6['Debuffs'],_0x861311=_0x4129c6['Turns'],_0x4b8123=VisuMZ[_0x4f3d74(0x93a)](_0x4129c6[_0x4f3d74(0xb78)]);for(const _0x50a871 of _0x4b8123){if(!_0x50a871)continue;for(const _0x2d53ff of _0x4e799e){const _0x3427e9=_0x221196['indexOf'](_0x2d53ff[_0x4f3d74(0x7b1)]()[_0x4f3d74(0xafd)]());_0x3427e9>=0x0&&_0x3427e9<=0x7&&_0x50a871[_0x4f3d74(0xab4)](_0x3427e9,_0x861311);}for(const _0x24b217 of _0x58946b){const _0x46d8ac=_0x221196[_0x4f3d74(0xb8c)](_0x24b217[_0x4f3d74(0x7b1)]()['trim']());_0x46d8ac>=0x0&&_0x46d8ac<=0x7&&_0x50a871[_0x4f3d74(0x8c6)](_0x46d8ac,_0x861311);}}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_AddState',_0x1f3fce=>{const _0x20e0c6=_0x46ffcc;if(!SceneManager[_0x20e0c6(0xaf2)]())return;VisuMZ[_0x20e0c6(0x5ee)](_0x1f3fce,_0x1f3fce);const _0x4ea795=_0x1f3fce[_0x20e0c6(0x9f6)],_0x2e97f7=VisuMZ[_0x20e0c6(0x93a)](_0x1f3fce[_0x20e0c6(0xb78)]);for(const _0x22b88a of _0x2e97f7){if(!_0x22b88a)continue;for(const _0x18f5a4 of _0x4ea795){_0x22b88a[_0x20e0c6(0x704)](_0x18f5a4);}}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x367),_0x4ab87e=>{const _0x832cdd=_0x46ffcc;if(!SceneManager[_0x832cdd(0xaf2)]())return;VisuMZ[_0x832cdd(0x5ee)](_0x4ab87e,_0x4ab87e);const _0x48ad37=BattleManager[_0x832cdd(0x9e4)],_0x2a0342={'arPenRate':_0x4ab87e['ArPenRate'],'arPenFlat':_0x4ab87e[_0x832cdd(0x841)],'arRedRate':_0x4ab87e[_0x832cdd(0x811)],'arRedFlat':_0x4ab87e[_0x832cdd(0x62b)]};_0x48ad37[_0x832cdd(0x8b9)]=_0x2a0342;}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x6c7),_0x503928=>{const _0x26fe6b=_0x46ffcc;if(!SceneManager[_0x26fe6b(0xaf2)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x26fe6b(0x5ee)](_0x503928,_0x503928);const _0x3e5535=VisuMZ['CreateActionSequenceTargets'](_0x503928[_0x26fe6b(0xb78)]),_0x152144=_0x503928[_0x26fe6b(0x1b8)]||0x1;for(const _0x208fa2 of _0x3e5535){if(!_0x208fa2)continue;if(!_0x208fa2[_0x26fe6b(0x656)]())continue;_0x208fa2[_0x26fe6b(0x8cc)](_0x152144);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_AtbGauge',_0x2fc28c=>{const _0x15a198=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x15a198(0x9e2)])return;if(!BattleManager[_0x15a198(0x11f)]())return;VisuMZ[_0x15a198(0x5ee)](_0x2fc28c,_0x2fc28c);const _0x4c2ae8=VisuMZ[_0x15a198(0x93a)](_0x2fc28c[_0x15a198(0xb78)]),_0x415846=_0x2fc28c[_0x15a198(0xa5c)],_0x575e3a=_0x2fc28c['ChargeRate'],_0x4f4c9d=_0x2fc28c[_0x15a198(0x564)];for(const _0x53654a of _0x4c2ae8){if(!_0x53654a)continue;if(_0x53654a['isAtbChargingState']())_0x53654a[_0x15a198(0x70c)](_0x415846);else{if(_0x53654a[_0x15a198(0x263)]()){_0x53654a['changeAtbCastTime'](_0x575e3a);if(_0x4f4c9d)_0x53654a[_0x15a198(0x21a)]();}}}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_BoostPointsChange',_0xc04326=>{const _0x2427bc=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x2427bc(0x5ee)](_0xc04326,_0xc04326);const _0xbcfb7d=VisuMZ[_0x2427bc(0x93a)](_0xc04326['Targets']),_0x4e758e=_0xc04326[_0x2427bc(0xa11)];for(const _0x5ca746 of _0xbcfb7d){if(!_0x5ca746)continue;_0x5ca746[_0x2427bc(0x514)](_0x4e758e);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x15f),_0x2ea48d=>{const _0x286d01=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x286d01(0x30f)])return;VisuMZ[_0x286d01(0x5ee)](_0x2ea48d,_0x2ea48d);const _0x4f716d=_0x2ea48d['VariableID'];$gameVariables[_0x286d01(0x7f0)](_0x4f716d,BattleManager['_subject'][_0x286d01(0xbf2)]());}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_BreakShieldChange',_0x41ccbc=>{const _0x3891a7=_0x46ffcc;if(!SceneManager[_0x3891a7(0xaf2)]())return;if(!Imported[_0x3891a7(0x5e7)])return;VisuMZ[_0x3891a7(0x5ee)](_0x41ccbc,_0x41ccbc);const _0xf8dada=VisuMZ[_0x3891a7(0x93a)](_0x41ccbc[_0x3891a7(0xb78)]),_0x3abf16=_0x41ccbc[_0x3891a7(0xa4c)];for(const _0x2631ef of _0xf8dada){if(!_0x2631ef)continue;if(_0x2631ef[_0x3891a7(0x142)]())continue;if(!_0x2631ef[_0x3891a7(0x94b)]())continue;_0x2631ef[_0x3891a7(0x85e)](_0x3abf16);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x874),_0x6847c0=>{const _0x327395=_0x46ffcc;if(!SceneManager[_0x327395(0xaf2)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x327395(0x5ee)](_0x6847c0,_0x6847c0);const _0xefd88e=VisuMZ[_0x327395(0x93a)](_0x6847c0[_0x327395(0xb78)]);for(const _0x29fed7 of _0xefd88e){if(!_0x29fed7)continue;if(_0x29fed7[_0x327395(0x142)]())continue;if(!_0x29fed7[_0x327395(0x94b)]())continue;_0x29fed7[_0x327395(0x284)]();}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x82f),_0x314e04=>{const _0x1c8720=_0x46ffcc;if(!SceneManager[_0x1c8720(0xaf2)]())return;if(!Imported[_0x1c8720(0xbab)])return;if(!BattleManager[_0x1c8720(0x755)]())return;VisuMZ[_0x1c8720(0x5ee)](_0x314e04,_0x314e04);const _0x5b08f2=VisuMZ[_0x1c8720(0x93a)](_0x314e04[_0x1c8720(0xb78)]),_0x550754=_0x314e04['BravePoints'];for(const _0x2ec6da of _0x5b08f2){if(!_0x2ec6da)continue;_0x2ec6da[_0x1c8720(0x545)](_0x550754);}}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x895),_0x5f3a93=>{const _0x19da3d=_0x46ffcc;if(!SceneManager[_0x19da3d(0xaf2)]())return;VisuMZ[_0x19da3d(0x5ee)](_0x5f3a93,_0x5f3a93);const _0x310ff1=$gameTemp[_0x19da3d(0x13a)](),_0x30b2a7=BattleManager['_action'],_0x4a8ef0=BattleManager[_0x19da3d(0x30f)];if(!_0x310ff1||!_0x30b2a7||!_0x4a8ef0)return;if(!_0x30b2a7[_0x19da3d(0x50d)]())return;const _0x4d6911=VisuMZ['CreateActionSequenceTargets'](_0x5f3a93[_0x19da3d(0xb78)]);for(const _0x1b7e85 of _0x4d6911){if(!_0x1b7e85)continue;_0x5f3a93[_0x19da3d(0xb0e)]&&(_0x1b7e85['removeImmortal'](),_0x1b7e85[_0x19da3d(0x704)](_0x1b7e85[_0x19da3d(0xdc)]())),_0x1b7e85['isDeathStateAffected']()&&_0x1b7e85[_0x19da3d(0x791)]();}_0x310ff1['setWaitMode'](_0x19da3d(0x1cc));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x230),_0x145ffd=>{const _0x201c0d=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x201c0d(0x899)])return;if(!BattleManager[_0x201c0d(0x754)]())return;VisuMZ[_0x201c0d(0x5ee)](_0x145ffd,_0x145ffd);const _0x3bb183=VisuMZ['CreateActionSequenceTargets'](_0x145ffd[_0x201c0d(0xb78)]),_0x244a8b=_0x145ffd[_0x201c0d(0xb08)];for(const _0x1f1017 of _0x3bb183){if(!_0x1f1017)continue;_0x1f1017[_0x201c0d(0x7c6)](_0x244a8b);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x900),_0x8cc710=>{const _0x44b4fb=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x44b4fb(0x899)])return;if(!BattleManager[_0x44b4fb(0x754)]())return;VisuMZ['ConvertParams'](_0x8cc710,_0x8cc710);const _0x335545=VisuMZ[_0x44b4fb(0x93a)](_0x8cc710[_0x44b4fb(0xb78)]),_0x40de5f=_0x8cc710['ChargeRate'],_0xb81f=_0x8cc710[_0x44b4fb(0xa5c)];for(const _0x501f8d of _0x335545){if(!_0x501f8d)continue;if(_0x501f8d[_0x44b4fb(0x693)]===_0x44b4fb(0x9d7))_0x501f8d[_0x44b4fb(0x758)](_0x40de5f);else _0x501f8d[_0x44b4fb(0x693)]===_0x44b4fb(0x225)&&_0x501f8d[_0x44b4fb(0xb24)](_0xb81f);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x488),_0x4fe13f=>{const _0xcad34c=_0x46ffcc;if(!SceneManager[_0xcad34c(0xaf2)]())return;VisuMZ[_0xcad34c(0x5ee)](_0x4fe13f,_0x4fe13f);const _0x3d8ea9=BattleManager[_0xcad34c(0x9e4)];if(!_0x3d8ea9)return;let _0x20fc66=_0x4fe13f['Formula'];_0x3d8ea9[_0xcad34c(0xbd9)](_0x20fc66);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_DamagePopup',_0x9fb5a9=>{const _0x4707dd=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4707dd(0x5ee)](_0x9fb5a9,_0x9fb5a9);const _0x13d25d=VisuMZ['CreateActionSequenceTargets'](_0x9fb5a9[_0x4707dd(0xb78)]);for(const _0x82c46 of _0x13d25d){if(!_0x82c46)continue;if(_0x82c46[_0x4707dd(0x5f1)]())_0x82c46[_0x4707dd(0x275)]();}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_DeathBreak',_0x24c5dc=>{const _0x497d79=_0x46ffcc;if(!SceneManager[_0x497d79(0xaf2)]())return;VisuMZ[_0x497d79(0x5ee)](_0x24c5dc,_0x24c5dc);const _0x1cd1d0=$gameTemp[_0x497d79(0x13a)](),_0x306473=BattleManager['_subject'],_0x16141e=_0x24c5dc[_0x497d79(0x937)];if(!_0x1cd1d0)return;if(!_0x306473)return;_0x306473&&_0x306473[_0x497d79(0xb76)]()&&_0x16141e['toUpperCase']()[_0x497d79(0xafd)]()!==_0x497d79(0xab2)&&_0x1cd1d0[_0x497d79(0x76c)]([_0x16141e]);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0xba5),_0x11229d=>{const _0x163be1=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x163be1(0x5ee)](_0x11229d,_0x11229d);const _0x5e9202=$gameTemp[_0x163be1(0x13a)](),_0x58876a=BattleManager[_0x163be1(0x8f1)];if(!_0x5e9202)return;const _0x34c7e3=VisuMZ[_0x163be1(0x93a)](_0x11229d[_0x163be1(0x269)]),_0x359139=VisuMZ[_0x163be1(0x93a)](_0x11229d['Targets']);for(const _0x33542a of _0x34c7e3){for(const _0x5d3b37 of _0x359139){if(!_0x5d3b37)continue;const _0x3f7c7f=$dataSkills[_0x33542a['attackSkillId']()];_0x58876a[_0x163be1(0x40a)](_0x163be1(0x68a),_0x33542a,_0x5d3b37,_0x3f7c7f);}}_0x5e9202['setWaitMode'](_0x163be1(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xba6),_0x23de8e=>{const _0x4e40ef=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x23de8e,_0x23de8e);const _0x328867=$gameTemp[_0x4e40ef(0x13a)](),_0x3b3c4b=BattleManager[_0x4e40ef(0x8f1)];if(!_0x328867)return;const _0x58458b=VisuMZ['CreateActionSequenceTargets'](_0x23de8e['Users']),_0x2cdcc3=VisuMZ[_0x4e40ef(0x93a)](_0x23de8e[_0x4e40ef(0xb78)]);for(const _0x73a83f of _0x58458b){for(const _0x5cffd of _0x2cdcc3){if(!_0x5cffd)continue;const _0x5af0b4=$dataSkills[_0x73a83f['guardSkillId']()];_0x3b3c4b[_0x4e40ef(0x40a)](_0x4e40ef(0x68a),_0x73a83f,_0x5cffd,_0x5af0b4);}}_0x328867['setWaitMode'](_0x4e40ef(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x7a0),_0x2deff1=>{const _0x1b8ff0=_0x46ffcc;if(!SceneManager[_0x1b8ff0(0xaf2)]())return;VisuMZ['ConvertParams'](_0x2deff1,_0x2deff1);const _0x248438=$gameTemp['getLastPluginCommandInterpreter'](),_0x32530a=BattleManager[_0x1b8ff0(0x8f1)],_0x581fc2=Number(_0x2deff1[_0x1b8ff0(0x800)]||0x1),_0xcac796=$dataItems[_0x581fc2];if(!_0x248438)return;if(!_0xcac796)return;const _0x4ae752=VisuMZ[_0x1b8ff0(0x93a)](_0x2deff1[_0x1b8ff0(0x269)]),_0x2a9043=VisuMZ['CreateActionSequenceTargets'](_0x2deff1['Targets']);for(const _0x3d3f4c of _0x4ae752){for(const _0x4d698a of _0x2a9043){if(!_0x4d698a)continue;_0x32530a['push'](_0x1b8ff0(0x68a),_0x3d3f4c,_0x4d698a,_0xcac796);}}_0x248438[_0x1b8ff0(0x54b)](_0x1b8ff0(0x2aa));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xa2b),_0x1e743b=>{const _0x287658=_0x46ffcc;if(!SceneManager[_0x287658(0xaf2)]())return;VisuMZ[_0x287658(0x5ee)](_0x1e743b,_0x1e743b);let _0x43971c=Number(_0x1e743b[_0x287658(0x748)]||0x0);if(_0x43971c<=0x0){const _0x94f250=BattleManager[_0x287658(0x9e4)];if(_0x94f250&&_0x94f250[_0x287658(0x444)]())_0x43971c=_0x94f250[_0x287658(0x50d)]()['id'];else return;}const _0xc116bd=$dataSkills[_0x43971c];if(!_0xc116bd)return;const _0x818ddf=VisuMZ['CreateActionSequenceTargets'](_0x1e743b[_0x287658(0x269)]);for(const _0x22b785 of _0x818ddf){_0x22b785[_0x287658(0x6ae)](_0xc116bd);}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x954),_0x529c28=>{const _0x886a00=_0x46ffcc;if(!SceneManager[_0x886a00(0xaf2)]())return;VisuMZ[_0x886a00(0x5ee)](_0x529c28,_0x529c28);const _0xc4ec77=$gameTemp[_0x886a00(0x13a)](),_0xe4299c=BattleManager[_0x886a00(0x8f1)],_0x37dded=Number(_0x529c28[_0x886a00(0x748)]||0x1),_0x12a1e4=$dataSkills[_0x37dded];if(!_0xc4ec77)return;if(!_0x12a1e4)return;const _0x5a389e=VisuMZ['CreateActionSequenceTargets'](_0x529c28[_0x886a00(0x269)]),_0x445b02=VisuMZ[_0x886a00(0x93a)](_0x529c28['Targets']);for(const _0x3f6fc2 of _0x5a389e){for(const _0x46261c of _0x445b02){if(!_0x46261c)continue;_0xe4299c[_0x886a00(0x40a)](_0x886a00(0x68a),_0x3f6fc2,_0x46261c,_0x12a1e4);}}_0xc4ec77['setWaitMode'](_0x886a00(0x2aa));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_EnemyEscape',_0x3d9cc3=>{const _0x2efae9=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3d9cc3,_0x3d9cc3);const _0x40beb8=VisuMZ[_0x2efae9(0x93a)](_0x3d9cc3[_0x2efae9(0xb78)]);for(const _0x4e7803 of _0x40beb8){if(!_0x4e7803)continue;if(!_0x4e7803[_0x2efae9(0x656)]())continue;_0x4e7803[_0x2efae9(0x4c9)]();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6df),_0x168ce9=>{const _0x5ef3a6=_0x46ffcc;if(!SceneManager[_0x5ef3a6(0xaf2)]())return;if(!Imported[_0x5ef3a6(0x2e8)])return;if(!BattleManager[_0x5ef3a6(0x63e)]())return;VisuMZ['ConvertParams'](_0x168ce9,_0x168ce9);const _0x5da9fa=_0x168ce9[_0x5ef3a6(0x8ab)];BattleManager[_0x5ef3a6(0x30f)]&&BattleManager[_0x5ef3a6(0x30f)][_0x5ef3a6(0xa71)]()['gainCurrentActionsETB'](_0x5da9fa);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x85f),_0x10f222=>{const _0x18413b=_0x46ffcc;if(!SceneManager[_0x18413b(0xaf2)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x18413b(0x5ee)](_0x10f222,_0x10f222);const _0x544378=_0x10f222[_0x18413b(0x8ab)];BattleManager[_0x18413b(0x30f)]&&BattleManager[_0x18413b(0x30f)]['friendsUnit']()[_0x18413b(0x682)](_0x544378);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb74),_0x331fb4=>{const _0x5c0bb9=_0x46ffcc;if(!SceneManager[_0x5c0bb9(0xaf2)]())return;VisuMZ[_0x5c0bb9(0x5ee)](_0x331fb4,_0x331fb4);const _0x156115=VisuMZ[_0x5c0bb9(0x93a)](_0x331fb4[_0x5c0bb9(0xb78)]),_0x2efe3b=_0x331fb4[_0x5c0bb9(0xb9d)],_0x2883dc=_0x331fb4[_0x5c0bb9(0x424)],_0x235be4=_0x331fb4['MP_Rate'],_0xf7174d=_0x331fb4[_0x5c0bb9(0x538)],_0x324cde=_0x331fb4[_0x5c0bb9(0x557)],_0x2e8216=_0x331fb4[_0x5c0bb9(0x63d)],_0x509a5c=_0x331fb4['ShowPopup'];for(const _0x4fc7e9 of _0x156115){if(!_0x4fc7e9)continue;const _0x12334c=_0x4fc7e9[_0x5c0bb9(0x615)](),_0x3dd96d=Math[_0x5c0bb9(0x6da)](_0x2efe3b*_0x4fc7e9['mhp']+_0x2883dc),_0x5a75d0=Math['round'](_0x235be4*_0x4fc7e9[_0x5c0bb9(0x6f0)]+_0xf7174d),_0x12af61=Math[_0x5c0bb9(0x6da)](_0x324cde*_0x4fc7e9[_0x5c0bb9(0x7a1)]()+_0x2e8216);if(_0x3dd96d!==0x0)_0x4fc7e9['gainHp'](_0x3dd96d);if(_0x5a75d0!==0x0)_0x4fc7e9['gainMp'](_0x5a75d0);if(_0x12af61!==0x0)_0x4fc7e9[_0x5c0bb9(0x14d)](_0x12af61);if(_0x509a5c)_0x4fc7e9[_0x5c0bb9(0x275)]();_0x12334c&&_0x4fc7e9[_0x5c0bb9(0xb76)]()&&_0x4fc7e9[_0x5c0bb9(0x791)]();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x80e),_0x569bb6=>{const _0x1c4f43=_0x46ffcc;if(!SceneManager[_0x1c4f43(0xaf2)]())return;VisuMZ[_0x1c4f43(0x5ee)](_0x569bb6,_0x569bb6);const _0x3b1e8d=VisuMZ[_0x1c4f43(0x93a)](_0x569bb6[_0x1c4f43(0xb78)]);for(const _0x38fc77 of _0x3b1e8d){if(!_0x38fc77)continue;_0x38fc77['setImmortal'](_0x569bb6[_0x1c4f43(0x2e7)]);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x2e2),_0x4eb9e2=>{const _0x25b8bf=_0x46ffcc;if(!SceneManager[_0x25b8bf(0xaf2)]())return;VisuMZ[_0x25b8bf(0x5ee)](_0x4eb9e2,_0x4eb9e2);const _0x3575f5=BattleManager[_0x25b8bf(0x9e4)],_0x44d251={'criticalHitRate':_0x4eb9e2[_0x25b8bf(0x91d)],'criticalHitFlat':_0x4eb9e2[_0x25b8bf(0xb2d)],'criticalDmgRate':_0x4eb9e2[_0x25b8bf(0x3c2)],'criticalDmgFlat':_0x4eb9e2[_0x25b8bf(0x3b1)],'damageRate':_0x4eb9e2[_0x25b8bf(0x76d)],'damageFlat':_0x4eb9e2['DamageFlat'],'hitRate':_0x4eb9e2[_0x25b8bf(0x879)],'hitFlat':_0x4eb9e2[_0x25b8bf(0x5ff)]};_0x3575f5[_0x25b8bf(0x8a3)]=_0x44d251;}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x537),_0x1d1105=>{const _0x5d0134=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d0134(0x5ee)](_0x1d1105,_0x1d1105);const _0x28836d=_0x1d1105[_0x5d0134(0x473)];SceneManager[_0x5d0134(0x5e4)]['playOnceParallelInterpreter'](_0x28836d);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x69c),_0x120ef6=>{const _0x2b2120=_0x46ffcc;if(!SceneManager[_0x2b2120(0xaf2)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x2b2120(0x5ee)](_0x120ef6,_0x120ef6);const _0x500f4d=VisuMZ[_0x2b2120(0x93a)](_0x120ef6[_0x2b2120(0xb78)]);for(const _0x31eec0 of _0x500f4d){if(!_0x31eec0)continue;let _0x523590=_0x120ef6['CurrentTurn'],_0x3ff2da=_0x120ef6['NextTurn'],_0x30d7a3=_0x120ef6['FollowTurn'];BattleManager[_0x2b2120(0x65f)][_0x2b2120(0x6a2)](_0x31eec0)?_0x523590+=_0x30d7a3:_0x3ff2da+=_0x30d7a3,BattleManager['turnOrderChangeOTB'](_0x31eec0,-_0x523590,![]),BattleManager[_0x2b2120(0x12f)](_0x31eec0,-_0x3ff2da,!![]);}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x852),_0x5ad652=>{const _0x365e8c=_0x46ffcc;if(!SceneManager[_0x365e8c(0xaf2)]())return;if(!Imported[_0x365e8c(0x178)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x365e8c(0x5ee)](_0x5ad652,_0x5ad652);const _0x7a2c88=BattleManager['_subject']['friendsUnit'](),_0x312371=_0x5ad652['Override'],_0x312e8e=_0x5ad652[_0x365e8c(0xa0a)]||'unchanged',_0x1f1c7d=_0x5ad652['alterType']||_0x365e8c(0x58b),_0x17034f=_0x5ad652[_0x365e8c(0x854)]||0x0,_0x32757c=_0x5ad652[_0x365e8c(0x4d1)]||0x0;(_0x7a2c88[_0x365e8c(0x4a5)]()||_0x312371)&&(_0x312371&&(_0x7a2c88['_ptbActionCost']=_0x7a2c88['_ptbActionCost']||{},_0x7a2c88['_ptbActionCost']['priority']=0x0),_0x7a2c88[_0x365e8c(0xaa2)](_0x312e8e,_0x1f1c7d,_0x17034f,_0x32757c));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_PtbConvert',_0x1c78d6=>{const _0x226584=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x1c78d6,_0x1c78d6);const _0x540dde=BattleManager[_0x226584(0x30f)][_0x226584(0xa71)]();let _0x30a6c7=Math[_0x226584(0x148)](_0x1c78d6['ConvertCount'],0x0),_0x2eb809=_0x540dde[_0x226584(0x73c)](),_0x4d50bb=_0x540dde[_0x226584(0x1aa)]();while(_0x30a6c7--){if(_0x2eb809<=0x0&&_0x4d50bb<=0x0)break;else _0x2eb809>0x0?(_0x2eb809--,_0x4d50bb++):_0x4d50bb--;}_0x540dde[_0x226584(0x291)](_0x2eb809),_0x540dde[_0x226584(0x8f4)](_0x4d50bb);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Mechanics_PtbFullHalfAction',_0x12ea6a=>{const _0xa2ab97=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xa2ab97(0x178)])return;if(!BattleManager[_0xa2ab97(0x7ca)]())return;VisuMZ[_0xa2ab97(0x5ee)](_0x12ea6a,_0x12ea6a);const _0x51f28a=BattleManager[_0xa2ab97(0x30f)][_0xa2ab97(0xa71)]();let _0x1f7bd2=_0x12ea6a[_0xa2ab97(0x5de)],_0x52101a=_0x12ea6a[_0xa2ab97(0x371)];_0x51f28a[_0xa2ab97(0x9c8)](_0x1f7bd2),_0x51f28a['gainHalfActionsPTB'](_0x52101a);}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x507),_0x2f315d=>{const _0x47f024=_0x46ffcc;if(!SceneManager[_0x47f024(0xaf2)]())return;VisuMZ[_0x47f024(0x5ee)](_0x2f315d,_0x2f315d);const _0x23d970=[_0x47f024(0x3c1),_0x47f024(0x582),_0x47f024(0x4c2),'DEF','MAT',_0x47f024(0x23f),'AGI',_0x47f024(0x85b)],_0x9ba2dd=_0x2f315d[_0x47f024(0x672)],_0xcf6342=_0x2f315d[_0x47f024(0x2e4)],_0x36db4b=VisuMZ[_0x47f024(0x93a)](_0x2f315d[_0x47f024(0xb78)]);for(const _0x1923f6 of _0x36db4b){if(!_0x1923f6)continue;for(const _0x3ef30a of _0x9ba2dd){const _0x5e7698=_0x23d970[_0x47f024(0xb8c)](_0x3ef30a[_0x47f024(0x7b1)]()[_0x47f024(0xafd)]());_0x5e7698>=0x0&&_0x5e7698<=0x7&&_0x1923f6[_0x47f024(0x2ca)](_0x5e7698)&&_0x1923f6[_0x47f024(0x979)](_0x5e7698);}for(const _0x5c8ab4 of _0xcf6342){const _0x207429=_0x23d970[_0x47f024(0xb8c)](_0x5c8ab4[_0x47f024(0x7b1)]()[_0x47f024(0xafd)]());_0x207429>=0x0&&_0x207429<=0x7&&_0x1923f6['isDebuffAffected'](_0x207429)&&_0x1923f6[_0x47f024(0x979)](_0x207429);}}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_RemoveState',_0x1aa0fe=>{const _0x272b33=_0x46ffcc;if(!SceneManager[_0x272b33(0xaf2)]())return;VisuMZ[_0x272b33(0x5ee)](_0x1aa0fe,_0x1aa0fe);const _0x16437d=_0x1aa0fe[_0x272b33(0x9f6)],_0x3e05f1=VisuMZ['CreateActionSequenceTargets'](_0x1aa0fe[_0x272b33(0xb78)]);for(const _0x3b39c1 of _0x3e05f1){if(!_0x3b39c1)continue;for(const _0x2746ce of _0x16437d){_0x3b39c1[_0x272b33(0x5cc)](_0x2746ce);}}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_StateTurnsChangeBy',_0x3271d1=>{const _0x3366f5=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3366f5(0x179)])return;VisuMZ[_0x3366f5(0x5ee)](_0x3271d1,_0x3271d1);const _0x2b49ff=VisuMZ[_0x3366f5(0x93a)](_0x3271d1[_0x3366f5(0xb78)]),_0x521840=Number(_0x3271d1[_0x3366f5(0x58f)]),_0xef34c7=Number(_0x3271d1[_0x3366f5(0x9f4)]),_0x3275f9=_0x3271d1[_0x3366f5(0x6b9)];for(const _0x275890 of _0x2b49ff){if(!_0x275890)continue;_0x3275f9&&!_0x275890[_0x3366f5(0x861)](_0x521840)?(_0x275890[_0x3366f5(0x704)](_0x521840),_0x275890[_0x3366f5(0xa28)](_0x521840,_0xef34c7)):_0x275890[_0x3366f5(0xb99)](_0x521840,_0xef34c7);}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x916),_0x1a22ec=>{const _0x3b4fe6=_0x46ffcc;if(!SceneManager[_0x3b4fe6(0xaf2)]())return;if(!Imported[_0x3b4fe6(0x179)])return;VisuMZ[_0x3b4fe6(0x5ee)](_0x1a22ec,_0x1a22ec);const _0x2dca79=VisuMZ[_0x3b4fe6(0x93a)](_0x1a22ec[_0x3b4fe6(0xb78)]),_0x21e0f7=Number(_0x1a22ec[_0x3b4fe6(0x58f)]),_0x2cc736=Math[_0x3b4fe6(0x148)](Number(_0x1a22ec['Turns']),0x0),_0x3bbc1a=_0x1a22ec[_0x3b4fe6(0x6b9)];for(const _0x4aeefc of _0x2dca79){if(!_0x4aeefc)continue;_0x3bbc1a&&!_0x4aeefc[_0x3b4fe6(0x861)](_0x21e0f7)&&_0x4aeefc[_0x3b4fe6(0x704)](_0x21e0f7),_0x4aeefc['setStateTurns'](_0x21e0f7,_0x2cc736);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xaf9),_0x30a638=>{const _0x572768=_0x46ffcc;if(!SceneManager[_0x572768(0xaf2)]())return;if(!Imported[_0x572768(0x24d)])return;if(!BattleManager[_0x572768(0xb68)]())return;VisuMZ[_0x572768(0x5ee)](_0x30a638,_0x30a638);const _0x1ac5aa=_0x30a638['Exploited'],_0x466578=VisuMZ[_0x572768(0x93a)](_0x30a638[_0x572768(0xb78)]),_0x2df460=_0x30a638[_0x572768(0x3d7)],_0xe76081=_0x30a638[_0x572768(0x7e4)],_0x1266cf=_0x30a638[_0x572768(0x376)],_0x559c5e=BattleManager['_action'];if(_0x1ac5aa)for(const _0xa363c6 of _0x466578){if(!_0xa363c6)continue;if(_0xa363c6===BattleManager['_subject'])continue;if(_0x2df460)_0xa363c6[_0x572768(0x905)](![]);_0xa363c6[_0x572768(0x9d6)](BattleManager[_0x572768(0x30f)],_0x559c5e);}if(_0xe76081&&BattleManager['_subject']){if(_0x1266cf)BattleManager['_subject']['setSTBExploited'](![]);const _0x407600=_0x466578[0x0];BattleManager[_0x572768(0x30f)][_0x572768(0xbba)](_0x407600,_0x559c5e);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x686),_0x511517=>{const _0x54697e=_0x46ffcc;if(!SceneManager[_0x54697e(0xaf2)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x54697e(0xb68)]())return;VisuMZ[_0x54697e(0x5ee)](_0x511517,_0x511517);const _0x390766=_0x511517[_0x54697e(0x347)];BattleManager['_subject']&&BattleManager[_0x54697e(0x30f)][_0x54697e(0x85d)](_0x390766);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x356),_0xb8c8ed=>{const _0x451cf0=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x451cf0(0x24d)])return;if(!BattleManager[_0x451cf0(0xb68)]())return;VisuMZ[_0x451cf0(0x5ee)](_0xb8c8ed,_0xb8c8ed);let _0x33bb7b=_0xb8c8ed[_0x451cf0(0x347)];if(BattleManager[_0x451cf0(0x30f)]){BattleManager[_0x451cf0(0x30f)][_0x451cf0(0x52e)]=BattleManager[_0x451cf0(0x30f)][_0x451cf0(0x52e)]||[];while(_0x33bb7b--){if(BattleManager[_0x451cf0(0x30f)][_0x451cf0(0x52e)][_0x451cf0(0x9bf)]<=0x0)break;BattleManager[_0x451cf0(0x30f)][_0x451cf0(0x52e)][_0x451cf0(0x348)]();}}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x7f8),_0x31afb2=>{const _0xc73c2c=_0x46ffcc;if(!SceneManager[_0xc73c2c(0xaf2)]())return;if(!Imported[_0xc73c2c(0x825)])return;VisuMZ[_0xc73c2c(0x5ee)](_0x31afb2,_0x31afb2);const _0x4ebdfd=VisuMZ[_0xc73c2c(0x93a)](_0x31afb2[_0xc73c2c(0xb78)]),_0x3414e3=_0x31afb2[_0xc73c2c(0x106)];for(const _0x54a3a3 of _0x4ebdfd){if(!_0x54a3a3)continue;if(!_0x54a3a3[_0xc73c2c(0x738)]())continue;_0x54a3a3[_0xc73c2c(0x80f)](_0x3414e3);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x7a3),_0x51cdb4=>{const _0x5b06dd=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x51cdb4,_0x51cdb4);const _0x514e3b=VisuMZ[_0x5b06dd(0x93a)](_0x51cdb4[_0x5b06dd(0xb78)]),_0x251f17=_0x51cdb4[_0x5b06dd(0x871)],_0x54494e={'textColor':ColorManager[_0x5b06dd(0x11e)](_0x51cdb4[_0x5b06dd(0x3ff)]),'flashColor':_0x51cdb4['FlashColor'],'flashDuration':_0x51cdb4[_0x5b06dd(0x3af)]};for(const _0x169a57 of _0x514e3b){if(!_0x169a57)continue;_0x169a57['setupTextPopup'](_0x251f17,_0x54494e);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Mechanics_VariablePopup',_0xb8ba63=>{const _0x4106ce=_0x46ffcc;if(!SceneManager[_0x4106ce(0xaf2)]())return;VisuMZ[_0x4106ce(0x5ee)](_0xb8ba63,_0xb8ba63);const _0x56a185=VisuMZ['CreateActionSequenceTargets'](_0xb8ba63[_0x4106ce(0xb78)]);let _0x3e5864=$gameVariables['value'](_0xb8ba63['Variable']);Imported[_0x4106ce(0xbaf)]&&_0xb8ba63[_0x4106ce(0x6e9)]&&(_0x3e5864=VisuMZ[_0x4106ce(0x486)](_0x3e5864));const _0x2cff03=String(_0x3e5864),_0x2c0d00={'textColor':ColorManager['getColor'](_0xb8ba63[_0x4106ce(0x3ff)]),'flashColor':_0xb8ba63[_0x4106ce(0x3c5)],'flashDuration':_0xb8ba63['FlashDuration']};for(const _0x20b28b of _0x56a185){if(!_0x20b28b)continue;_0x20b28b[_0x4106ce(0x61d)](_0x2cff03,_0x2c0d00);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x71c),_0x1ed325=>{const _0x47b6d6=_0x46ffcc;if(!SceneManager[_0x47b6d6(0xaf2)]())return;const _0x589136=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x589136)return;_0x589136[_0x47b6d6(0x54b)]('battleEffect');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x174),_0x5e8a9f=>{const _0x3e3814=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e3814(0x5ee)](_0x5e8a9f,_0x5e8a9f);const _0x17ccaf=VisuMZ[_0x3e3814(0x93a)](_0x5e8a9f[_0x3e3814(0xb78)]);for(const _0x4145ba of _0x17ccaf){if(!_0x4145ba)continue;_0x4145ba[_0x3e3814(0xa0b)]();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x73d),_0x56456a=>{const _0x2f1ed3=_0x46ffcc;if(!SceneManager[_0x2f1ed3(0xaf2)]())return;VisuMZ['ConvertParams'](_0x56456a,_0x56456a);const _0x328aa1=VisuMZ[_0x2f1ed3(0x93a)](_0x56456a['Targets']),_0x2f6c07=_0x56456a[_0x2f1ed3(0x7c7)][_0x2f1ed3(0xb3e)]()[_0x2f1ed3(0xafd)]();let _0x53d02d=_0x56456a[_0x2f1ed3(0x26d)];const _0x2eb0cd=_0x56456a[_0x2f1ed3(0x983)];!['attack',_0x2f1ed3(0x29d),_0x2f1ed3(0x1dd),_0x2f1ed3(0xd2)][_0x2f1ed3(0x6a2)](_0x2f6c07)&&(_0x53d02d=![]);for(const _0x30a3aa of _0x328aa1){if(!_0x30a3aa)continue;_0x30a3aa[_0x2f1ed3(0x7c3)](_0x2f6c07,_0x53d02d,_0x2eb0cd);}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xde),_0x2581a3=>{const _0x44648f=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44648f(0x5ee)](_0x2581a3,_0x2581a3);const _0x1719aa=VisuMZ['CreateActionSequenceTargets'](_0x2581a3[_0x44648f(0xb78)]),_0x403573=_0x2581a3[_0x44648f(0x7c7)][_0x44648f(0xb3e)]()[_0x44648f(0xafd)](),_0x758ab1=_0x2581a3['ShowWeapon'];for(const _0x101264 of _0x1719aa){if(!_0x101264)continue;_0x101264[_0x44648f(0xba8)]=_0x758ab1;if(_0x403573[_0x44648f(0xe0)](/ATTACK[ ](\d+)/i))_0x101264[_0x44648f(0x668)](Number(RegExp['$1']));else _0x403573===_0x44648f(0x68b)?_0x101264[_0x44648f(0x37a)]():_0x101264[_0x44648f(0x5f2)](_0x403573);if(!_0x758ab1)_0x101264[_0x44648f(0x93d)](0x0);else{if(_0x758ab1&&[_0x44648f(0x29d),'swing',_0x44648f(0x894)]['includes'](_0x403573)){}}_0x101264['_showWeapon']=undefined;}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x92f),_0x3f4676=>{const _0x4088f1=_0x46ffcc;if(!SceneManager[_0x4088f1(0xaf2)]())return;VisuMZ[_0x4088f1(0x5ee)](_0x3f4676,_0x3f4676);const _0x281ed1=BattleManager[_0x4088f1(0x9e4)];if(!_0x281ed1)return;if(!_0x281ed1[_0x4088f1(0x50d)]())return;const _0x48ba65=VisuMZ['CreateActionSequenceTargets'](_0x3f4676['Targets']);for(const _0x502ebd of _0x48ba65){if(!_0x502ebd)continue;_0x502ebd[_0x4088f1(0x3e2)](_0x281ed1);}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x53a),_0x82c3f=>{const _0x44317e=_0x46ffcc;if(!SceneManager[_0x44317e(0xaf2)]())return;VisuMZ[_0x44317e(0x5ee)](_0x82c3f,_0x82c3f);const _0x4190cc=VisuMZ[_0x44317e(0x93a)](_0x82c3f[_0x44317e(0xb78)]);for(const _0x39cb76 of _0x4190cc){if(!_0x39cb76)continue;if(!_0x39cb76['battler']())continue;_0x39cb76[_0x44317e(0x430)]()[_0x44317e(0x358)]();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x940),_0x3c39cf=>{const _0x1b7ba9=_0x46ffcc;if(!SceneManager[_0x1b7ba9(0xaf2)]())return;VisuMZ['ConvertParams'](_0x3c39cf,_0x3c39cf);const _0x3226d3=$gameTemp[_0x1b7ba9(0x13a)](),_0x48c34b=_0x3c39cf[_0x1b7ba9(0x69d)]*Sprite_Battler[_0x1b7ba9(0xa02)];_0x3226d3['wait'](_0x48c34b);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x59d),_0x187af3=>{const _0x458a40=_0x46ffcc;if(!SceneManager[_0x458a40(0xaf2)]())return;VisuMZ[_0x458a40(0x5ee)](_0x187af3,_0x187af3);const _0xe8e4f6=$gameTemp['getLastPluginCommandInterpreter'](),_0x38bf28=BattleManager[_0x458a40(0x9e4)];if(!_0xe8e4f6||!_0x38bf28)return;if(!_0x38bf28[_0x458a40(0x50d)]())return;const _0x12b52d=VisuMZ[_0x458a40(0x93a)](_0x187af3[_0x458a40(0xb78)]);for(const _0x4e1750 of _0x12b52d){if(!_0x4e1750)continue;_0x4e1750[_0x458a40(0xbcb)](_0x38bf28);}if(_0x187af3[_0x458a40(0x8ec)])_0xe8e4f6[_0x458a40(0x54b)](_0x458a40(0x55a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x1f7),_0x1e0cdc=>{const _0xab0772=_0x46ffcc;if(!SceneManager[_0xab0772(0xaf2)]())return;if(!$gameSystem[_0xab0772(0x5c0)]())return;VisuMZ[_0xab0772(0x5ee)](_0x1e0cdc,_0x1e0cdc);const _0x69f971=$gameTemp['getLastPluginCommandInterpreter'](),_0x391bf3=VisuMZ[_0xab0772(0x93a)](_0x1e0cdc[_0xab0772(0xb78)]),_0x51e2a6=_0x1e0cdc[_0xab0772(0xaf0)],_0x5be28b=_0x1e0cdc['DistanceX'],_0x2bf6fd=_0x1e0cdc[_0xab0772(0x429)],_0x33a6c0=_0x1e0cdc['Duration'],_0x2ba62c=_0x1e0cdc['FaceDirection'],_0x24bb96=_0x1e0cdc[_0xab0772(0xff)],_0x3cd79d=_0x1e0cdc[_0xab0772(0x7c7)],_0x2af9f4=_0x1e0cdc[_0xab0772(0x8ec)];if(!_0x69f971)return;for(const _0x57826f of _0x391bf3){if(!_0x57826f)continue;let _0x5f1299=_0x5be28b,_0x43ad39=_0x2bf6fd;if(_0x51e2a6[_0xab0772(0xe0)](/horz/i))_0x5f1299*=_0x57826f[_0xab0772(0x738)]()?-0x1:0x1;if(_0x51e2a6['match'](/vert/i))_0x43ad39*=_0x57826f[_0xab0772(0x738)]()?-0x1:0x1;_0x57826f[_0xab0772(0x41d)](_0x5f1299,_0x43ad39,_0x33a6c0,_0x2ba62c,_0x24bb96),_0x57826f[_0xab0772(0x5f2)](_0x3cd79d);}if(_0x2af9f4)_0x69f971[_0xab0772(0x54b)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x735),_0x566d8d=>{const _0x413aa7=_0x46ffcc;if(!SceneManager[_0x413aa7(0xaf2)]())return;if(!$gameSystem[_0x413aa7(0x5c0)]())return;VisuMZ[_0x413aa7(0x5ee)](_0x566d8d,_0x566d8d);const _0x51a093=$gameTemp[_0x413aa7(0x13a)](),_0x4858aa=VisuMZ[_0x413aa7(0x93a)](_0x566d8d['Targets']),_0xceebbb=_0x566d8d[_0x413aa7(0x1f1)],_0x38a4ae=_0x566d8d['OffsetX'],_0x46cbf9=_0x566d8d[_0x413aa7(0x5d2)],_0x53ba39=_0x566d8d[_0x413aa7(0xb58)],_0x130e24=_0x566d8d['FaceDirection'],_0x1bb2e4=_0x566d8d['EasingType'],_0x46b282=_0x566d8d[_0x413aa7(0x7c7)],_0x5e3c8b=_0x566d8d[_0x413aa7(0x8ec)];if(!_0x51a093)return;for(const _0x2c3ff7 of _0x4858aa){if(!_0x2c3ff7)continue;const _0x20a47d=_0x566d8d[_0x413aa7(0x307)](_0x2c3ff7)||{'x':0x0,'y':0x0};let _0x4e284f=_0x20a47d['x'],_0x3a4212=_0x20a47d['y'];if(_0xceebbb[_0x413aa7(0xe0)](/none/i))_0x4e284f+=_0x38a4ae,_0x3a4212+=_0x46cbf9;else{if(_0xceebbb[_0x413aa7(0xe0)](/horz/i)&&_0xceebbb[_0x413aa7(0xe0)](/vert/i))_0x4e284f+=_0x2c3ff7[_0x413aa7(0x738)]()?-_0x38a4ae:_0x38a4ae,_0x3a4212+=_0x2c3ff7[_0x413aa7(0x738)]()?-_0x46cbf9:_0x46cbf9;else{if(_0xceebbb['match'](/horz/i))_0x4e284f+=_0x2c3ff7[_0x413aa7(0x738)]()?-_0x38a4ae:_0x38a4ae,_0x3a4212+=_0x46cbf9;else _0xceebbb['match'](/vert/i)&&(_0x4e284f+=_0x38a4ae,_0x3a4212+=_0x2c3ff7[_0x413aa7(0x738)]()?-_0x46cbf9:_0x46cbf9);}}_0x2c3ff7[_0x413aa7(0xb2f)](_0x4e284f,_0x3a4212,_0x53ba39,_0x130e24,_0x1bb2e4,-0x1),_0x2c3ff7['requestMotion'](_0x46b282);}if(_0x5e3c8b)_0x51a093[_0x413aa7(0x54b)](_0x413aa7(0x55a));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x90c),_0x2f66bc=>{const _0x4316c0=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4316c0(0x5c0)]())return;VisuMZ[_0x4316c0(0x5ee)](_0x2f66bc,_0x2f66bc);const _0x4f6eac=$gameTemp[_0x4316c0(0x13a)](),_0x44dd56=VisuMZ['CreateActionSequenceTargets'](_0x2f66bc[_0x4316c0(0xb78)]),_0x100479=_0x2f66bc[_0x4316c0(0x351)],_0x35acaa=_0x2f66bc[_0x4316c0(0x1f1)],_0xf296e3=_0x2f66bc[_0x4316c0(0x815)],_0x2dfd1a=_0x2f66bc[_0x4316c0(0x5d2)],_0x447c51=_0x2f66bc[_0x4316c0(0xb58)],_0x55d75e=_0x2f66bc[_0x4316c0(0x500)],_0x1ceab3=_0x2f66bc[_0x4316c0(0xff)],_0x23014e=_0x2f66bc[_0x4316c0(0x7c7)],_0x4a38ef=_0x2f66bc[_0x4316c0(0x8ec)];if(!_0x4f6eac)return;for(const _0x2ca619 of _0x44dd56){if(!_0x2ca619)continue;let _0x1670de=_0x2ca619[_0x4316c0(0x430)]()[_0x4316c0(0x72f)],_0x2f6f51=_0x2ca619[_0x4316c0(0x430)]()['_baseY'];if(_0x100479[_0x4316c0(0xe0)](/home/i))_0x1670de=_0x2ca619[_0x4316c0(0x430)]()[_0x4316c0(0x2bd)],_0x2f6f51=_0x2ca619[_0x4316c0(0x430)]()[_0x4316c0(0x611)];else{if(_0x100479[_0x4316c0(0xe0)](/center/i))_0x1670de=Graphics[_0x4316c0(0xab3)]/0x2,_0x2f6f51=Graphics['boxHeight']/0x2;else _0x100479[_0x4316c0(0xe0)](/point (\d+), (\d+)/i)&&(_0x1670de=Number(RegExp['$1']),_0x2f6f51=Number(RegExp['$2']));}if(_0x35acaa[_0x4316c0(0xe0)](/none/i))_0x1670de+=_0xf296e3,_0x2f6f51+=_0x2dfd1a;else{if(_0x35acaa[_0x4316c0(0xe0)](/horz/i)&&_0x35acaa['match'](/vert/i))_0x1670de+=_0x2ca619[_0x4316c0(0x738)]()?-_0xf296e3:_0xf296e3,_0x2f6f51+=_0x2ca619[_0x4316c0(0x738)]()?-_0x2dfd1a:_0x2dfd1a;else{if(_0x35acaa['match'](/horz/i))_0x1670de+=_0x2ca619[_0x4316c0(0x738)]()?-_0xf296e3:_0xf296e3,_0x2f6f51+=_0x2dfd1a;else _0x35acaa[_0x4316c0(0xe0)](/vert/i)&&(_0x1670de+=_0xf296e3,_0x2f6f51+=_0x2ca619[_0x4316c0(0x738)]()?-_0x2dfd1a:_0x2dfd1a);}}_0x2ca619[_0x4316c0(0xb2f)](_0x1670de,_0x2f6f51,_0x447c51,_0x55d75e,_0x1ceab3,-0x1),_0x2ca619[_0x4316c0(0x5f2)](_0x23014e);}if(_0x4a38ef)_0x4f6eac[_0x4316c0(0x54b)](_0x4316c0(0x55a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xae9),_0xec1626=>{const _0x491969=_0x46ffcc;if(!SceneManager[_0x491969(0xaf2)]())return;if(!$gameSystem[_0x491969(0x5c0)]())return;VisuMZ[_0x491969(0x5ee)](_0xec1626,_0xec1626);const _0x1af35d=$gameTemp['getLastPluginCommandInterpreter'](),_0x337ecb=VisuMZ['CreateActionSequenceTargets'](_0xec1626['Targets1']),_0x6902b2=VisuMZ[_0x491969(0x93a)](_0xec1626['Targets2']),_0x45c5bd=_0xec1626['TargetLocation'];let _0xcc6b7b=_0xec1626[_0x491969(0x25f)];const _0x5512d8=_0xec1626['OffsetAdjust'],_0x18e575=_0xec1626[_0x491969(0x815)],_0x1dfd6d=_0xec1626['OffsetY'],_0x1e7750=_0xec1626['Duration'],_0x23cf8e=_0xec1626['FaceDirection'],_0x25a1b5=_0xec1626[_0x491969(0xff)],_0x46f142=_0xec1626[_0x491969(0x7c7)],_0x454c1d=_0xec1626[_0x491969(0x8ec)],_0x47ee2a=Math[_0x491969(0x4d8)](..._0x6902b2[_0x491969(0x6cd)](_0x4796dc=>_0x4796dc[_0x491969(0x430)]()[_0x491969(0x72f)]-_0x4796dc[_0x491969(0x430)]()[_0x491969(0x54d)]()/0x2)),_0x139219=Math[_0x491969(0x148)](..._0x6902b2['map'](_0x40a91e=>_0x40a91e[_0x491969(0x430)]()['_baseX']+_0x40a91e[_0x491969(0x430)]()[_0x491969(0x54d)]()/0x2)),_0x3106f0=Math['min'](..._0x6902b2[_0x491969(0x6cd)](_0x11bbac=>_0x11bbac[_0x491969(0x430)]()['_baseY']-_0x11bbac['battler']()[_0x491969(0x8c2)]())),_0xa76cdf=Math[_0x491969(0x148)](..._0x6902b2[_0x491969(0x6cd)](_0x3a264a=>_0x3a264a[_0x491969(0x430)]()['_baseY'])),_0x378fca=_0x6902b2[_0x491969(0x8ba)](_0x232e8e=>_0x232e8e['isActor']())[_0x491969(0x9bf)],_0x53e173=_0x6902b2[_0x491969(0x8ba)](_0x5b2738=>_0x5b2738[_0x491969(0x656)]())['length'];let _0x2a39cd=0x0,_0x420e9a=0x0;if(_0x45c5bd[_0x491969(0xe0)](/front/i))_0x2a39cd=_0x378fca>=_0x53e173?_0x47ee2a:_0x139219;else{if(_0x45c5bd['match'](/middle/i))_0x2a39cd=(_0x47ee2a+_0x139219)/0x2,_0xcc6b7b=-0x1;else _0x45c5bd[_0x491969(0xe0)](/back/i)&&(_0x2a39cd=_0x378fca>=_0x53e173?_0x139219:_0x47ee2a);}if(_0x45c5bd[_0x491969(0xe0)](/head/i))_0x420e9a=_0x3106f0;else{if(_0x45c5bd[_0x491969(0xe0)](/center/i))_0x420e9a=(_0x3106f0+_0xa76cdf)/0x2;else _0x45c5bd[_0x491969(0xe0)](/base/i)&&(_0x420e9a=_0xa76cdf);}if(!_0x1af35d)return;for(const _0x59e4c5 of _0x337ecb){if(!_0x59e4c5)continue;let _0x327235=_0x2a39cd,_0x9245fa=_0x420e9a;if(_0x5512d8[_0x491969(0xe0)](/none/i))_0x327235+=_0x18e575,_0x9245fa+=_0x1dfd6d;else{if(_0x5512d8[_0x491969(0xe0)](/horz/i)&&_0x5512d8['match'](/vert/i))_0x327235+=_0x59e4c5['isActor']()?-_0x18e575:_0x18e575,_0x9245fa+=_0x59e4c5[_0x491969(0x738)]()?-_0x1dfd6d:_0x1dfd6d;else{if(_0x5512d8[_0x491969(0xe0)](/horz/i))_0x327235+=_0x59e4c5[_0x491969(0x738)]()?-_0x18e575:_0x18e575,_0x9245fa+=_0x1dfd6d;else _0x5512d8[_0x491969(0xe0)](/vert/i)&&(_0x327235+=_0x18e575,_0x9245fa+=_0x59e4c5[_0x491969(0x738)]()?-_0x1dfd6d:_0x1dfd6d);}}_0x59e4c5['moveBattlerHomeToPoint'](_0x327235,_0x9245fa,_0x1e7750,_0x23cf8e,_0x25a1b5,_0xcc6b7b),_0x59e4c5[_0x491969(0x5f2)](_0x46f142);}if(_0x454c1d)_0x1af35d['setWaitMode']('battleMove');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x319),_0x1f4522=>{const _0x2fd179=_0x46ffcc;if(!SceneManager[_0x2fd179(0xaf2)]())return;if(!$gameSystem[_0x2fd179(0x5c0)]())return;VisuMZ[_0x2fd179(0x5ee)](_0x1f4522,_0x1f4522);const _0x169ec1=VisuMZ[_0x2fd179(0x93a)](_0x1f4522['Targets']);let _0x3a6788=_0x1f4522['Direction']['match'](/back/i);for(const _0x284478 of _0x169ec1){if(!_0x284478)continue;if(_0x1f4522[_0x2fd179(0x623)][_0x2fd179(0xe0)](/rand/i))_0x3a6788=Math['randomInt'](0x2);_0x284478[_0x2fd179(0x17b)](!!_0x3a6788);}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x80d),_0x362b0b=>{const _0xed9f33=_0x46ffcc;if(!SceneManager[_0xed9f33(0xaf2)]())return;if(!$gameSystem[_0xed9f33(0x5c0)]())return;VisuMZ[_0xed9f33(0x5ee)](_0x362b0b,_0x362b0b);const _0x4d4fd6=VisuMZ[_0xed9f33(0x93a)](_0x362b0b[_0xed9f33(0xb78)]),_0x206ffc=_0x362b0b[_0xed9f33(0x34c)];for(const _0x494bd2 of _0x4d4fd6){if(!_0x494bd2)continue;const _0x5cc12d=_0x362b0b['PointJS'](_0x494bd2)||{'x':0x0,'y':0x0};let _0x1451e3=_0x5cc12d['x'],_0x5bc621=_0x5cc12d['y'];_0x494bd2[_0xed9f33(0x913)](Math[_0xed9f33(0x6da)](_0x1451e3),Math['round'](_0x5bc621),!!_0x206ffc);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x4cb),_0x191340=>{const _0x474339=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x474339(0x5ee)](_0x191340,_0x191340);const _0x18e51f=VisuMZ[_0x474339(0x93a)](_0x191340[_0x474339(0xb78)]);let _0x14e454=_0x191340[_0x474339(0x924)];const _0x249aa6=_0x191340[_0x474339(0x34c)];for(const _0x3f48b8 of _0x18e51f){if(!_0x3f48b8)continue;let _0x2ea31a=_0x3f48b8[_0x474339(0x430)]()[_0x474339(0x72f)],_0x2a874e=_0x3f48b8[_0x474339(0x430)]()['_baseY'];if(_0x14e454[_0x474339(0xe0)](/home/i))_0x2ea31a=_0x3f48b8[_0x474339(0x430)]()[_0x474339(0x2bd)],_0x2a874e=_0x3f48b8[_0x474339(0x430)]()[_0x474339(0x611)];else{if(_0x14e454['match'](/center/i))_0x2ea31a=Graphics[_0x474339(0xab3)]/0x2,_0x2a874e=Graphics['boxHeight']/0x2;else _0x14e454[_0x474339(0xe0)](/point (\d+), (\d+)/i)&&(_0x2ea31a=Number(RegExp['$1']),_0x2a874e=Number(RegExp['$2']));}_0x3f48b8['setBattlerFacePoint'](Math[_0x474339(0x6da)](_0x2ea31a),Math[_0x474339(0x6da)](_0x2a874e),!!_0x249aa6);}}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xbb4),_0x412a09=>{const _0x40aa92=_0x46ffcc;if(!SceneManager[_0x40aa92(0xaf2)]())return;if(!$gameSystem[_0x40aa92(0x5c0)]())return;VisuMZ[_0x40aa92(0x5ee)](_0x412a09,_0x412a09);const _0x43b55d=VisuMZ[_0x40aa92(0x93a)](_0x412a09['Targets1']),_0x427c7f=VisuMZ[_0x40aa92(0x93a)](_0x412a09[_0x40aa92(0xac0)]),_0x5845df=_0x427c7f[_0x40aa92(0x6cd)](_0x65e992=>_0x65e992&&_0x65e992['battler']()?_0x65e992['battler']()[_0x40aa92(0x72f)]:0x0)/(_0x427c7f[_0x40aa92(0x9bf)]||0x1),_0x182d44=_0x427c7f[_0x40aa92(0x6cd)](_0x1ef357=>_0x1ef357&&_0x1ef357[_0x40aa92(0x430)]()?_0x1ef357[_0x40aa92(0x430)]()['_baseY']:0x0)/(_0x427c7f[_0x40aa92(0x9bf)]||0x1),_0x4433b4=_0x412a09[_0x40aa92(0x34c)];for(const _0xa1413b of _0x43b55d){if(!_0xa1413b)continue;_0xa1413b[_0x40aa92(0x913)](Math[_0x40aa92(0x6da)](_0x5845df),Math[_0x40aa92(0x6da)](_0x182d44),!!_0x4433b4);}}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x7d2),_0x3853b0=>{const _0x4f4c8e=_0x46ffcc;if(!SceneManager[_0x4f4c8e(0xaf2)]())return;VisuMZ[_0x4f4c8e(0x5ee)](_0x3853b0,_0x3853b0);const _0xdac32a=$gameTemp[_0x4f4c8e(0x13a)](),_0x1b9b92=VisuMZ[_0x4f4c8e(0x93a)](_0x3853b0[_0x4f4c8e(0xb78)]),_0x3a9d1a=_0x3853b0['Height'],_0x374347=_0x3853b0[_0x4f4c8e(0xb58)],_0x18d41f=_0x3853b0[_0x4f4c8e(0xff)],_0x548eb9=_0x3853b0[_0x4f4c8e(0x529)];if(!_0xdac32a)return;for(const _0x16d001 of _0x1b9b92){if(!_0x16d001)continue;_0x16d001[_0x4f4c8e(0x8b3)](_0x3a9d1a,_0x374347,_0x18d41f);}if(_0x548eb9)_0xdac32a[_0x4f4c8e(0x54b)](_0x4f4c8e(0x32a));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Movement_HomeReset',_0x42f2b0=>{const _0x232418=_0x46ffcc;if(!SceneManager[_0x232418(0xaf2)]())return;VisuMZ[_0x232418(0x5ee)](_0x42f2b0,_0x42f2b0);const _0x1445d1=$gameTemp[_0x232418(0x13a)]();if(!_0x1445d1)return;const _0x490c99=VisuMZ[_0x232418(0x93a)](_0x42f2b0[_0x232418(0xb78)]);for(const _0x357a39 of _0x490c99){if(!_0x357a39)continue;_0x357a39[_0x232418(0xab8)]();}BattleManager['_subject']&&BattleManager[_0x232418(0x30f)][_0x232418(0x583)]();if(_0x42f2b0[_0x232418(0x8ec)])_0x1445d1[_0x232418(0x54b)]('battleMove');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x7a5),_0x4e1d95=>{const _0x5272fb=_0x46ffcc;if(!SceneManager[_0x5272fb(0xaf2)]())return;VisuMZ['ConvertParams'](_0x4e1d95,_0x4e1d95);const _0x42fce9=$gameTemp[_0x5272fb(0x13a)](),_0x4fac2d=VisuMZ['CreateActionSequenceTargets'](_0x4e1d95[_0x5272fb(0xb78)]),_0x1a8e50=_0x4e1d95[_0x5272fb(0x8cf)],_0x108c4c=_0x4e1d95[_0x5272fb(0xb58)],_0x5409fe=_0x4e1d95[_0x5272fb(0x2c8)];if(!_0x42fce9)return;for(const _0x22ed84 of _0x4fac2d){if(!_0x22ed84)continue;_0x22ed84[_0x5272fb(0xd9)](_0x1a8e50,_0x108c4c);}if(_0x5409fe)_0x42fce9[_0x5272fb(0x54b)](_0x5272fb(0x427));}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0xb9b),_0x2cb5b5=>{const _0x423bcf=_0x46ffcc;if(!SceneManager[_0x423bcf(0xaf2)]())return;if(!$gameSystem[_0x423bcf(0x5c0)]())return;VisuMZ[_0x423bcf(0x5ee)](_0x2cb5b5,_0x2cb5b5);const _0x2adf29=$gameTemp[_0x423bcf(0x13a)](),_0x3e6026=VisuMZ['CreateActionSequenceTargets'](_0x2cb5b5['Targets']),_0x47d251=_0x2cb5b5['DistanceAdjust'],_0x2df4db=_0x2cb5b5[_0x423bcf(0x31e)],_0x3ea510=_0x2cb5b5[_0x423bcf(0x429)],_0x4670fc=_0x2cb5b5[_0x423bcf(0xb58)],_0x11f912=_0x2cb5b5[_0x423bcf(0x500)],_0x34f6ff=_0x2cb5b5[_0x423bcf(0xff)],_0x565529=_0x2cb5b5[_0x423bcf(0x7c7)],_0x283eb3=_0x2cb5b5[_0x423bcf(0x8ec)];if(!_0x2adf29)return;for(const _0x4e21e0 of _0x3e6026){if(!_0x4e21e0)continue;let _0xf0be11=_0x2df4db,_0x26eefd=_0x3ea510;if(_0x47d251[_0x423bcf(0xe0)](/horz/i))_0xf0be11*=_0x4e21e0[_0x423bcf(0x738)]()?-0x1:0x1;if(_0x47d251['match'](/vert/i))_0x26eefd*=_0x4e21e0['isActor']()?-0x1:0x1;_0x4e21e0[_0x423bcf(0xb02)](_0xf0be11,_0x26eefd,_0x4670fc,_0x11f912,_0x34f6ff),_0x4e21e0['requestMotion'](_0x565529);}if(_0x283eb3)_0x2adf29[_0x423bcf(0x54b)]('battleMove');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Movement_MoveToJsPoint',_0x4bc962=>{const _0x1ace69=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1ace69(0x5c0)]())return;VisuMZ[_0x1ace69(0x5ee)](_0x4bc962,_0x4bc962);const _0x194ca1=$gameTemp[_0x1ace69(0x13a)](),_0x135991=VisuMZ['CreateActionSequenceTargets'](_0x4bc962[_0x1ace69(0xb78)]),_0x4b1e7f=_0x4bc962[_0x1ace69(0x1f1)],_0x313b9f=_0x4bc962[_0x1ace69(0x815)],_0xfc44ed=_0x4bc962[_0x1ace69(0x5d2)],_0xb77be5=_0x4bc962[_0x1ace69(0xb58)],_0x72e105=_0x4bc962[_0x1ace69(0x500)],_0x2ecc6c=_0x4bc962[_0x1ace69(0xff)],_0x2097f8=_0x4bc962[_0x1ace69(0x7c7)],_0x22d751=_0x4bc962[_0x1ace69(0x8ec)];if(!_0x194ca1)return;for(const _0x4c8c35 of _0x135991){if(!_0x4c8c35)continue;const _0x51717f=_0x4bc962[_0x1ace69(0x307)](_0x4c8c35)||{'x':0x0,'y':0x0};let _0x49cae7=_0x51717f['x'],_0x363bd5=_0x51717f['y'];if(_0x4b1e7f[_0x1ace69(0xe0)](/none/i))_0x49cae7+=_0x313b9f,_0x363bd5+=_0xfc44ed;else{if(_0x4b1e7f[_0x1ace69(0xe0)](/horz/i)&&_0x4b1e7f[_0x1ace69(0xe0)](/vert/i))_0x49cae7+=_0x4c8c35[_0x1ace69(0x738)]()?-_0x313b9f:_0x313b9f,_0x363bd5+=_0x4c8c35[_0x1ace69(0x738)]()?-_0xfc44ed:_0xfc44ed;else{if(_0x4b1e7f[_0x1ace69(0xe0)](/horz/i))_0x49cae7+=_0x4c8c35[_0x1ace69(0x738)]()?-_0x313b9f:_0x313b9f,_0x363bd5+=_0xfc44ed;else _0x4b1e7f[_0x1ace69(0xe0)](/vert/i)&&(_0x49cae7+=_0x313b9f,_0x363bd5+=_0x4c8c35[_0x1ace69(0x738)]()?-_0xfc44ed:_0xfc44ed);}}_0x4c8c35['moveBattlerToPoint'](_0x49cae7,_0x363bd5,_0xb77be5,_0x72e105,_0x2ecc6c,-0x1),_0x4c8c35[_0x1ace69(0x5f2)](_0x2097f8);}if(_0x22d751)_0x194ca1[_0x1ace69(0x54b)](_0x1ace69(0x55a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Movement_MoveToPoint',_0x1b29fb=>{const _0x44129e=_0x46ffcc;if(!SceneManager[_0x44129e(0xaf2)]())return;if(!$gameSystem[_0x44129e(0x5c0)]())return;VisuMZ['ConvertParams'](_0x1b29fb,_0x1b29fb);const _0x59227a=$gameTemp['getLastPluginCommandInterpreter'](),_0x377f27=VisuMZ[_0x44129e(0x93a)](_0x1b29fb['Targets']),_0x14cae1=_0x1b29fb[_0x44129e(0x351)],_0x59944d=_0x1b29fb[_0x44129e(0x1f1)],_0x5985dc=_0x1b29fb['OffsetX'],_0x3eda12=_0x1b29fb[_0x44129e(0x5d2)],_0x5e3e5e=_0x1b29fb[_0x44129e(0xb58)],_0x4457ce=_0x1b29fb[_0x44129e(0x500)],_0x42c8d0=_0x1b29fb[_0x44129e(0xff)],_0x3abd98=_0x1b29fb[_0x44129e(0x7c7)],_0x8fce65=_0x1b29fb[_0x44129e(0x8ec)];if(!_0x59227a)return;for(const _0x135301 of _0x377f27){if(!_0x135301)continue;let _0x21a960=_0x135301[_0x44129e(0x430)]()[_0x44129e(0x72f)],_0x5f4f27=_0x135301['battler']()[_0x44129e(0x97f)];if(_0x14cae1[_0x44129e(0xe0)](/home/i))_0x21a960=_0x135301[_0x44129e(0x430)]()[_0x44129e(0x2bd)],_0x5f4f27=_0x135301[_0x44129e(0x430)]()[_0x44129e(0x611)];else{if(_0x14cae1['match'](/center/i))_0x21a960=Graphics['boxWidth']/0x2,_0x5f4f27=Graphics[_0x44129e(0x78c)]/0x2;else _0x14cae1[_0x44129e(0xe0)](/point (\d+), (\d+)/i)&&(_0x21a960=Number(RegExp['$1']),_0x5f4f27=Number(RegExp['$2']));}if(_0x59944d[_0x44129e(0xe0)](/none/i))_0x21a960+=_0x5985dc,_0x5f4f27+=_0x3eda12;else{if(_0x59944d[_0x44129e(0xe0)](/horz/i)&&_0x59944d['match'](/vert/i))_0x21a960+=_0x135301[_0x44129e(0x738)]()?-_0x5985dc:_0x5985dc,_0x5f4f27+=_0x135301[_0x44129e(0x738)]()?-_0x3eda12:_0x3eda12;else{if(_0x59944d[_0x44129e(0xe0)](/horz/i))_0x21a960+=_0x135301[_0x44129e(0x738)]()?-_0x5985dc:_0x5985dc,_0x5f4f27+=_0x3eda12;else _0x59944d['match'](/vert/i)&&(_0x21a960+=_0x5985dc,_0x5f4f27+=_0x135301[_0x44129e(0x738)]()?-_0x3eda12:_0x3eda12);}}_0x135301['moveBattlerToPoint'](_0x21a960,_0x5f4f27,_0x5e3e5e,_0x4457ce,_0x42c8d0,-0x1),_0x135301[_0x44129e(0x5f2)](_0x3abd98);}if(_0x8fce65)_0x59227a[_0x44129e(0x54b)](_0x44129e(0x55a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x5da),_0x8a74e7=>{const _0xbf0871=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xbf0871(0x5c0)]())return;VisuMZ[_0xbf0871(0x5ee)](_0x8a74e7,_0x8a74e7);const _0x450874=$gameTemp[_0xbf0871(0x13a)](),_0x55710f=VisuMZ[_0xbf0871(0x93a)](_0x8a74e7[_0xbf0871(0x1b1)]),_0x291ba5=VisuMZ[_0xbf0871(0x93a)](_0x8a74e7[_0xbf0871(0xac0)]),_0x9c8aaf=_0x8a74e7['TargetLocation'];let _0x4d2f02=_0x8a74e7['MeleeDistance'];const _0x3b7166=_0x8a74e7['OffsetAdjust'],_0x35259e=_0x8a74e7[_0xbf0871(0x815)],_0x4fc67a=_0x8a74e7[_0xbf0871(0x5d2)],_0x498f1b=_0x8a74e7[_0xbf0871(0xb58)],_0x325d0d=_0x8a74e7[_0xbf0871(0x500)],_0x2b9986=_0x8a74e7[_0xbf0871(0xff)],_0x5dfab0=_0x8a74e7[_0xbf0871(0x7c7)],_0x4ed7a9=_0x8a74e7[_0xbf0871(0x8ec)],_0x31f603=Math[_0xbf0871(0x4d8)](..._0x291ba5[_0xbf0871(0x6cd)](_0x103b85=>_0x103b85[_0xbf0871(0x430)]()[_0xbf0871(0x72f)]-_0x103b85[_0xbf0871(0x430)]()['mainSpriteWidth']()/0x2)),_0x26fe6c=Math[_0xbf0871(0x148)](..._0x291ba5[_0xbf0871(0x6cd)](_0xf8dff2=>_0xf8dff2[_0xbf0871(0x430)]()['_baseX']+_0xf8dff2[_0xbf0871(0x430)]()[_0xbf0871(0x54d)]()/0x2)),_0x42e642=Math['min'](..._0x291ba5[_0xbf0871(0x6cd)](_0x15bbda=>_0x15bbda[_0xbf0871(0x430)]()['_baseY']-_0x15bbda[_0xbf0871(0x430)]()[_0xbf0871(0x8c2)]())),_0x1934d7=Math[_0xbf0871(0x148)](..._0x291ba5[_0xbf0871(0x6cd)](_0x64d769=>_0x64d769['battler']()[_0xbf0871(0x97f)])),_0xb39971=_0x291ba5[_0xbf0871(0x8ba)](_0x349d8a=>_0x349d8a[_0xbf0871(0x738)]())[_0xbf0871(0x9bf)],_0x2fcceb=_0x291ba5[_0xbf0871(0x8ba)](_0x499c3f=>_0x499c3f[_0xbf0871(0x656)]())[_0xbf0871(0x9bf)];let _0x34fb71=0x0,_0x834fda=0x0;if(_0x9c8aaf[_0xbf0871(0xe0)](/front/i))_0x34fb71=_0xb39971>=_0x2fcceb?_0x31f603:_0x26fe6c;else{if(_0x9c8aaf[_0xbf0871(0xe0)](/middle/i))_0x34fb71=(_0x31f603+_0x26fe6c)/0x2,_0x4d2f02=-0x1;else _0x9c8aaf[_0xbf0871(0xe0)](/back/i)&&(_0x34fb71=_0xb39971>=_0x2fcceb?_0x26fe6c:_0x31f603);}if(_0x9c8aaf[_0xbf0871(0xe0)](/head/i))_0x834fda=_0x42e642;else{if(_0x9c8aaf['match'](/center/i))_0x834fda=(_0x42e642+_0x1934d7)/0x2;else _0x9c8aaf[_0xbf0871(0xe0)](/base/i)&&(_0x834fda=_0x1934d7);}if(!_0x450874)return;for(const _0x418ff3 of _0x55710f){if(!_0x418ff3)continue;let _0x21e5f3=_0x34fb71,_0x4baf45=_0x834fda;if(_0x3b7166[_0xbf0871(0xe0)](/none/i))_0x21e5f3+=_0x35259e,_0x4baf45+=_0x4fc67a;else{if(_0x3b7166[_0xbf0871(0xe0)](/horz/i)&&_0x3b7166[_0xbf0871(0xe0)](/vert/i))_0x21e5f3+=_0x418ff3['isActor']()?-_0x35259e:_0x35259e,_0x4baf45+=_0x418ff3[_0xbf0871(0x738)]()?-_0x4fc67a:_0x4fc67a;else{if(_0x3b7166[_0xbf0871(0xe0)](/horz/i))_0x21e5f3+=_0x418ff3[_0xbf0871(0x738)]()?-_0x35259e:_0x35259e,_0x4baf45+=_0x4fc67a;else _0x3b7166['match'](/vert/i)&&(_0x21e5f3+=_0x35259e,_0x4baf45+=_0x418ff3[_0xbf0871(0x738)]()?-_0x4fc67a:_0x4fc67a);}}_0x418ff3[_0xbf0871(0x49f)](_0x21e5f3,_0x4baf45,_0x498f1b,_0x325d0d,_0x2b9986,_0x4d2f02),_0x418ff3[_0xbf0871(0x5f2)](_0x5dfab0);}if(_0x4ed7a9)_0x450874[_0xbf0871(0x54b)](_0xbf0871(0x55a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Movement_Opacity',_0x462070=>{const _0x3493d6=_0x46ffcc;if(!SceneManager[_0x3493d6(0xaf2)]())return;VisuMZ['ConvertParams'](_0x462070,_0x462070);const _0x1e8f75=$gameTemp[_0x3493d6(0x13a)](),_0x1d253c=VisuMZ[_0x3493d6(0x93a)](_0x462070[_0x3493d6(0xb78)]),_0x5b12f2=_0x462070['Opacity'],_0x3123f5=_0x462070['Duration'],_0x142cee=_0x462070['EasingType'],_0x5457f9=_0x462070['WaitForOpacity'];if(!_0x1e8f75)return;for(const _0x5d7c61 of _0x1d253c){if(!_0x5d7c61)continue;_0x5d7c61[_0x3493d6(0x1a2)](_0x5b12f2,_0x3123f5,_0x142cee);}if(_0x5457f9)_0x1e8f75[_0x3493d6(0x54b)]('battleOpacity');}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x2ff),_0x714d14=>{const _0x34c988=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34c988(0x5ee)](_0x714d14,_0x714d14);const _0x4fd827=$gameTemp[_0x34c988(0x13a)](),_0x4338f4=VisuMZ[_0x34c988(0x93a)](_0x714d14[_0x34c988(0xb78)]),_0x5b6c9e=_0x714d14[_0x34c988(0x632)],_0x510218=_0x714d14[_0x34c988(0x5ef)],_0x5e8f2a=_0x714d14[_0x34c988(0xb58)],_0x450921=_0x714d14['EasingType'],_0x57892a=_0x714d14['WaitForScale'];if(!_0x4fd827)return;for(const _0x3c2c17 of _0x4338f4){if(!_0x3c2c17)continue;_0x3c2c17[_0x34c988(0x431)](_0x5b6c9e,_0x510218,_0x5e8f2a,_0x450921);}if(_0x57892a)_0x4fd827['setWaitMode']('battleGrow');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x59f),_0x8b4de6=>{const _0x39d398=_0x46ffcc;if(!SceneManager[_0x39d398(0xaf2)]())return;VisuMZ[_0x39d398(0x5ee)](_0x8b4de6,_0x8b4de6);const _0x4ecc0b=$gameTemp[_0x39d398(0x13a)](),_0x1249c3=VisuMZ[_0x39d398(0x93a)](_0x8b4de6[_0x39d398(0xb78)]),_0x2c2728=_0x8b4de6[_0x39d398(0xb4e)],_0x35bc43=_0x8b4de6[_0x39d398(0x119)],_0x2ae4ce=_0x8b4de6[_0x39d398(0xb58)],_0x43cb2a=_0x8b4de6[_0x39d398(0xff)],_0x3616a1=_0x8b4de6[_0x39d398(0xaac)];if(!_0x4ecc0b)return;for(const _0xaff4bf of _0x1249c3){if(!_0xaff4bf)continue;_0xaff4bf[_0x39d398(0xfe)](_0x2c2728,_0x35bc43,_0x2ae4ce,_0x43cb2a);}if(_0x3616a1)_0x4ecc0b['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x5a9),_0xd3f5d1=>{const _0x29e86a=_0x46ffcc;if(!SceneManager[_0x29e86a(0xaf2)]())return;VisuMZ[_0x29e86a(0x5ee)](_0xd3f5d1,_0xd3f5d1);const _0x22dcdf=$gameTemp[_0x29e86a(0x13a)](),_0x2ea902=VisuMZ[_0x29e86a(0x93a)](_0xd3f5d1[_0x29e86a(0xb78)]),_0xe3171b=_0xd3f5d1[_0x29e86a(0xbf0)],_0x1f345b=_0xd3f5d1['Duration'],_0x1fba29=_0xd3f5d1[_0x29e86a(0xff)],_0x4043c0=_0xd3f5d1[_0x29e86a(0x239)],_0x2d94f2=_0xd3f5d1['WaitForSpin'];if(!_0x22dcdf)return;for(const _0x51f63f of _0x2ea902){if(!_0x51f63f)continue;_0x51f63f[_0x29e86a(0x19a)](_0xe3171b,_0x1f345b,_0x1fba29,_0x4043c0);}if(_0x2d94f2)_0x22dcdf['setWaitMode']('battleSpin');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x4bc),_0x4f594a=>{const _0x38dab7=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;const _0x760a22=$gameTemp[_0x38dab7(0x13a)]();if(!_0x760a22)return;_0x760a22[_0x38dab7(0x54b)](_0x38dab7(0x32a));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x3ba),_0x5e9148=>{const _0x4b376b=_0x46ffcc;if(!SceneManager[_0x4b376b(0xaf2)]())return;const _0x1ce50e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1ce50e)return;_0x1ce50e[_0x4b376b(0x54b)]('battleJump');}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],_0x46ffcc(0x7ba),_0x3250e9=>{const _0x29f630=_0x46ffcc;if(!SceneManager[_0x29f630(0xaf2)]())return;const _0x2032ed=$gameTemp[_0x29f630(0x13a)]();if(!_0x2032ed)return;_0x2032ed[_0x29f630(0x54b)](_0x29f630(0x55a));}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x936),_0x2f6b84=>{const _0x5eac87=_0x46ffcc;if(!SceneManager[_0x5eac87(0xaf2)]())return;const _0x512b8c=$gameTemp[_0x5eac87(0x13a)]();if(!_0x512b8c)return;_0x512b8c[_0x5eac87(0x54b)](_0x5eac87(0x78e));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Movement_WaitForScale',_0x1d988b=>{const _0x54bb6a=_0x46ffcc;if(!SceneManager[_0x54bb6a(0xaf2)]())return;const _0xb282f2=$gameTemp[_0x54bb6a(0x13a)]();if(!_0xb282f2)return;_0xb282f2[_0x54bb6a(0x54b)](_0x54bb6a(0xb46));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Movement_WaitForSkew',_0x3bd124=>{const _0x4c3560=_0x46ffcc;if(!SceneManager[_0x4c3560(0xaf2)]())return;const _0xc73033=$gameTemp[_0x4c3560(0x13a)]();if(!_0xc73033)return;_0xc73033[_0x4c3560(0x54b)](_0x4c3560(0x785));}),PluginManager[_0x46ffcc(0x14e)](pluginData['name'],'ActSeq_Movement_WaitForSpin',_0x576607=>{const _0x24f656=_0x46ffcc;if(!SceneManager[_0x24f656(0xaf2)]())return;const _0x90197f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x90197f)return;_0x90197f[_0x24f656(0x54b)](_0x24f656(0x5b9));}),VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2b6)]=function(){const _0x502029=_0x46ffcc;if(!Imported[_0x502029(0x5fe)])return;if(VisuMZ[_0x502029(0x64c)]['version']<1.08){let _0x874d2d='';_0x874d2d+='VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20',_0x874d2d+=_0x502029(0x578),alert(_0x874d2d),SceneManager[_0x502029(0x462)]();}},PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x198),_0x4ac47d=>{const _0x201c08=_0x46ffcc;if(!SceneManager[_0x201c08(0xaf2)]())return;if(!Imported[_0x201c08(0x5fe)])return;VisuMZ[_0x201c08(0x5ee)](_0x4ac47d,_0x4ac47d),VisuMZ[_0x201c08(0x354)][_0x201c08(0x2b6)]();const _0x5b0acb=$gameTemp[_0x201c08(0x13a)](),_0x58b9e7=_0x4ac47d[_0x201c08(0x2a2)];if(!_0x5b0acb)return;const _0x1e5c2c=BattleManager['_spriteset'];if(!_0x1e5c2c)return;_0x1e5c2c[_0x201c08(0x33d)](_0x4ac47d);if(_0x58b9e7)_0x5b0acb[_0x201c08(0x54b)](_0x201c08(0x413));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x6ef),_0x1fa9b5=>{const _0x58dfeb=_0x46ffcc;if(!SceneManager[_0x58dfeb(0xaf2)]())return;if(!Imported[_0x58dfeb(0x5fe)])return;VisuMZ['ConvertParams'](_0x1fa9b5,_0x1fa9b5),VisuMZ[_0x58dfeb(0x354)][_0x58dfeb(0x2b6)]();const _0x51c59e=$gameTemp[_0x58dfeb(0x13a)](),_0x41deb7=_0x1fa9b5[_0x58dfeb(0x2a2)];if(!_0x51c59e)return;const _0x4d9e8c=BattleManager[_0x58dfeb(0x787)];if(!_0x4d9e8c)return;_0x4d9e8c[_0x58dfeb(0x33d)](_0x1fa9b5);if(_0x41deb7)_0x51c59e[_0x58dfeb(0x54b)](_0x58dfeb(0x413));}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x3d3),_0x1b56c5=>{const _0xd72542=_0x46ffcc;if(!SceneManager[_0xd72542(0xaf2)]())return;if(!Imported[_0xd72542(0x5fe)])return;VisuMZ[_0xd72542(0x5ee)](_0x1b56c5,_0x1b56c5),VisuMZ[_0xd72542(0x354)]['CheckActSeqProjectileVersion']();const _0x777fb8=$gameTemp['getLastPluginCommandInterpreter'](),_0x1ba28b=_0x1b56c5[_0xd72542(0x2a2)];if(!_0x777fb8)return;const _0x2f1d62=BattleManager['_spriteset'];if(!_0x2f1d62)return;_0x2f1d62[_0xd72542(0x33d)](_0x1b56c5);if(_0x1ba28b)_0x777fb8['setWaitMode']('battleProjectiles');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb7c),_0x17f4d0=>{const _0x65c656=_0x46ffcc;if(!SceneManager[_0x65c656(0xaf2)]())return;if(!Imported[_0x65c656(0x1f8)])return;VisuMZ['ConvertParams'](_0x17f4d0,_0x17f4d0);const _0x5f58fd=$gameTemp[_0x65c656(0x13a)](),_0xc4b17e=_0x17f4d0['WaitForSkew'];if(!_0x5f58fd)return;$gameScreen[_0x65c656(0x399)](_0x17f4d0[_0x65c656(0xb4e)],_0x17f4d0[_0x65c656(0x119)],_0x17f4d0[_0x65c656(0xb58)],_0x17f4d0[_0x65c656(0xff)]);if(_0xc4b17e)_0x5f58fd[_0x65c656(0x54b)]('battleSkew');}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x9f9),_0x17554d=>{const _0x3caab0=_0x46ffcc;if(!SceneManager[_0x3caab0(0xaf2)]())return;if(!Imported[_0x3caab0(0x1f8)])return;VisuMZ[_0x3caab0(0x5ee)](_0x17554d,_0x17554d);const _0x39f91c=$gameTemp[_0x3caab0(0x13a)](),_0x54b38c=_0x17554d[_0x3caab0(0xaac)];if(!_0x39f91c)return;$gameScreen[_0x3caab0(0x399)](0x0,0x0,_0x17554d[_0x3caab0(0xb58)],_0x17554d['EasingType']);if(_0x54b38c)_0x39f91c[_0x3caab0(0x54b)](_0x3caab0(0x9da));}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x421),_0x3c3e42=>{const _0xdbf425=_0x46ffcc;if(!SceneManager[_0xdbf425(0xaf2)]())return;if(!Imported[_0xdbf425(0x1f8)])return;const _0x332bc1=$gameTemp[_0xdbf425(0x13a)]();if(!_0x332bc1)return;_0x332bc1[_0xdbf425(0x54b)](_0xdbf425(0x9da));}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xa7c),_0x38ae30=>{const _0x2f0af9=_0x46ffcc;if(!SceneManager[_0x2f0af9(0xaf2)]())return;VisuMZ[_0x2f0af9(0x5ee)](_0x38ae30,_0x38ae30);const _0x396306=$gameTemp[_0x2f0af9(0x13a)](),_0x2267c8=_0x38ae30[_0x2f0af9(0x2b5)],_0x1e1070=_0x38ae30[_0x2f0af9(0x937)];if(!_0x396306)return;BattleManager[_0x2f0af9(0x820)]=_0x2267c8,BattleManager['_target']=BattleManager[_0x2f0af9(0x8b1)]?BattleManager['_allTargets'][BattleManager['_targetIndex']]||null:null;if(window[_0x2f0af9(0x8da)])BattleManager[_0x2f0af9(0x12d)]();BattleManager[_0x2f0af9(0x8bd)]&&_0x1e1070['toUpperCase']()[_0x2f0af9(0xafd)]()!==_0x2f0af9(0xab2)&&_0x396306[_0x2f0af9(0x76c)]([_0x1e1070]);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x1af),_0x2e3a2a=>{const _0x57881f=_0x46ffcc;if(!SceneManager[_0x57881f(0xaf2)]())return;VisuMZ[_0x57881f(0x5ee)](_0x2e3a2a,_0x2e3a2a);const _0x315518=$gameTemp[_0x57881f(0x13a)](),_0x16b27b=_0x2e3a2a[_0x57881f(0x937)];if(!_0x315518)return;BattleManager[_0x57881f(0x820)]++,BattleManager[_0x57881f(0x8bd)]=BattleManager[_0x57881f(0x8b1)][BattleManager['_targetIndex']]||null;if(window[_0x57881f(0x8da)])BattleManager['updateBattleVariables']();BattleManager[_0x57881f(0x8bd)]&&_0x16b27b[_0x57881f(0x7b1)]()['trim']()!==_0x57881f(0xab2)&&_0x315518[_0x57881f(0x76c)]([_0x16b27b]);}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x5fa),_0xa3174f=>{const _0x276400=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x276400(0x5ee)](_0xa3174f,_0xa3174f);const _0x425425=$gameTemp[_0x276400(0x13a)](),_0x3f1561=_0xa3174f[_0x276400(0x937)];if(!_0x425425)return;BattleManager[_0x276400(0x820)]--,BattleManager[_0x276400(0x8bd)]=BattleManager[_0x276400(0x8b1)][BattleManager[_0x276400(0x820)]]||null;if(window[_0x276400(0x8da)])BattleManager[_0x276400(0x12d)]();BattleManager[_0x276400(0x8bd)]&&_0x3f1561[_0x276400(0x7b1)]()[_0x276400(0xafd)]()!==_0x276400(0xab2)&&_0x425425[_0x276400(0x76c)]([_0x3f1561]);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x780),_0x389004=>{const _0x377941=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x389004,_0x389004);const _0xf243be=$gameTemp[_0x377941(0x13a)](),_0x409bbc=_0x389004[_0x377941(0x37e)],_0xffdf1e=_0x389004[_0x377941(0x937)];if(!_0xf243be)return;const _0x1cd01f=BattleManager[_0x377941(0x820)];for(;;){BattleManager[_0x377941(0x820)]=Math['randomInt'](BattleManager[_0x377941(0x8b1)]['length']);if(!_0x409bbc)break;if(BattleManager[_0x377941(0x820)]!==_0x1cd01f)break;if(BattleManager[_0x377941(0x8b1)]['length']<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x377941(0x8bd)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(window['$target'])BattleManager[_0x377941(0x12d)]();BattleManager['_target']&&_0xffdf1e['toUpperCase']()['trim']()!==_0x377941(0xab2)&&_0xf243be[_0x377941(0x76c)]([_0xffdf1e]);}),PluginManager['registerCommand'](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x81e),_0x44896d=>{const _0x42d71f=_0x46ffcc;if(!SceneManager[_0x42d71f(0xaf2)]())return;if(!Imported[_0x42d71f(0xb7e)])return;if(!ConfigManager[_0x42d71f(0x6ba)])return;VisuMZ[_0x42d71f(0x5ee)](_0x44896d,_0x44896d);const _0x55d83e=VisuMZ[_0x42d71f(0x93a)](_0x44896d['Targets']);let _0x3995c7=_0x44896d[_0x42d71f(0x44c)]||'';for(const _0x430d27 of _0x55d83e){if(!_0x430d27)continue;_0x430d27['playBattleVoice'](_0x3995c7);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0xb62),_0x4420af=>{const _0x530ede=_0x46ffcc;if(!SceneManager[_0x530ede(0xaf2)]())return;if(!Imported[_0x530ede(0xb7e)])return;if(!ConfigManager[_0x530ede(0x6ba)])return;VisuMZ['ConvertParams'](_0x4420af,_0x4420af);const _0x5565a2=VisuMZ[_0x530ede(0x93a)](_0x4420af[_0x530ede(0xb78)]);let _0x5eefcc=(_0x4420af['VoiceLineType']||'')+(_0x4420af['Letter']||'');for(const _0x3ac6d3 of _0x5565a2){if(!_0x3ac6d3)continue;_0x3ac6d3['playBattleVoice'](_0x5eefcc);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x3fd),_0x43aac2=>{const _0x50aa74=_0x46ffcc;if(!SceneManager[_0x50aa74(0xaf2)]())return;VisuMZ[_0x50aa74(0x5ee)](_0x43aac2,_0x43aac2);const _0xc41114=VisuMZ['CreateActionSequenceTargets'](_0x43aac2['Targets']);for(const _0x10cb9b of _0xc41114){if(!_0x10cb9b)continue;if(!_0x10cb9b[_0x50aa74(0x738)]())continue;_0x10cb9b['clearActiveWeaponSlot']();}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],'ActSeq_Weapon_NextActiveWeapon',_0x20d693=>{const _0xd545e=_0x46ffcc;if(!SceneManager[_0xd545e(0xaf2)]())return;VisuMZ[_0xd545e(0x5ee)](_0x20d693,_0x20d693);const _0x20aec9=$gameTemp[_0xd545e(0x13a)]();let _0x343cff=![];const _0x266114=_0x20d693[_0xd545e(0x937)],_0x13fbd9=VisuMZ['CreateActionSequenceTargets'](_0x20d693[_0xd545e(0xb78)]);for(const _0x1fe89f of _0x13fbd9){if(!_0x1fe89f)continue;if(!_0x1fe89f[_0xd545e(0x738)]())continue;_0x1fe89f[_0xd545e(0x818)](),_0x1fe89f['weapons']()[_0xd545e(0x9bf)]>0x0?_0x343cff=!![]:_0x1fe89f['clearActiveWeaponSlot']();}_0x343cff&&_0x266114['toUpperCase']()['trim']()!==_0xd545e(0xab2)&&_0x20aec9[_0xd545e(0x76c)]([_0x266114]);}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x58d),_0x25e69a=>{const _0x23087e=_0x46ffcc;if(!SceneManager[_0x23087e(0xaf2)]())return;VisuMZ[_0x23087e(0x5ee)](_0x25e69a,_0x25e69a);let _0x1c4c57=_0x25e69a[_0x23087e(0x171)];_0x1c4c57--,_0x1c4c57=Math[_0x23087e(0x148)](_0x1c4c57,0x0);const _0x5cbd0d=VisuMZ[_0x23087e(0x93a)](_0x25e69a[_0x23087e(0xb78)]);for(const _0x54c991 of _0x5cbd0d){if(!_0x54c991)continue;if(!_0x54c991[_0x23087e(0x738)]())continue;_0x54c991[_0x23087e(0xac1)](_0x1c4c57);}}),PluginManager[_0x46ffcc(0x14e)](pluginData[_0x46ffcc(0x1a8)],_0x46ffcc(0x7ef),_0x2ef352=>{const _0x3788b1=_0x46ffcc;if(!SceneManager[_0x3788b1(0xaf2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3788b1(0x5ee)](_0x2ef352,_0x2ef352);const _0x502ae2=$gameTemp['getLastPluginCommandInterpreter'](),_0x5a8950=_0x2ef352[_0x3788b1(0x5e2)];if(!_0x502ae2)return;$gameScreen[_0x3788b1(0x16a)](_0x2ef352[_0x3788b1(0x1c7)],_0x2ef352[_0x3788b1(0xb58)],_0x2ef352['EasingType']);if(_0x5a8950)_0x502ae2['setWaitMode']('battleZoom');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Zoom_Reset',_0x2e4b2e=>{const _0x8cd9af=_0x46ffcc;if(!SceneManager[_0x8cd9af(0xaf2)]())return;if(!Imported[_0x8cd9af(0x1f8)])return;VisuMZ[_0x8cd9af(0x5ee)](_0x2e4b2e,_0x2e4b2e);const _0x233726=$gameTemp[_0x8cd9af(0x13a)](),_0x1e8ebe=_0x2e4b2e[_0x8cd9af(0x5e2)];if(!_0x233726)return;$gameScreen['setBattleZoom'](0x1,_0x2e4b2e['Duration'],_0x2e4b2e[_0x8cd9af(0xff)]);if(_0x1e8ebe)_0x233726[_0x8cd9af(0x54b)](_0x8cd9af(0xaf1));}),PluginManager['registerCommand'](pluginData['name'],_0x46ffcc(0x11b),_0x264539=>{const _0x583a81=_0x46ffcc;if(!SceneManager[_0x583a81(0xaf2)]())return;if(!Imported[_0x583a81(0x1f8)])return;const _0x4f0832=$gameTemp[_0x583a81(0x13a)]();if(!_0x4f0832)return;_0x4f0832['setWaitMode'](_0x583a81(0xaf1));}),VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x128)]=Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x593)],Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x593)]=function(){const _0x504bed=_0x46ffcc;this[_0x504bed(0x92a)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x504bed(0x919)](),this[_0x504bed(0x18d)](),VisuMZ['BattleCore'][_0x504bed(0x128)][_0x504bed(0x2e0)](this),this[_0x504bed(0x260)](),this[_0x504bed(0x699)](),this[_0x504bed(0x9be)](),this[_0x504bed(0x116)]();},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x260)]=function(){const _0x2918c5=_0x46ffcc;if(VisuMZ[_0x2918c5(0x3f0)])return;this[_0x2918c5(0xac6)](),this[_0x2918c5(0x70b)](),this[_0x2918c5(0xa21)]();},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x92a)]=function(){const _0x367f54=_0x46ffcc,_0x57c40a=$dataSystem[_0x367f54(0xfd)]['length'];for(let _0x2db873=0x0;_0x2db873<_0x57c40a;_0x2db873++){const _0x3d273d=$dataSystem[_0x367f54(0xdb)][_0x2db873];if(_0x3d273d)continue;$dataSystem[_0x367f54(0xdb)][_0x2db873]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x46ffcc(0x278)]=function(){const _0x373384=_0x46ffcc,_0x9d67f4=VisuMZ[_0x373384(0x354)][_0x373384(0x59e)];_0x9d67f4['Damage'][_0x373384(0x74e)]===undefined&&(_0x9d67f4['Damage'][_0x373384(0x74e)]=_0x373384(0x130)),_0x9d67f4[_0x373384(0x64a)]['SmoothImage']===undefined&&(_0x9d67f4[_0x373384(0x64a)][_0x373384(0x6fc)]=![]),_0x9d67f4[_0x373384(0xb8b)][_0x373384(0x6fc)]===undefined&&(_0x9d67f4[_0x373384(0xb8b)]['SmoothImage']=!![]),_0x9d67f4[_0x373384(0x64a)][_0x373384(0x648)]===undefined&&(_0x9d67f4['Actor'][_0x373384(0x648)]=![]),_0x9d67f4[_0x373384(0x64a)][_0x373384(0x607)]===undefined&&(_0x9d67f4[_0x373384(0x64a)][_0x373384(0x607)]=!![]);},VisuMZ[_0x46ffcc(0x4fa)]={},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x919)]=function(){const _0x84536d=_0x46ffcc;for(const _0x37d0e6 of VisuMZ[_0x84536d(0x354)]['Settings']['Damage'][_0x84536d(0x819)]){if(!_0x37d0e6)continue;const _0x59d130=_0x37d0e6[_0x84536d(0x5d9)]['toUpperCase']()[_0x84536d(0xafd)]();VisuMZ['DamageStyles'][_0x59d130]=_0x37d0e6;}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x217)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x18d)]=function(){const _0x190330=_0x46ffcc,_0x36ee7d=VisuMZ[_0x190330(0x354)][_0x190330(0x217)],_0x51f223=_0x190330(0xa39),_0x3410e9=[[_0x190330(0x17d),_0x190330(0x921)],[_0x190330(0x910),_0x190330(0x378)]],_0x5d5154=[['%1Apply%2JS',_0x190330(0x840)],[_0x190330(0x88b),_0x190330(0xbb2)]],_0x3a8649=[['',''],['AsUser',_0x190330(0xa91)],[_0x190330(0x6ce),_0x190330(0xb3b)]];for(const _0x4abc41 of _0x5d5154){for(const _0x1e382c of _0x3a8649){for(const _0x473f32 of _0x3410e9){const _0x422ee9=_0x4abc41[0x0][_0x190330(0x498)](_0x473f32[0x0],_0x1e382c[0x0]),_0x358679=_0x4abc41[0x1][_0x190330(0x498)](_0x473f32[0x1],_0x1e382c[0x1])[_0x190330(0xafd)](),_0x39795d=new RegExp(_0x51f223[_0x190330(0x498)](_0x358679),'i');_0x36ee7d[_0x422ee9]=_0x39795d;}}}const _0x37170f=[[_0x190330(0x2c7),_0x190330(0x675)],[_0x190330(0x96d),'JS\x20%1END\x20ACTION']];for(const _0x161061 of _0x37170f){for(const _0x59e82f of _0x3410e9){const _0x35f195=_0x161061[0x0]['format'](_0x59e82f[0x0]),_0x114b88=_0x161061[0x1][_0x190330(0x498)](_0x59e82f[0x1]),_0x53e75a=new RegExp(_0x51f223['format'](_0x114b88),'i');_0x36ee7d[_0x35f195]=_0x53e75a;}}const _0x464eb7=[[_0x190330(0x5ca),_0x190330(0x95c)],[_0x190330(0x705),_0x190330(0x1ba)],[_0x190330(0x428),_0x190330(0x5bb)],[_0x190330(0x619),_0x190330(0x9c2)],['EscapeSuccessJS',_0x190330(0x802)],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],[_0x190330(0x4b0),_0x190330(0x598)],['%1EndTurnJS','JS\x20%1END\x20TURN'],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0x35b2dc of _0x464eb7){for(const _0x3c6ab5 of _0x3410e9){const _0x4e7136=_0x35b2dc[0x0][_0x190330(0x498)](_0x3c6ab5[0x0]),_0x535010=_0x35b2dc[0x1][_0x190330(0x498)](_0x3c6ab5[0x1]),_0x3e19dc=new RegExp(_0x51f223[_0x190330(0x498)](_0x535010),'i');_0x36ee7d[_0x4e7136]=_0x3e19dc;}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x11bbdd=_0x46ffcc,_0x23fd2f=$dataSkills[_0x11bbdd(0x385)]($dataItems);for(const _0x24be0c of _0x23fd2f){if(!_0x24be0c)continue;VisuMZ[_0x11bbdd(0x354)][_0x11bbdd(0x439)](_0x24be0c);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x5137da=_0x46ffcc,_0x1f86a9=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x3ed47a of _0x1f86a9){if(!_0x3ed47a)continue;VisuMZ[_0x5137da(0x354)][_0x5137da(0xa50)](_0x3ed47a),_0x3ed47a['autoRemovalTiming']!==undefined&&VisuMZ[_0x5137da(0x354)][_0x5137da(0x71f)](_0x3ed47a);}},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0x699)]=function(){const _0x48fdf5=_0x46ffcc,_0x51b6d1=VisuMZ[_0x48fdf5(0x354)]['Settings'][_0x48fdf5(0xac4)][_0x48fdf5(0x180)],_0x87a4d0=[];for(const _0x317b13 of _0x51b6d1){const _0x504817=$dataTroops[_0x317b13];if(_0x504817)_0x87a4d0[_0x48fdf5(0x40a)](JsonEx['makeDeepCopy'](_0x504817));}for(const _0x55689b of $dataTroops){if(!_0x55689b)continue;for(const _0x5ecfba of _0x87a4d0){if(_0x5ecfba['id']===_0x55689b['id'])continue;_0x55689b[_0x48fdf5(0x170)]=_0x55689b[_0x48fdf5(0x170)][_0x48fdf5(0x385)](_0x5ecfba['pages']);}}},Scene_Boot['prototype'][_0x46ffcc(0x9be)]=function(){const _0x4ee75d=_0x46ffcc,_0x34539a=VisuMZ[_0x4ee75d(0x354)]['Settings']['Mechanics'];if(_0x34539a['BattleStartEvent']>0x0&&$dataCommonEvents[_0x34539a[_0x4ee75d(0x4ba)]]){const _0x3c2db0=$dataCommonEvents[_0x34539a[_0x4ee75d(0x4ba)]],_0x5b4d3a=_0x3c2db0[_0x4ee75d(0x497)][_0x4ee75d(0x9bf)]-0x2,_0x53a8d7=_0x3c2db0[_0x4ee75d(0x497)][_0x5b4d3a];if(_0x53a8d7&&_0x53a8d7['code']!==0xe6){const _0x1f8a60={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x19d0ca=_0x3c2db0[_0x4ee75d(0x497)][_0x4ee75d(0x8c0)]();_0x3c2db0[_0x4ee75d(0x497)][_0x4ee75d(0x64f)](_0x1f8a60),_0x3c2db0[_0x4ee75d(0x497)]['unshift'](_0x19d0ca);}}},Scene_Boot['prototype'][_0x46ffcc(0x116)]=function(){const _0x44a8fd=_0x46ffcc;VisuMZ[_0x44a8fd(0x354)][_0x44a8fd(0xa3a)](),VisuMZ[_0x44a8fd(0x354)][_0x44a8fd(0x322)]($dataSkills),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataItems);},VisuMZ['BattleCore'][_0x46ffcc(0xa3a)]=function(){const _0x41513b=_0x46ffcc;VisuMZ[_0x41513b(0x354)]['_commonEventKey']={};for(const _0x5557c0 of $dataCommonEvents){if(!_0x5557c0)continue;if(_0x5557c0['name']['match'](/\[(.*)\]/i)){let _0x44acd4=String(RegExp['$1'])[_0x41513b(0x5c1)](/,/g,'')[_0x41513b(0x7b1)]()[_0x41513b(0xafd)]();VisuMZ[_0x41513b(0x354)][_0x41513b(0x9bb)][_0x44acd4]=_0x5557c0['id'];}}},VisuMZ[_0x46ffcc(0x354)]['BindCommonEventKeysForGroup']=function(_0x1e7a0f){const _0x4d603a=_0x46ffcc;for(const _0x10d025 of _0x1e7a0f){if(!_0x10d025)continue;VisuMZ[_0x4d603a(0x354)]['BindCommonEventKeysForObj'](_0x10d025);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2c3)]=function(_0x5ebb23){const _0x2cae89=_0x46ffcc;if(!_0x5ebb23)return;if(!_0x5ebb23[_0x2cae89(0x23a)])return;VisuMZ[_0x2cae89(0x354)][_0x2cae89(0x9bb)]=VisuMZ[_0x2cae89(0x354)]['_commonEventKey']||{};const _0x5c170f=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x18f5b9=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4f7c07=[];const _0x1067b9=_0x5ebb23[_0x2cae89(0x8fd)][_0x2cae89(0xe0)](_0x5c170f);if(_0x1067b9){for(const _0x1800ac of _0x1067b9){_0x1800ac['match'](_0x5c170f);const _0x1bea51=String(RegExp['$1'])[_0x2cae89(0x4f9)](',')[_0x2cae89(0x6cd)](_0x11deaa=>String(_0x11deaa)[_0x2cae89(0x7b1)]()[_0x2cae89(0xafd)]());_0x4f7c07=_0x4f7c07[_0x2cae89(0x385)](_0x1bea51);}!_0x5ebb23[_0x2cae89(0x8fd)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5ebb23[_0x2cae89(0x8fd)]+=_0x2cae89(0x6e3));;}if(_0x5ebb23[_0x2cae89(0x8fd)][_0x2cae89(0xe0)](_0x18f5b9)){const _0x2f9d9f=String(RegExp['$1'])[_0x2cae89(0x4f9)](/[\r\n]+/)[_0x2cae89(0x6cd)](_0x5d55ba=>String(_0x5d55ba)[_0x2cae89(0x7b1)]()[_0x2cae89(0xafd)]());_0x4f7c07=_0x4f7c07[_0x2cae89(0x385)](_0x2f9d9f);!_0x5ebb23[_0x2cae89(0x8fd)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5ebb23[_0x2cae89(0x8fd)]+=_0x2cae89(0x6e3));;}for(const _0x2fc91a of _0x4f7c07){if(VisuMZ[_0x2cae89(0x354)][_0x2cae89(0x9bb)][_0x2fc91a]){const _0x25b3f4=VisuMZ[_0x2cae89(0x354)][_0x2cae89(0x9bb)][_0x2fc91a],_0x5d47aa={'code':0x2c,'dataId':_0x25b3f4,'value1':0x1,'value2':0x0};_0x5ebb23[_0x2cae89(0x23a)][_0x2cae89(0x40a)](_0x5d47aa);}}},Scene_Boot[_0x46ffcc(0x9c1)][_0x46ffcc(0xa21)]=function(){const _0xa7218a=_0x46ffcc,_0x407d1f=$dataSkills[_0xa7218a(0x385)]($dataItems);for(const _0x4564eb of _0x407d1f){if(!_0x4564eb)continue;VisuMZ[_0xa7218a(0x354)]['Parse_Notetags_Targets'](_0x4564eb);}},VisuMZ['BattleCore']['ParseActorNotetags']=VisuMZ[_0x46ffcc(0x3c8)],VisuMZ[_0x46ffcc(0x3c8)]=function(_0x3a10b1){const _0x4844b6=_0x46ffcc;VisuMZ[_0x4844b6(0x354)][_0x4844b6(0x3c8)]&&VisuMZ[_0x4844b6(0x354)][_0x4844b6(0x3c8)][_0x4844b6(0x2e0)](this,_0x3a10b1),VisuMZ[_0x4844b6(0x354)][_0x4844b6(0xa50)](_0x3a10b1);},VisuMZ['BattleCore'][_0x46ffcc(0xafa)]=VisuMZ['ParseClassNotetags'],VisuMZ['ParseClassNotetags']=function(_0x2dccd1){const _0x28ae52=_0x46ffcc;VisuMZ[_0x28ae52(0x354)][_0x28ae52(0xafa)]&&VisuMZ[_0x28ae52(0x354)][_0x28ae52(0xafa)][_0x28ae52(0x2e0)](this,_0x2dccd1),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2dccd1);},VisuMZ['BattleCore'][_0x46ffcc(0x505)]=VisuMZ[_0x46ffcc(0x505)],VisuMZ[_0x46ffcc(0x505)]=function(_0x1855cf){const _0x13b921=_0x46ffcc;VisuMZ[_0x13b921(0x354)][_0x13b921(0x505)]&&VisuMZ[_0x13b921(0x354)]['ParseSkillNotetags'][_0x13b921(0x2e0)](this,_0x1855cf),VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x1855cf),VisuMZ['BattleCore'][_0x13b921(0xa0f)](_0x1855cf);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ[_0x46ffcc(0x922)],VisuMZ[_0x46ffcc(0x922)]=function(_0x5314be){const _0x1d8f43=_0x46ffcc;VisuMZ[_0x1d8f43(0x354)][_0x1d8f43(0x922)]&&VisuMZ[_0x1d8f43(0x354)]['ParseItemNotetags']['call'](this,_0x5314be),VisuMZ[_0x1d8f43(0x354)][_0x1d8f43(0x439)](_0x5314be),VisuMZ[_0x1d8f43(0x354)][_0x1d8f43(0xa0f)](_0x5314be);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x333)]=VisuMZ[_0x46ffcc(0x333)],VisuMZ[_0x46ffcc(0x333)]=function(_0x565a79){const _0x424fd1=_0x46ffcc;VisuMZ['BattleCore'][_0x424fd1(0x333)]&&VisuMZ[_0x424fd1(0x354)][_0x424fd1(0x333)]['call'](this,_0x565a79),VisuMZ['BattleCore'][_0x424fd1(0xa50)](_0x565a79);},VisuMZ['BattleCore']['ParseArmorNotetags']=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x46ffcc(0x5f9)]=function(_0x1a43ad){const _0x4f7c5d=_0x46ffcc;VisuMZ[_0x4f7c5d(0x354)][_0x4f7c5d(0x5f9)]&&VisuMZ[_0x4f7c5d(0x354)][_0x4f7c5d(0x5f9)][_0x4f7c5d(0x2e0)](this,_0x1a43ad),VisuMZ[_0x4f7c5d(0x354)][_0x4f7c5d(0xa50)](_0x1a43ad);},VisuMZ['BattleCore'][_0x46ffcc(0x999)]=VisuMZ[_0x46ffcc(0x999)],VisuMZ[_0x46ffcc(0x999)]=function(_0x597f31){const _0x4296e9=_0x46ffcc;VisuMZ[_0x4296e9(0x354)]['ParseEnemyNotetags']&&VisuMZ[_0x4296e9(0x354)][_0x4296e9(0x999)][_0x4296e9(0x2e0)](this,_0x597f31),VisuMZ[_0x4296e9(0x354)][_0x4296e9(0xa50)](_0x597f31);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xad9)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x4fddd6){const _0x2d031b=_0x46ffcc;VisuMZ[_0x2d031b(0x354)][_0x2d031b(0xad9)]&&VisuMZ['BattleCore'][_0x2d031b(0xad9)][_0x2d031b(0x2e0)](this,_0x4fddd6),VisuMZ[_0x2d031b(0x354)][_0x2d031b(0xa50)](_0x4fddd6),VisuMZ[_0x2d031b(0x354)]['Parse_Notetags_HelpDescription'](_0x4fddd6);},VisuMZ[_0x46ffcc(0x354)]['Parse_Notetags_Action']=function(_0x2a4ebb){const _0x31de51=_0x46ffcc,_0x57578b=[_0x31de51(0x110),_0x31de51(0x8d3),_0x31de51(0x516),_0x31de51(0x242),_0x31de51(0x4bf),_0x31de51(0x2da),_0x31de51(0xa22),_0x31de51(0x943)];for(const _0x3e8771 of _0x57578b){VisuMZ[_0x31de51(0x354)][_0x31de51(0x7ff)](_0x2a4ebb,_0x3e8771);}const _0x467c8d=_0x2a4ebb[_0x31de51(0x8fd)];_0x467c8d[_0x31de51(0xe0)](/<ALWAYS CRITICAL/i)&&(_0x2a4ebb[_0x31de51(0x6be)][_0x31de51(0x3c7)]=!![]),_0x467c8d[_0x31de51(0xe0)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x2a4ebb['repeats']=Math[_0x31de51(0x148)](0x1,Number(RegExp['$1']))),_0x467c8d[_0x31de51(0xe0)](/<TARGET:[ ](.*)>/i)&&(_0x2a4ebb[_0x31de51(0x64e)]=String(RegExp['$1'])[_0x31de51(0x7b1)]()['trim']());},VisuMZ['BattleCore'][_0x46ffcc(0xa50)]=function(_0x379369){const _0x255b27=_0x46ffcc,_0x2d328a=['PreApplyAsUserJS',_0x255b27(0xad7),_0x255b27(0x9dc),_0x255b27(0xb69),_0x255b27(0x95b),_0x255b27(0x836),_0x255b27(0x40f),_0x255b27(0x20c),_0x255b27(0x4bf),_0x255b27(0x2da),_0x255b27(0xa22),_0x255b27(0x943),_0x255b27(0x412),_0x255b27(0x81d),'PreEndBattleJS','PostEndBattleJS',_0x255b27(0x428),_0x255b27(0x619),_0x255b27(0x1e9),_0x255b27(0x7c0),_0x255b27(0x949),_0x255b27(0x91c),_0x255b27(0x15b),_0x255b27(0x90b),_0x255b27(0x495),_0x255b27(0xb5c)];for(const _0x19e71d of _0x2d328a){VisuMZ[_0x255b27(0x354)][_0x255b27(0x7ff)](_0x379369,_0x19e71d);}const _0x4f4010=['jsAccuracy','jsAccuracyAsUser',_0x255b27(0xbd0),_0x255b27(0x74f),_0x255b27(0x2db)];for(const _0x433f83 of _0x4f4010){VisuMZ[_0x255b27(0x354)][_0x255b27(0x969)](_0x379369,_0x433f83);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xa0f)]=function(_0x11da84){const _0x3b38bc=_0x46ffcc,_0x34a357=_0x11da84[_0x3b38bc(0x8fd)];if(_0x34a357[_0x3b38bc(0xe0)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x448444=String(RegExp['$1']),_0xae9815=VisuMZ[_0x3b38bc(0x354)][_0x3b38bc(0x4be)](_0x11da84,_0x3b38bc(0xb78));VisuMZ[_0x3b38bc(0x354)][_0x3b38bc(0x88d)](_0x448444,_0xae9815);}if(_0x34a357[_0x3b38bc(0xe0)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x35ad0e=String(RegExp['$1']),_0xff6a9e=VisuMZ[_0x3b38bc(0x354)][_0x3b38bc(0x4be)](_0x11da84,_0x3b38bc(0x9d3));VisuMZ['BattleCore'][_0x3b38bc(0xe2)](_0x35ad0e,_0xff6a9e);}},VisuMZ[_0x46ffcc(0x354)]['JS']={},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7ff)]=function(_0x26f4c6,_0x404bed){const _0x3641e7=_0x46ffcc,_0x27a431=_0x26f4c6[_0x3641e7(0x8fd)];if(_0x27a431[_0x3641e7(0xe0)](VisuMZ[_0x3641e7(0x354)][_0x3641e7(0x217)][_0x404bed])){const _0x339e1c=RegExp['$1'],_0x583ab2=_0x3641e7(0xa0e)['format'](_0x339e1c),_0x4cc33a=VisuMZ[_0x3641e7(0x354)][_0x3641e7(0x4be)](_0x26f4c6,_0x404bed);VisuMZ[_0x3641e7(0x354)]['JS'][_0x4cc33a]=new Function(_0x583ab2);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x4be)]=function(_0x1b67d7,_0x42712c){const _0x41de3f=_0x46ffcc;if(VisuMZ[_0x41de3f(0x4be)])return VisuMZ[_0x41de3f(0x4be)](_0x1b67d7,_0x42712c);let _0x479c1f='';if($dataActors['includes'](_0x1b67d7))_0x479c1f='Actor-%1-%2'[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataClasses[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f='Class-%1-%2'[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataSkills[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f=_0x41de3f(0xa9d)[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataItems[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f=_0x41de3f(0x33b)[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataWeapons[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f=_0x41de3f(0xaed)[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataArmors[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f='Armor-%1-%2'[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);if($dataEnemies[_0x41de3f(0x6a2)](_0x1b67d7))_0x479c1f=_0x41de3f(0x925)['format'](_0x1b67d7['id'],_0x42712c);if($dataStates['includes'](_0x1b67d7))_0x479c1f=_0x41de3f(0x992)[_0x41de3f(0x498)](_0x1b67d7['id'],_0x42712c);return _0x479c1f;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x88d)]=function(_0x4a3b66,_0x2750ca){const _0x2c7cf0=_0x46ffcc,_0x1f0358=_0x2c7cf0(0xa4b)[_0x2c7cf0(0x498)](_0x4a3b66);VisuMZ['BattleCore']['JS'][_0x2750ca]=new Function(_0x1f0358);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xe2)]=function(_0x29456e,_0x385091){const _0x2abc0f=_0x46ffcc,_0xd345b2='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x2abc0f(0x498)](_0x29456e);VisuMZ['BattleCore']['JS'][_0x385091]=new Function(_0xd345b2);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x969)]=function(_0x4da64c,_0x2430f1){const _0x3be361=_0x46ffcc,_0x220623=_0x4da64c[_0x3be361(0x8fd)];if(_0x220623[_0x3be361(0xe0)](VisuMZ[_0x3be361(0x354)][_0x3be361(0x217)][_0x2430f1])){const _0x2fe320=RegExp['$1'],_0x471923='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x3be361(0x498)](_0x2fe320),_0x2ca944=VisuMZ['BattleCore'][_0x3be361(0x4be)](_0x4da64c,_0x2430f1);VisuMZ[_0x3be361(0x354)]['JS'][_0x2ca944]=new Function(_0x471923);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x71f)]=function(_0x633083){const _0x5e7d6b=_0x46ffcc;_0x633083['description']='-';const _0x2715b6=_0x633083[_0x5e7d6b(0x8fd)];_0x2715b6[_0x5e7d6b(0xe0)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x633083[_0x5e7d6b(0x311)]=String(RegExp['$1'])[_0x5e7d6b(0xafd)]()),_0x2715b6[_0x5e7d6b(0xe0)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x633083[_0x5e7d6b(0x8f3)]=String(RegExp['$1'])[_0x5e7d6b(0xafd)]()),_0x2715b6[_0x5e7d6b(0xe0)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x633083[_0x5e7d6b(0xb71)]=!![]);},TextManager[_0x46ffcc(0x381)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x4eb)][_0x46ffcc(0x660)],TextManager[_0x46ffcc(0x501)]=VisuMZ['BattleCore']['Settings'][_0x46ffcc(0x6c1)][_0x46ffcc(0xb48)],TextManager[_0x46ffcc(0x36d)]=VisuMZ['BattleCore'][_0x46ffcc(0x59e)]['AutoBattle'][_0x46ffcc(0x860)],TextManager[_0x46ffcc(0x8b5)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0xa97)]['Name'],ColorManager[_0x46ffcc(0x11e)]=function(_0x18bf5a){const _0x2f0744=_0x46ffcc;return _0x18bf5a=String(_0x18bf5a),_0x18bf5a[_0x2f0744(0xe0)](/#(.*)/i)?_0x2f0744(0xf4)[_0x2f0744(0x498)](String(RegExp['$1'])):this[_0x2f0744(0x156)](Number(_0x18bf5a));},DataManager[_0x46ffcc(0x168)]=function(_0x36c054){const _0x1fcfe8=_0x46ffcc;if(_0x36c054[_0x1fcfe8(0x8fd)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x490c7c=String(RegExp['$1'])['toUpperCase']()[_0x1fcfe8(0xafd)]();if(_0x490c7c===_0x1fcfe8(0x833))return _0x1fcfe8(0x833);if(VisuMZ[_0x1fcfe8(0x4fa)][_0x490c7c])return _0x490c7c;}const _0x2099fd=VisuMZ[_0x1fcfe8(0x354)][_0x1fcfe8(0x59e)][_0x1fcfe8(0x896)][_0x1fcfe8(0x590)][_0x1fcfe8(0x7b1)]()[_0x1fcfe8(0xafd)]();if(VisuMZ[_0x1fcfe8(0x4fa)][_0x2099fd])return _0x2099fd;return _0x1fcfe8(0x833);},DataManager[_0x46ffcc(0x59b)]=function(_0x3516bc){const _0x267e65=_0x46ffcc;_0x3516bc=_0x3516bc[_0x267e65(0x7b1)]()['trim'](),this['_stypeIDs']=this[_0x267e65(0x478)]||{};if(this[_0x267e65(0x478)][_0x3516bc])return this[_0x267e65(0x478)][_0x3516bc];for(let _0x24ddd=0x1;_0x24ddd<0x64;_0x24ddd++){if(!$dataSystem['skillTypes'][_0x24ddd])continue;let _0x1d8e42=$dataSystem[_0x267e65(0xad8)][_0x24ddd][_0x267e65(0x7b1)]()[_0x267e65(0xafd)]();_0x1d8e42=_0x1d8e42[_0x267e65(0x5c1)](/\x1I\[(\d+)\]/gi,''),_0x1d8e42=_0x1d8e42[_0x267e65(0x5c1)](/\\I\[(\d+)\]/gi,''),this[_0x267e65(0x478)][_0x1d8e42]=_0x24ddd;}return this['_stypeIDs'][_0x3516bc]||0x0;},DataManager[_0x46ffcc(0xb59)]=function(_0x5afbe0){const _0x2bb95a=_0x46ffcc;_0x5afbe0=_0x5afbe0['toUpperCase']()[_0x2bb95a(0xafd)](),this[_0x2bb95a(0x867)]=this[_0x2bb95a(0x867)]||{};if(this[_0x2bb95a(0x867)][_0x5afbe0])return this[_0x2bb95a(0x867)][_0x5afbe0];for(const _0x2f2de9 of $dataSkills){if(!_0x2f2de9)continue;this[_0x2bb95a(0x867)][_0x2f2de9[_0x2bb95a(0x1a8)]['toUpperCase']()[_0x2bb95a(0xafd)]()]=_0x2f2de9['id'];}return this[_0x2bb95a(0x867)][_0x5afbe0]||0x0;},DataManager[_0x46ffcc(0x6a0)]=function(_0x4f89c4){const _0x4d874d=_0x46ffcc;_0x4f89c4=_0x4f89c4[_0x4d874d(0x7b1)]()[_0x4d874d(0xafd)](),this[_0x4d874d(0xadb)]=this[_0x4d874d(0xadb)]||{};if(this[_0x4d874d(0xadb)][_0x4f89c4])return this['_enemyIDs'][_0x4f89c4];for(const _0x1c009f of $dataEnemies){if(!_0x1c009f)continue;this[_0x4d874d(0xadb)][_0x1c009f['name'][_0x4d874d(0x7b1)]()[_0x4d874d(0xafd)]()]=_0x1c009f['id'];}return this[_0x4d874d(0xadb)][_0x4f89c4]||0x0;},DataManager['getWtypeIdWithName']=function(_0x40ee5e){const _0x24eb12=_0x46ffcc;_0x40ee5e=_0x40ee5e[_0x24eb12(0x7b1)]()[_0x24eb12(0xafd)](),this['_wtypeIDs']=this[_0x24eb12(0x63c)]||{};if(this[_0x24eb12(0x63c)][_0x40ee5e])return this['_wtypeIDs'][_0x40ee5e];for(let _0x3d7e07=0x1;_0x3d7e07<0x64;_0x3d7e07++){if(!$dataSystem[_0x24eb12(0xfd)][_0x3d7e07])continue;let _0x198aeb=$dataSystem[_0x24eb12(0xfd)][_0x3d7e07][_0x24eb12(0x7b1)]()[_0x24eb12(0xafd)]();_0x198aeb=_0x198aeb['replace'](/\x1I\[(\d+)\]/gi,''),_0x198aeb=_0x198aeb[_0x24eb12(0x5c1)](/\\I\[(\d+)\]/gi,''),this[_0x24eb12(0x63c)][_0x198aeb]=_0x3d7e07;}return this[_0x24eb12(0x63c)][_0x24eb12(0x1ff)]=0x0,this['_wtypeIDs'][_0x40ee5e]||0x0;},DataManager[_0x46ffcc(0x3fc)]=function(_0x156cb7){const _0x5a51d4=_0x46ffcc,_0x12ff68=_0x5a51d4(0x2de);let _0x2377f5=_0x156cb7['iconIndex'],_0x41ac5b=_0x156cb7[_0x5a51d4(0x1a8)];const _0x109570=_0x156cb7['note'];return _0x109570[_0x5a51d4(0xe0)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2377f5=Number(RegExp['$1'])),_0x109570[_0x5a51d4(0xe0)](/<DISPLAY TEXT: (.*)>/i)&&(_0x41ac5b=String(RegExp['$1'])),_0x12ff68[_0x5a51d4(0x498)](_0x2377f5,_0x41ac5b);},DataManager[_0x46ffcc(0xa0d)]=function(_0x592cf4){const _0x9918e9=_0x46ffcc;return _0x592cf4[_0x9918e9(0x8fd)][_0x9918e9(0xe0)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x592cf4[_0x9918e9(0x1a8)];},DataManager[_0x46ffcc(0x9cf)]=function(_0x30f333){const _0x2e2826=_0x46ffcc;return _0x30f333['note'][_0x2e2826(0xe0)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x30f333[_0x2e2826(0x216)];},DataManager['swapEnemyIDs']=function(_0x4b9a94){const _0x520764=_0x46ffcc,_0x5b13ee=$dataEnemies[_0x4b9a94];if(_0x5b13ee){if(_0x5b13ee[_0x520764(0x8fd)][_0x520764(0xe0)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x306bd3=String(RegExp['$1'])[_0x520764(0x4f9)](/[\r\n]+/)['remove'](''),_0x5cafcb=this[_0x520764(0x842)](_0x306bd3);_0x4b9a94=this['getEnemyIdWithName'](_0x5cafcb)||_0x4b9a94,_0x4b9a94=DataManager[_0x520764(0x4e5)](_0x4b9a94);}}return _0x4b9a94;},DataManager[_0x46ffcc(0x842)]=function(_0x42e59a){const _0x444323=_0x46ffcc;let _0x37c6a4=0x0;const _0x5c9a7d={};for(const _0x23f289 of _0x42e59a){if(_0x23f289[_0x444323(0xe0)](/(.*):[ ](\d+)/i)){const _0x56be6c=String(RegExp['$1'])[_0x444323(0xafd)](),_0x92bd91=Number(RegExp['$2']);_0x5c9a7d[_0x56be6c]=_0x92bd91,_0x37c6a4+=_0x92bd91;}else{if(_0x23f289[_0x444323(0xe0)](/(.*):[ ](\d+\.?\d+)/i)){const _0x129362=String(RegExp['$1'])['trim'](),_0x227e1e=Number(RegExp['$2']);_0x5c9a7d[_0x129362]=_0x227e1e,_0x37c6a4+=_0x227e1e;}else _0x23f289!==''&&(_0x5c9a7d[_0x23f289]=0x1,_0x37c6a4++);}}if(_0x37c6a4<=0x0)return'';let _0x419f7f=Math[_0x444323(0x7a6)]()*_0x37c6a4;for(const _0x2dc2a2 in _0x5c9a7d){_0x419f7f-=_0x5c9a7d[_0x2dc2a2];if(_0x419f7f<=0x0)return _0x2dc2a2;}return'';},DataManager[_0x46ffcc(0x3bf)]=function(_0x296e37){const _0x23be90=_0x46ffcc;if(!_0x296e37)return![];if(!VisuMZ['BattleCore']['Settings']['ActionSequence'][_0x23be90(0x843)])return![];if(_0x296e37['note'][_0x23be90(0xe0)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x296e37['note'][_0x23be90(0xe0)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x512a0d of _0x296e37[_0x23be90(0x23a)]){if(!_0x512a0d)continue;if(_0x512a0d[_0x23be90(0xb27)]===Game_Action[_0x23be90(0xb28)])return!![];}return![];},DataManager[_0x46ffcc(0x34e)]=function(_0x30a72f){const _0x49f0c7=_0x46ffcc,_0x41f19f=$dataTroops[_0x30a72f];if(!_0x41f19f)return'';let _0x37234b='';_0x37234b+=_0x41f19f[_0x49f0c7(0x1a8)];for(const _0x1fbbeb of _0x41f19f['pages']){for(const _0x45fcd7 of _0x1fbbeb[_0x49f0c7(0x497)]){[0x6c,0x198]['includes'](_0x45fcd7[_0x49f0c7(0xb27)])&&(_0x37234b+='\x0a',_0x37234b+=_0x45fcd7['parameters'][0x0]);}}return _0x37234b;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x46ffcc(0x9d5)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager['visualHpGauge']=ConfigManager[_0x46ffcc(0x8b5)]??!![],VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x559)]=ConfigManager[_0x46ffcc(0x9a8)],ConfigManager[_0x46ffcc(0x9a8)]=function(){const _0x32766a=_0x46ffcc,_0x307d9d=VisuMZ[_0x32766a(0x354)][_0x32766a(0x559)]['call'](this);return _0x307d9d[_0x32766a(0xa12)]=this['autoBattleAtStart'],_0x307d9d[_0x32766a(0x9d5)]=this[_0x32766a(0x9d5)],_0x307d9d['visualHpGauge']=this[_0x32766a(0x8b5)],_0x307d9d;},VisuMZ['BattleCore'][_0x46ffcc(0x78b)]=ConfigManager['applyData'],ConfigManager[_0x46ffcc(0x294)]=function(_0x4f1a18){const _0x385923=_0x46ffcc;VisuMZ[_0x385923(0x354)][_0x385923(0x78b)]['call'](this,_0x4f1a18),_0x385923(0xa12)in _0x4f1a18?this[_0x385923(0xa12)]=_0x4f1a18[_0x385923(0xa12)]:this[_0x385923(0xa12)]=![],_0x385923(0x9d5)in _0x4f1a18?this[_0x385923(0x9d5)]=_0x4f1a18[_0x385923(0x9d5)]:this[_0x385923(0x9d5)]=![],'visualHpGauge'in _0x4f1a18?this[_0x385923(0x8b5)]=_0x4f1a18[_0x385923(0x8b5)]:this[_0x385923(0x8b5)]=!![];},ImageManager[_0x46ffcc(0x8f5)]=ImageManager[_0x46ffcc(0x8f5)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x46ffcc(0x4e1)]||0x6,VisuMZ['BattleCore']['BattleManager_setup']=BattleManager['setup'],BattleManager[_0x46ffcc(0xb64)]=function(_0x13710d,_0x4a5933,_0x3828cc){const _0x152d5b=_0x46ffcc;VisuMZ['BattleCore'][_0x152d5b(0x4c0)][_0x152d5b(0x2e0)](this,_0x13710d,_0x4a5933,_0x3828cc),this[_0x152d5b(0x1e0)]={};},VisuMZ[_0x46ffcc(0x354)]['BattleManager_initMembers']=BattleManager['initMembers'],BattleManager[_0x46ffcc(0x1d8)]=function(){const _0x9fad37=_0x46ffcc;VisuMZ['BattleCore'][_0x9fad37(0x678)]['call'](this),this[_0x9fad37(0xaeb)]=[];},BattleManager[_0x46ffcc(0x12d)]=function(){const _0x4cd9cf=_0x46ffcc;$subject=this['_subject'],$targets=this[_0x4cd9cf(0x2ab)],$target=this[_0x4cd9cf(0x8bd)]||this['_targets'][this[_0x4cd9cf(0x820)]||0x0];},BattleManager[_0x46ffcc(0x35e)]=function(){const _0x25bcfa=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;const _0x12eae7=SceneManager['_scene'][_0x25bcfa(0x7d9)];if(_0x12eae7)_0x12eae7['requestRefresh']();},BattleManager[_0x46ffcc(0x16d)]=function(){const _0x36d6f9=_0x46ffcc;if(BattleManager['isTpb']())return'TPB';return _0x36d6f9(0x6d4);},BattleManager[_0x46ffcc(0x519)]=function(_0x2c7f27){const _0xe46ff9=_0x46ffcc;return _0x2c7f27=_0x2c7f27[_0xe46ff9(0x7b1)]()[_0xe46ff9(0xafd)](),this[_0xe46ff9(0x16d)]()===_0x2c7f27;},BattleManager[_0x46ffcc(0x8d0)]=function(){const _0x23bdac=_0x46ffcc;return this[_0x23bdac(0x519)](_0x23bdac(0x6d4));},BattleManager[_0x46ffcc(0xa69)]=function(){const _0x52fc9a=_0x46ffcc;return this[_0x52fc9a(0x8d0)]();},BattleManager['isTickBased']=function(){return!this['isTurnBased']();},BattleManager[_0x46ffcc(0x697)]=function(){const _0x301f75=_0x46ffcc;return!this[_0x301f75(0xa69)]()&&!this[_0x301f75(0x8f8)]();},BattleManager[_0x46ffcc(0xc7)]=function(_0x3efdfb){const _0x711257=_0x46ffcc;this[_0x711257(0x1e0)]=this['_battlerKeyCache']||{};if(this[_0x711257(0x1e0)][_0x3efdfb]!==undefined)return this['_battlerKeyCache'][_0x3efdfb];this[_0x711257(0x1e0)][_0x3efdfb]=null;const _0x15764b=this[_0x711257(0x93e)](),_0xb056a0=_0x15764b[_0x711257(0x493)](_0x24de37=>_0x24de37[_0x711257(0x43f)]()===_0x3efdfb);if(_0xb056a0)this[_0x711257(0x1e0)][_0x3efdfb]=_0xb056a0;return this['_battlerKeyCache'][_0x3efdfb];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x43f)]=function(){const _0x324788=_0x46ffcc;return _0x324788(0x6a5)[_0x324788(0x498)](this[_0x324788(0x738)]()?_0x324788(0xb81):_0x324788(0xa55),this[_0x324788(0x1a8)]()+'-'+(this[_0x324788(0x738)]()?this[_0x324788(0xd4)]():this[_0x324788(0x29e)]()));},Game_Action['prototype']['setTargetBattlerKey']=function(_0x5ee446){const _0x40f4aa=_0x46ffcc;if(this[_0x40f4aa(0x277)]!=='')return;typeof _0x5ee446===_0x40f4aa(0x575)?this[_0x40f4aa(0x277)]=_0x5ee446['toLowerCase']()[_0x40f4aa(0xafd)]():this[_0x40f4aa(0x277)]=_0x5ee446[_0x40f4aa(0x43f)]();},Game_Action['prototype'][_0x46ffcc(0x6ea)]=function(){const _0x52a061=_0x46ffcc;return[this[_0x52a061(0x856)]()];},Game_Action[_0x46ffcc(0x9c1)]['getSpecificBattlerKeyTarget']=function(){const _0x4ece47=_0x46ffcc,_0x12d378=this[_0x4ece47(0x277)]||'',_0x622e22=BattleManager[_0x4ece47(0xc7)](_0x12d378);if(!_0x622e22)return this['getBattlerKeyTargetReplacement']();if(!_0x622e22[_0x4ece47(0x615)]())return this[_0x4ece47(0x684)]();return _0x622e22;},Game_Action['prototype']['getBattlerKeyTargetReplacement']=function(){const _0x42b88a=_0x46ffcc,_0x40d3a2=this[_0x42b88a(0x277)];return _0x40d3a2['match'](/ACTOR/i)?this[_0x42b88a(0xa71)]()['trueRandomTarget']():this['opponentsUnit']()[_0x42b88a(0x3e1)]();},BattleManager[_0x46ffcc(0x606)]=function(){const _0x4f15f5=_0x46ffcc;return this['allBattleMembers']()[_0x4f15f5(0x8ba)](_0x317e05=>_0x317e05[_0x4f15f5(0x3a6)]());},BattleManager[_0x46ffcc(0x132)]=function(_0x257714){const _0xba27c5=_0x46ffcc;_0x257714===_0xba27c5(0x428)&&(this[_0xba27c5(0x2c1)]=!![]),$gameParty[_0xba27c5(0x132)](_0x257714),$gameTroop[_0xba27c5(0x132)](_0x257714);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x89f)]=BattleManager[_0x46ffcc(0x688)],BattleManager['startBattle']=function(){const _0x207b84=_0x46ffcc;this[_0x207b84(0x80b)]=![],this[_0x207b84(0x4ec)]=ConfigManager[_0x207b84(0xa12)],this[_0x207b84(0x2c1)]=![],this['processBattleCoreJS'](_0x207b84(0x412)),VisuMZ[_0x207b84(0x354)]['BattleManager_startBattle']['call'](this),this[_0x207b84(0x132)](_0x207b84(0x81d));},BattleManager[_0x46ffcc(0xb06)]=function(_0x1af4ba){const _0xd8bbb4=_0x46ffcc,_0x35b666=VisuMZ['BattleCore'][_0xd8bbb4(0x59e)][_0xd8bbb4(0xac4)];_0x1af4ba!==_0xd8bbb4(0x972)&&_0x35b666[_0xd8bbb4(0x6c4)]&&VisuMZ['BattleCore'][_0xd8bbb4(0x9e8)](_0x35b666[_0xd8bbb4(0x6c4)])&&$gameTemp[_0xd8bbb4(0x9aa)](_0x35b666['BattleEndEvent']);const _0xca3b2b='%1Event'['format'](_0x1af4ba);_0x35b666[_0xca3b2b]&&VisuMZ[_0xd8bbb4(0x354)][_0xd8bbb4(0x9e8)](_0x35b666[_0xca3b2b])&&$gameTemp['reserveCommonEvent'](_0x35b666[_0xca3b2b]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x51c)]=BattleManager[_0x46ffcc(0x465)],BattleManager[_0x46ffcc(0x465)]=function(){const _0x287175=_0x46ffcc;VisuMZ['BattleCore'][_0x287175(0x51c)]['call'](this),SceneManager[_0x287175(0xaf2)]()&&BattleManager[_0x287175(0x31b)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1c2)]=BattleManager['checkBattleEnd'],BattleManager[_0x46ffcc(0x752)]=function(){const _0x56cc96=_0x46ffcc;if(this['_phase']===_0x56cc96(0x67c)){if($gameTemp[_0x56cc96(0x902)]())return![];}return VisuMZ[_0x56cc96(0x354)]['BattleManager_checkBattleEnd']['call'](this);},VisuMZ[_0x46ffcc(0x354)]['BattleManager_processVictory']=BattleManager['processVictory'],BattleManager[_0x46ffcc(0x384)]=function(){const _0x2e9f7b=_0x46ffcc;this[_0x2e9f7b(0x2c1)]=!![],this[_0x2e9f7b(0x132)]('BattleVictoryJS'),VisuMZ['BattleCore'][_0x2e9f7b(0x48a)][_0x2e9f7b(0x2e0)](this),this['processPostBattleCommonEvents'](_0x2e9f7b(0xf9));},VisuMZ[_0x46ffcc(0x354)]['BattleManager_processAbort']=BattleManager['processAbort'],BattleManager[_0x46ffcc(0x941)]=function(){const _0xe4701b=_0x46ffcc;this[_0xe4701b(0x2c1)]=!![],VisuMZ['BattleCore'][_0xe4701b(0xa41)]['call'](this);},VisuMZ['BattleCore'][_0x46ffcc(0x38e)]=BattleManager['processDefeat'],BattleManager[_0x46ffcc(0x83a)]=function(){const _0x87df38=_0x46ffcc;this[_0x87df38(0x2c1)]=!![],this[_0x87df38(0x132)](_0x87df38(0x619)),VisuMZ[_0x87df38(0x354)][_0x87df38(0x38e)]['call'](this),this[_0x87df38(0xb06)](_0x87df38(0x9fc));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1fd)]=BattleManager[_0x46ffcc(0x4d9)],BattleManager[_0x46ffcc(0x4d9)]=function(_0x53e77f){const _0x181747=_0x46ffcc;this[_0x181747(0x80b)]=!![],this[_0x181747(0x4ec)]=![],this[_0x181747(0x132)]('PreEndBattleJS'),VisuMZ[_0x181747(0x354)][_0x181747(0x1fd)][_0x181747(0x2e0)](this,_0x53e77f),this[_0x181747(0x132)]('PostEndBattleJS');},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xbe1)]=BattleManager[_0x46ffcc(0x617)],BattleManager[_0x46ffcc(0x617)]=function(){const _0x312af8=_0x46ffcc;if(this['isTurnBased']())this[_0x312af8(0x132)]('PreStartTurnJS');VisuMZ['BattleCore']['BattleManager_startTurn'][_0x312af8(0x2e0)](this);if(this[_0x312af8(0xa69)]())this[_0x312af8(0x132)](_0x312af8(0x91c));},BattleManager[_0x46ffcc(0x707)]=function(){const _0x4bf12c=_0x46ffcc,_0x50f4df=this['_subject'],_0x380037=_0x50f4df[_0x4bf12c(0x256)]();_0x380037?(_0x380037[_0x4bf12c(0x560)](),_0x380037['isValid']()?(this['startAction'](),_0x50f4df[_0x4bf12c(0x6a7)]()):(_0x50f4df['removeCurrentAction'](),this[_0x4bf12c(0x72a)]())):(this[_0x4bf12c(0x72a)](),this['_subject']=null);},VisuMZ[_0x46ffcc(0x354)]['BattleManager_startAction']=BattleManager[_0x46ffcc(0xb36)],BattleManager[_0x46ffcc(0xb36)]=function(){const _0x11ef9b=_0x46ffcc,_0x40ff67=this[_0x11ef9b(0x30f)]['currentAction'](),_0x5a4477=this[_0x11ef9b(0x30f)];_0x40ff67&&_0x40ff67[_0x11ef9b(0xaa4)]()===_0x5a4477&&_0x40ff67['actionBattleCoreJS'](_0x11ef9b(0x4bf)),VisuMZ[_0x11ef9b(0x354)]['BattleManager_startAction'][_0x11ef9b(0x2e0)](this),_0x40ff67&&_0x40ff67[_0x11ef9b(0xaa4)]()===_0x5a4477&&_0x40ff67['actionBattleCoreJS']('PostStartActionJS');},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x12a)]=BattleManager[_0x46ffcc(0x72a)],BattleManager[_0x46ffcc(0x72a)]=function(){const _0x18953e=_0x46ffcc,_0x39fe1f=this['_action'],_0x5423dc=this['_subject'];_0x39fe1f&&_0x39fe1f!==this[_0x18953e(0x506)]&&_0x39fe1f[_0x18953e(0xaa4)]()===_0x5423dc&&_0x39fe1f['actionBattleCoreJS'](_0x18953e(0xa22)),this[_0x18953e(0x30f)]?VisuMZ[_0x18953e(0x354)]['BattleManager_endAction'][_0x18953e(0x2e0)](this):this[_0x18953e(0x388)]=_0x18953e(0x67c),_0x39fe1f&&_0x39fe1f!==this[_0x18953e(0x506)]&&_0x39fe1f[_0x18953e(0xaa4)]()===_0x5423dc&&_0x39fe1f[_0x18953e(0x51e)](_0x18953e(0x943)),this[_0x18953e(0xbd7)](this['allBattleMembers']()),this[_0x18953e(0x506)]=this[_0x18953e(0x9e4)];},BattleManager[_0x46ffcc(0xbd7)]=function(_0x24d636){const _0x3cef59=_0x46ffcc;for(const _0x179dee of _0x24d636){if(!_0x179dee)continue;if(!_0x179dee[_0x3cef59(0x430)]())continue;_0x179dee[_0x3cef59(0x430)]()[_0x3cef59(0x358)]();}},BattleManager[_0x46ffcc(0x60f)]=function(){!this['_logWindow']['isBusy']()&&this['endAction']();},Game_Battler[_0x46ffcc(0x9c1)]['onAllActionsEnd']=function(){const _0x196104=_0x46ffcc;this['clearResult']();if(Imported[_0x196104(0x179)]){const _0xbba565=VisuMZ['SkillsStatesCore'][_0x196104(0x59e)][_0x196104(0x9f6)];_0xbba565&&_0xbba565[_0x196104(0xaec)]===![]&&this[_0x196104(0x8f0)](0x1);}else this['removeStatesAuto'](0x1);this[_0x196104(0x5f7)]();},VisuMZ[_0x46ffcc(0x354)]['BattleManager_invokeCounterAttack']=BattleManager[_0x46ffcc(0x8ce)],BattleManager['invokeCounterAttack']=function(_0x4f126e,_0x49a821){const _0x3a4b8f=_0x46ffcc;this[_0x3a4b8f(0x21c)]=!![],VisuMZ[_0x3a4b8f(0x354)][_0x3a4b8f(0x601)]['call'](this,_0x4f126e,_0x49a821),this[_0x3a4b8f(0x21c)]=undefined;},BattleManager[_0x46ffcc(0x4a2)]=function(){const _0x2234c6=_0x46ffcc;this['_escapeRatio']=VisuMZ[_0x2234c6(0x354)][_0x2234c6(0x59e)][_0x2234c6(0xac4)][_0x2234c6(0x77e)][_0x2234c6(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x314)]=BattleManager[_0x46ffcc(0x91b)],BattleManager[_0x46ffcc(0x91b)]=function(){const _0x4ec1db=_0x46ffcc;this['processBattleCoreJS']('EscapeSuccessJS'),BattleManager[_0x4ec1db(0x787)][_0x4ec1db(0xacc)](),VisuMZ['BattleCore'][_0x4ec1db(0x314)][_0x4ec1db(0x2e0)](this),this[_0x4ec1db(0xb06)](_0x4ec1db(0x737));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x47f)]=BattleManager['onEscapeFailure'],BattleManager[_0x46ffcc(0xbe0)]=function(){const _0x4d7a10=_0x46ffcc;this[_0x4d7a10(0x132)]('EscapeFailureJS');const _0x299091=this[_0x4d7a10(0xd3)];VisuMZ['BattleCore'][_0x4d7a10(0x47f)][_0x4d7a10(0x2e0)](this),this['_escapeRatio']=_0x299091+VisuMZ['BattleCore'][_0x4d7a10(0x59e)]['Mechanics'][_0x4d7a10(0x948)]['call'](this),this[_0x4d7a10(0xa54)]=![],this[_0x4d7a10(0xb06)](_0x4d7a10(0x972));},BattleManager['displayStartMessages']=function(){const _0x2df82e=_0x46ffcc;let _0xaa7c4f=![];if(this[_0x2df82e(0x865)]())for(const _0x321fa6 of $gameTroop[_0x2df82e(0x549)]()){this['_logWindow'][_0x2df82e(0x40a)](_0x2df82e(0xb70),TextManager[_0x2df82e(0xe3)][_0x2df82e(0x498)](_0x321fa6)),this['_logWindow']['push']('wait'),_0xaa7c4f=!![];}if(this[_0x2df82e(0x933)])this[_0x2df82e(0x8f1)]['push'](_0x2df82e(0xb70),TextManager[_0x2df82e(0xa44)]['format']($gameParty[_0x2df82e(0x1a8)]())),this[_0x2df82e(0x8f1)]['push'](_0x2df82e(0xa3f));else this['_surprise']&&(this['_logWindow'][_0x2df82e(0x40a)](_0x2df82e(0xb70),TextManager[_0x2df82e(0x134)][_0x2df82e(0x498)]($gameParty['name']())),this[_0x2df82e(0x8f1)][_0x2df82e(0x40a)](_0x2df82e(0xa3f)));_0xaa7c4f&&(this[_0x2df82e(0x8f1)][_0x2df82e(0x40a)](_0x2df82e(0xa3f)),this[_0x2df82e(0x8f1)][_0x2df82e(0x40a)](_0x2df82e(0x91f))),this[_0x2df82e(0x6b6)]()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x5d9268=_0x46ffcc;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x5d9268(0x354)][_0x5d9268(0x59e)][_0x5d9268(0xb8b)][_0x5d9268(0x926)];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x318)]=BattleManager[_0x46ffcc(0x25c)],BattleManager[_0x46ffcc(0x25c)]=function(){const _0xdd8a68=_0x46ffcc;VisuMZ[_0xdd8a68(0x354)][_0xdd8a68(0x318)][_0xdd8a68(0x2e0)](this),this[_0xdd8a68(0x8d0)]()&&this[_0xdd8a68(0x49a)]()&&!this[_0xdd8a68(0x1e6)]&&$gameParty['canInput']()&&this[_0xdd8a68(0x86d)]();},BattleManager[_0x46ffcc(0x49a)]=function(){const _0x68739e=_0x46ffcc;return VisuMZ[_0x68739e(0x354)]['Settings'][_0x68739e(0x4eb)][_0x68739e(0xaf8)];},BattleManager[_0x46ffcc(0xfa)]=function(){const _0x165f8c=_0x46ffcc;this['isPartyTpbInputtable']()&&this[_0x165f8c(0x86d)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x64d)]=Scene_Battle[_0x46ffcc(0x9c1)]['startActorCommandSelection'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x8e5)]=function(){const _0x1f9376=_0x46ffcc;VisuMZ[_0x1f9376(0x354)][_0x1f9376(0x64d)][_0x1f9376(0x2e0)](this),BattleManager['isTpb']()&&BattleManager[_0x1f9376(0x627)]&&(BattleManager[_0x1f9376(0x627)]=![],this[_0x1f9376(0x713)]());},BattleManager[_0x46ffcc(0x16e)]=function(_0x55530a,_0x45c69d,_0x47ea20){const _0x9bf422=_0x46ffcc;if(!_0x47ea20)return;if(!_0x55530a)return;if(!_0x45c69d)return;const _0x3ffe13=this[_0x9bf422(0x9e4)];this[_0x9bf422(0x9e4)]=new Game_Action(_0x55530a);if(DataManager[_0x9bf422(0xb79)](_0x47ea20))this[_0x9bf422(0x9e4)][_0x9bf422(0x23b)](_0x47ea20['id']);if(DataManager[_0x9bf422(0x444)](_0x47ea20))this[_0x9bf422(0x9e4)][_0x9bf422(0x9a6)](_0x47ea20['id']);if(this[_0x9bf422(0x9e4)][_0x9bf422(0x50d)]())BattleManager[_0x9bf422(0xb22)](_0x55530a,_0x45c69d);this[_0x9bf422(0x9e4)]=_0x3ffe13;},BattleManager[_0x46ffcc(0x605)]=function(_0x34ed32,_0x29dc40){const _0x302c8f=_0x46ffcc;this[_0x302c8f(0x9e4)]['_reflectionTarget']=_0x29dc40,this[_0x302c8f(0x8f1)][_0x302c8f(0x98e)](_0x29dc40),this[_0x302c8f(0x8f1)][_0x302c8f(0x812)](_0x34ed32,this[_0x302c8f(0x9e4)]),this['_action'][_0x302c8f(0xa9f)](_0x34ed32),this[_0x302c8f(0x8f1)][_0x302c8f(0xb9a)](_0x34ed32,_0x34ed32);},VisuMZ[_0x46ffcc(0x354)]['BattleManager_makeActionOrders']=BattleManager[_0x46ffcc(0x182)],BattleManager[_0x46ffcc(0x182)]=function(){const _0x413cdb=_0x46ffcc;VisuMZ[_0x413cdb(0x354)][_0x413cdb(0x5ba)][_0x413cdb(0x2e0)](this),this['_actionBattlers']=this['_actionBattlers']['filter'](_0x137fa3=>_0x137fa3&&_0x137fa3[_0x413cdb(0x241)]());},VisuMZ['BattleCore'][_0x46ffcc(0xb23)]=BattleManager[_0x46ffcc(0x784)],BattleManager[_0x46ffcc(0x784)]=function(_0x11f183){const _0x2003fe=_0x46ffcc;if(this[_0x2003fe(0x388)]==='custom')this[_0x2003fe(0x7f9)]();else this[_0x2003fe(0x388)]===_0x2003fe(0x7cc)?this[_0x2003fe(0xb1f)]():VisuMZ['BattleCore'][_0x2003fe(0xb23)]['call'](this,_0x11f183);},BattleManager['prepareCustomActionSequence']=function(){const _0x1359c9=_0x46ffcc;this[_0x1359c9(0x8b1)]=this[_0x1359c9(0x2ab)][_0x1359c9(0x62f)](0x0),this['_targetIndex']=0x0,this[_0x1359c9(0x8bd)]=this[_0x1359c9(0x8b1)][0x0]||null,this[_0x1359c9(0x388)]=_0x1359c9(0xacf);},BattleManager['updateCustomActionSequence']=function(){const _0x3f6dc9=_0x46ffcc;!this[_0x3f6dc9(0xb0d)]()&&!this[_0x3f6dc9(0x8f1)][_0x3f6dc9(0x200)]()&&(this[_0x3f6dc9(0x388)]=_0x3f6dc9(0x9fd));},BattleManager[_0x46ffcc(0x7cc)]=function(_0x43c310){const _0x3bc356=_0x46ffcc;this[_0x3bc356(0x65f)][_0x3bc356(0x112)](_0x43c310);if(_0x43c310===this['_subject'])return;const _0x395b5f=JsonEx[_0x3bc356(0x494)](_0x43c310[_0x3bc356(0x256)]());this[_0x3bc356(0xaeb)][_0x3bc356(0x40a)]([_0x43c310,_0x395b5f]);},BattleManager[_0x46ffcc(0x61c)]=function(){},BattleManager[_0x46ffcc(0x453)]=function(){const _0x51230b=_0x46ffcc;if(this[_0x51230b(0x6b6)]())this['_phase']=_0x51230b(0x67c);else this[_0x51230b(0xaeb)][_0x51230b(0x9bf)]>0x0?this['_phase']=_0x51230b(0x67c):this[_0x51230b(0x25c)]();},BattleManager[_0x46ffcc(0xab9)]=function(){const _0xd067d7=_0x46ffcc,_0x4513d9=this['_subject'];_0x4513d9&&this[_0xd067d7(0x6b6)]()&&_0x4513d9[_0xd067d7(0x36b)]('undecided');for(;;){const _0x222b62=this[_0xd067d7(0x463)]();if(!_0x222b62)return null;if(_0x222b62['isBattleMember']()&&_0x222b62['isAlive']())return _0x222b62;}},BattleManager['getNextSubjectFromPool']=function(){const _0x1e3692=_0x46ffcc;if(this[_0x1e3692(0xaeb)][_0x1e3692(0x9bf)]>0x0){const _0x119a84=this[_0x1e3692(0xaeb)][_0x1e3692(0x348)](),_0x6cd77c=_0x119a84[0x0];return _0x6cd77c['_actions']=_0x6cd77c[_0x1e3692(0x52e)]||[],_0x6cd77c[_0x1e3692(0x52e)][0x0]=_0x119a84[0x1],_0x6cd77c;}else return this['_actionBattlers'][_0x1e3692(0x348)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2a7)]=Game_Battler[_0x46ffcc(0x9c1)]['forceAction'],Game_Battler['prototype']['forceAction']=function(_0x45cdf2,_0x2b2b27){const _0x382cf1=_0x46ffcc;VisuMZ['BattleCore']['Game_Battler_forceAction'][_0x382cf1(0x2e0)](this,_0x45cdf2,_0x2b2b27),this[_0x382cf1(0x52e)][this[_0x382cf1(0x52e)]['length']-0x1][_0x382cf1(0x9d0)]=!![];},Game_Interpreter[_0x46ffcc(0x9c1)]['command339']=function(_0xe09528){const _0x6cbb70=_0x46ffcc;return this[_0x6cbb70(0x5d0)](_0xe09528[0x0],_0xe09528[0x1],_0x592624=>{const _0x297050=_0x6cbb70;!_0x592624[_0x297050(0x1d2)]()&&(_0x592624[_0x297050(0x7cc)](_0xe09528[0x2],_0xe09528[0x3]),BattleManager[_0x297050(0x7cc)](_0x592624));}),!![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1bd)]=Game_Battler[_0x46ffcc(0x9c1)]['makeSpeed'],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x7f6)]=function(){const _0x688fd5=_0x46ffcc;VisuMZ[_0x688fd5(0x354)][_0x688fd5(0x1bd)]['call'](this),this[_0x688fd5(0x52e)][_0x688fd5(0x9bf)]<=0x0&&(this['_speed']=Number['MIN_SAFE_INTEGER']);},BattleManager[_0x46ffcc(0x55f)]=function(){const _0x37aee4=_0x46ffcc;if(VisuMZ[_0x37aee4(0x354)][_0x37aee4(0x59e)][_0x37aee4(0x896)][_0x37aee4(0x7dd)]??!![])return![];return SceneManager[_0x37aee4(0xaf2)]()&&this[_0x37aee4(0x2c1)];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x9b2)]=BattleManager['selectNextCommand'],BattleManager[_0x46ffcc(0x86d)]=function(){const _0x4ffce0=_0x46ffcc;this[_0x4ffce0(0x6b6)]()?this['selectNextCommandTpb']():VisuMZ[_0x4ffce0(0x354)]['BattleManager_selectNextCommand'][_0x4ffce0(0x2e0)](this);},BattleManager[_0x46ffcc(0x305)]=function(){const _0x3f981f=_0x46ffcc;if(this[_0x3f981f(0x203)]){if(this[_0x3f981f(0x203)]['selectNextCommand']())return;this[_0x3f981f(0x5f5)](),this[_0x3f981f(0x157)](),!this['_subject']&&!this[_0x3f981f(0x203)]&&SceneManager[_0x3f981f(0x5e4)]['updateBattleProcess']();}else!this[_0x3f981f(0x30f)]&&this['selectNextActor']();},BattleManager[_0x46ffcc(0x157)]=function(){const _0x5cee15=_0x46ffcc;(!this[_0x5cee15(0x85c)]()||this['needsActorInputCancel']())&&(this[_0x5cee15(0x499)]&&(!$gameParty[_0x5cee15(0xbdb)]()['includes'](this[_0x5cee15(0x499)])&&(this[_0x5cee15(0x499)]=null)),!this[_0x5cee15(0x499)]?(this[_0x5cee15(0xb45)](),this[_0x5cee15(0x203)]=null,this[_0x5cee15(0xa54)]=![]):this[_0x5cee15(0x8e8)]());},BattleManager[_0x46ffcc(0x8e8)]=function(){const _0x43ae1c=_0x46ffcc;!$gameParty[_0x43ae1c(0xbdb)]()[_0x43ae1c(0x6a2)](this[_0x43ae1c(0x499)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x43ae1c(0x499)]?(this[_0x43ae1c(0x203)]=this[_0x43ae1c(0x499)],this['_currentActor'][_0x43ae1c(0x693)]=_0x43ae1c(0xa96),this['_inputting']=!![],this[_0x43ae1c(0x499)]=null):(this['cancelActorInput'](),this[_0x43ae1c(0x203)]=null,this['_inputting']=![]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xada)]=BattleManager['isTpbMainPhase'],BattleManager[_0x46ffcc(0x5ec)]=function(){const _0x3789b5=_0x46ffcc;return this[_0x3789b5(0x388)]==='custom'?this[_0x3789b5(0xa04)]():VisuMZ[_0x3789b5(0x354)][_0x3789b5(0xada)]['call'](this);},BattleManager[_0x46ffcc(0xa04)]=function(){const _0x452dee=_0x46ffcc;return this[_0x452dee(0x7c4)]();},VisuMZ['BattleCore'][_0x46ffcc(0x1cf)]=BattleManager[_0x46ffcc(0xb45)],BattleManager[_0x46ffcc(0xb45)]=function(){const _0x344b0e=_0x46ffcc;this['isTpb']()&&this[_0x344b0e(0x388)]==='battleEnd'&&(this[_0x344b0e(0x203)]=null),VisuMZ[_0x344b0e(0x354)][_0x344b0e(0x1cf)][_0x344b0e(0x2e0)](this);},VisuMZ['BattleCore'][_0x46ffcc(0xbaa)]=BattleManager['inputtingAction'],BattleManager[_0x46ffcc(0x772)]=function(){const _0x516432=_0x46ffcc,_0x96456d=this[_0x516432(0x203)];if(_0x96456d&&!_0x96456d['inputtingAction']()){const _0x10d922=_0x96456d['_actionInputIndex'];_0x96456d[_0x516432(0x52e)][_0x10d922]=new Game_Action(_0x96456d);}return VisuMZ[_0x516432(0x354)]['BattleManager_inputtingAction']['call'](this);},VisuMZ[_0x46ffcc(0x354)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x46ffcc(0x5dc)]=function(_0xe52a21){const _0x458c8e=_0x46ffcc;if(this['_action'][_0x458c8e(0x3fb)]())return![];return VisuMZ[_0x458c8e(0x354)]['BattleManager_checkSubstitute'][_0x458c8e(0x2e0)](this,_0xe52a21);},SceneManager[_0x46ffcc(0xaf2)]=function(){const _0x55641e=_0x46ffcc;return this[_0x55641e(0x5e4)]&&this[_0x55641e(0x5e4)][_0x55641e(0x42f)]===Scene_Battle;},SceneManager[_0x46ffcc(0x257)]=function(){const _0x12c266=_0x46ffcc;return Spriteset_Battle[_0x12c266(0x9c1)][_0x12c266(0x146)]();},SceneManager[_0x46ffcc(0x3b4)]=function(){const _0x529231=_0x46ffcc;if(SceneManager[_0x529231(0x5a7)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x1ee0d5=_0x46ffcc;if(SceneManager[_0x1ee0d5(0x3d5)](Scene_Options))return!![];return![];},SceneManager[_0x46ffcc(0x4e4)]=function(_0x21ab90){const _0xd0b5e5=_0x46ffcc;if(!SceneManager[_0xd0b5e5(0xaf2)]())return!![];const _0x2a1dd1=[_0xd0b5e5(0xc8),_0xd0b5e5(0x645),'Scene_QuickLoad'];return _0x2a1dd1[_0xd0b5e5(0x6a2)](_0x21ab90[_0xd0b5e5(0x1a8)]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x58a)]=SceneManager[_0x46ffcc(0x40a)],SceneManager[_0x46ffcc(0x40a)]=function(_0x30ff88){const _0x2d09ae=_0x46ffcc;if(!SceneManager[_0x2d09ae(0x4e4)](_0x30ff88))return this[_0x2d09ae(0x1ea)](_0x30ff88);VisuMZ[_0x2d09ae(0x354)]['SceneManager_push']['call'](this,_0x30ff88);},SceneManager[_0x46ffcc(0x1ea)]=function(_0x5a7589){const _0x42b079=_0x46ffcc;if(!$gameTemp[_0x42b079(0x72d)]())return;if(this[_0x42b079(0x467)])return;this[_0x42b079(0x467)]=!![];let _0x19f22e='';_0x19f22e+=_0x42b079(0xa42),_0x19f22e+=_0x42b079(0x86b)[_0x42b079(0x498)](_0x5a7589[_0x42b079(0x1a8)]),alert(_0x19f22e);},VisuMZ[_0x46ffcc(0x354)]['Game_Temp_initialize']=Game_Temp[_0x46ffcc(0x9c1)]['initialize'],Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x557c19=_0x46ffcc;VisuMZ['BattleCore'][_0x557c19(0x102)][_0x557c19(0x2e0)](this),this['_battleBalloonQueue']=[];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb52)]=Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x3cf)],Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x3cf)]=function(_0x933a14,_0x1a413c,_0x52119f){const _0x27a041=_0x46ffcc;_0x933a14[_0x27a041(0x112)](null)[_0x27a041(0x112)](undefined),_0x933a14=_0x933a14[_0x27a041(0x8ba)]((_0xe9be47,_0x3caf97,_0x29483c)=>_0x29483c[_0x27a041(0xb8c)](_0xe9be47)===_0x3caf97);SceneManager[_0x27a041(0xaf2)]()&&SceneManager[_0x27a041(0x257)]()&&(_0x52119f=!_0x52119f);VisuMZ[_0x27a041(0x354)][_0x27a041(0xb52)][_0x27a041(0x2e0)](this,_0x933a14,_0x1a413c,_0x52119f);SceneManager['isSceneBattle']()&&BattleManager[_0x27a041(0x787)][_0x27a041(0x8db)]();for(const _0x113799 of _0x933a14){_0x113799&&_0x113799[_0x27a041(0x656)]&&_0x113799['isEnemy']()&&_0x113799[_0x27a041(0x9cd)]();}},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x184)]=function(_0x48ce6a){this['_lastPluginCommandInterpreter']=_0x48ce6a;},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x13a)]=function(){const _0x2f0f60=_0x46ffcc;return this[_0x2f0f60(0x24a)];},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x124)]=function(){const _0x3fbaf2=_0x46ffcc;this[_0x3fbaf2(0x782)]=undefined;},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x8d6)]=function(_0x491199){const _0x5ab379=_0x46ffcc;$gameMap&&$dataMap&&$dataMap[_0x5ab379(0x8fd)]&&this[_0x5ab379(0x349)]($dataMap[_0x5ab379(0x8fd)]);const _0x131aec=$dataTroops[_0x491199];if(_0x131aec){let _0x169a4a=DataManager[_0x5ab379(0x34e)](_0x131aec['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x169a4a);}},Game_Temp['prototype'][_0x46ffcc(0x349)]=function(_0x2d1b7c){const _0x1cb971=_0x46ffcc;if(!_0x2d1b7c)return;if(_0x2d1b7c[_0x1cb971(0xe0)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x557784=String(RegExp['$1']);if(_0x557784[_0x1cb971(0xe0)](/DEFAULT/i))this[_0x1cb971(0x782)]=_0x1cb971(0x728);else{if(_0x557784[_0x1cb971(0xe0)](/LIST/i))this[_0x1cb971(0x782)]=_0x1cb971(0x497);else{if(_0x557784['match'](/XP/i))this[_0x1cb971(0x782)]='xp';else{if(_0x557784[_0x1cb971(0xe0)](/PORTRAIT/i))this[_0x1cb971(0x782)]=_0x1cb971(0x1cd);else{if(_0x557784[_0x1cb971(0xe0)](/BORDER/i))this[_0x1cb971(0x782)]='border';else{if(_0x557784[_0x1cb971(0xe0)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this['_forcedBattleLayout']='sideview_ui':this[_0x1cb971(0x782)]=_0x1cb971(0x728);else _0x557784[_0x1cb971(0xe0)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x1cb971(0x75a)]?this['_forcedBattleLayout']='frontview_ui':this[_0x1cb971(0x782)]='default');}}}}}}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x65d)]=Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x5b6)],Game_Temp['prototype'][_0x46ffcc(0x5b6)]=function(_0x325bca,_0x47c2f7){const _0x4214fb=_0x46ffcc;SceneManager[_0x4214fb(0xaf2)]()?this[_0x4214fb(0xa9e)](_0x325bca,_0x47c2f7):VisuMZ[_0x4214fb(0x354)]['Game_Temp_requestBalloon'][_0x4214fb(0x2e0)](this,_0x325bca,_0x47c2f7);},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0xa9e)]=function(_0x43b240,_0x304066){const _0x11f921=_0x46ffcc,_0xfcd6ae={'target':_0x43b240,'balloonId':_0x304066};this[_0x11f921(0x451)]=this[_0x11f921(0x451)]||[],this['_battleBalloonQueue'][_0x11f921(0x40a)](_0xfcd6ae);},Game_Temp[_0x46ffcc(0x9c1)][_0x46ffcc(0x80c)]=function(){const _0x51fc64=_0x46ffcc;return this[_0x51fc64(0x451)]=this[_0x51fc64(0x451)]||[],this['_battleBalloonQueue']['shift']();},Game_Temp['prototype']['clearBattleBalloons']=function(){const _0x24ef34=_0x46ffcc;this[_0x24ef34(0x451)]=[];},Spriteset_Battle['prototype'][_0x46ffcc(0x71b)]=function(){const _0x54c6bc=_0x46ffcc;this[_0x54c6bc(0x73b)]===undefined&&(this[_0x54c6bc(0x73b)]=[]);for(const _0xb4f99 of this['_battleBalloonSprites']){!_0xb4f99[_0x54c6bc(0x550)]()&&this[_0x54c6bc(0x6e6)](_0xb4f99);}this[_0x54c6bc(0x1a6)]();},Spriteset_Battle[_0x46ffcc(0x9c1)]['processBattleBalloonRequests']=function(){const _0x133130=_0x46ffcc;for(;;){const _0xea0a7e=$gameTemp[_0x133130(0x80c)]();if(_0xea0a7e)this[_0x133130(0x9de)](_0xea0a7e);else break;}},Spriteset_Battle[_0x46ffcc(0x9c1)]['createBattleBalloon']=function(_0x46a274){const _0x50b2dd=_0x46ffcc,_0x2b436f=this[_0x50b2dd(0x3db)](_0x46a274['target']);if(_0x2b436f){let _0x4ea4b6=null;Imported[_0x50b2dd(0x2af)]&&Array[_0x50b2dd(0x2fd)](_0x46a274[_0x50b2dd(0x7af)])?_0x4ea4b6=new Sprite_IconBalloon():_0x4ea4b6=new Sprite_Balloon(),_0x4ea4b6[_0x50b2dd(0x9d9)]=_0x46a274[_0x50b2dd(0xaa6)],_0x4ea4b6[_0x50b2dd(0x8bd)]=_0x2b436f,_0x4ea4b6[_0x50b2dd(0x8bd)][_0x50b2dd(0x9df)]=_0x2b436f,_0x4ea4b6['setup'](_0x2b436f,_0x46a274[_0x50b2dd(0x7af)]),BattleManager[_0x50b2dd(0x445)](_0x4ea4b6),this[_0x50b2dd(0x73b)][_0x50b2dd(0x40a)](_0x4ea4b6);}},Spriteset_Battle['prototype'][_0x46ffcc(0x6e6)]=function(_0x444f58){const _0x54ae07=_0x46ffcc;this[_0x54ae07(0x73b)]['remove'](_0x444f58),BattleManager[_0x54ae07(0xb82)](_0x444f58),_0x444f58[_0x54ae07(0x197)]();},Sprite_Battler['prototype']['setBalloonPose']=function(_0x4c96f5,_0x5bc32c){},Sprite_Battler[_0x46ffcc(0x9c1)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle['prototype']['isAnyBattleBalloonPlaying']=function(){const _0x5cb5b2=_0x46ffcc;return this[_0x5cb5b2(0x73b)]=this[_0x5cb5b2(0x73b)]||[],this[_0x5cb5b2(0x73b)][_0x5cb5b2(0x9bf)]>0x0;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x88e)]=Game_System[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Game_System[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x30f2fb=_0x46ffcc;VisuMZ[_0x30f2fb(0x354)][_0x30f2fb(0x88e)][_0x30f2fb(0x2e0)](this),this[_0x30f2fb(0x4f0)]();},Game_System[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f0)]=function(){const _0xf39732=_0x46ffcc;this[_0xf39732(0x990)]=this[_0xf39732(0x990)]||[];},Game_System[_0x46ffcc(0x9c1)][_0x46ffcc(0xae5)]=function(){const _0x571123=_0x46ffcc;if(this[_0x571123(0x990)]===undefined)this[_0x571123(0x4f0)]();return this[_0x571123(0x990)];},Game_System[_0x46ffcc(0x9c1)][_0x46ffcc(0x9d1)]=function(_0x5b9cea){const _0x201331=_0x46ffcc;if(this[_0x201331(0x990)]===undefined)this[_0x201331(0x4f0)]();if(!_0x5b9cea)return;if(this['_defeatedEnemies']['includes'](_0x5b9cea))return;this[_0x201331(0x990)][_0x201331(0x40a)](_0x5b9cea),this['_defeatedEnemies']['sort']((_0x2f214b,_0x5f8fe7)=>_0x2f214b-_0x5f8fe7);},VisuMZ['BattleCore'][_0x46ffcc(0xe8)]=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x570)],Game_BattlerBase['prototype'][_0x46ffcc(0x570)]=function(_0x4eed0a){const _0x2cdaae=_0x46ffcc,_0x552f0c=this[_0x2cdaae(0x615)](),_0x57957e=this[_0x2cdaae(0xaa9)]();VisuMZ[_0x2cdaae(0x354)][_0x2cdaae(0xe8)]['call'](this,_0x4eed0a),this[_0x2cdaae(0x656)]()&&_0x552f0c&&this[_0x2cdaae(0xb76)]()&&(this[_0x2cdaae(0x50f)]=!this[_0x2cdaae(0xb19)](),$gameSystem[_0x2cdaae(0x9d1)](this[_0x2cdaae(0x5ce)]())),SceneManager['isSceneBattle']()&&_0x57957e!==this['stateMotionIndex']()&&(this['battler']()&&this[_0x2cdaae(0x430)]()['refreshMotion']());},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb19)]=function(){const _0x51f5fe=_0x46ffcc;return $gameSystem[_0x51f5fe(0xae5)]()[_0x51f5fe(0x6a2)](this[_0x51f5fe(0x438)]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x34f)]=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x434)],Game_BattlerBase[_0x46ffcc(0x9c1)]['eraseState']=function(_0x5dddb5){const _0x3b17e5=_0x46ffcc,_0x174368=this[_0x3b17e5(0x734)][_0x3b17e5(0x6a2)](_0x5dddb5),_0x564124=this['stateMotionIndex']();VisuMZ[_0x3b17e5(0x354)][_0x3b17e5(0x34f)]['call'](this,_0x5dddb5),this[_0x3b17e5(0x656)]()&&_0x5dddb5===this[_0x3b17e5(0xdc)]()&&this['isAlive']()&&(this[_0x3b17e5(0x50f)]=![]),!this['_tempActor']&&!this[_0x3b17e5(0xa00)]&&SceneManager['isSceneBattle']()&&(_0x174368&&!this[_0x3b17e5(0x734)][_0x3b17e5(0x6a2)](_0x5dddb5)&&this['requestMotionRefresh'](),_0x564124!==this[_0x3b17e5(0xaa9)]()&&(this[_0x3b17e5(0x430)]()&&this[_0x3b17e5(0x430)]()['refreshMotion']()));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x63b)]=Game_Action['prototype'][_0x46ffcc(0x91f)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x91f)]=function(){const _0x3f624a=_0x46ffcc;VisuMZ[_0x3f624a(0x354)][_0x3f624a(0x63b)][_0x3f624a(0x2e0)](this),this[_0x3f624a(0x8b9)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x3f624a(0x8a3)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x3f624a(0xb91)]=_0x3f624a(0x728),this[_0x3f624a(0x870)]();},Game_Action[_0x46ffcc(0x9c1)]['clearTargetBattlerKey']=function(){const _0x42d6ec=_0x46ffcc;this[_0x42d6ec(0x277)]='';},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2dd)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa84)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa84)]=function(_0x406cf1){const _0x4264a4=_0x46ffcc;VisuMZ[_0x4264a4(0x354)][_0x4264a4(0x2dd)][_0x4264a4(0x2e0)](this,_0x406cf1),this[_0x4264a4(0x870)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xd5)]=Game_Action['prototype'][_0x46ffcc(0x9a6)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x9a6)]=function(_0x2c09e5){const _0x5c9f70=_0x46ffcc;VisuMZ[_0x5c9f70(0x354)][_0x5c9f70(0xd5)][_0x5c9f70(0x2e0)](this,_0x2c09e5),this[_0x5c9f70(0x870)]();},VisuMZ['BattleCore'][_0x46ffcc(0x3ee)]=Game_Action[_0x46ffcc(0x9c1)]['setItem'],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x23b)]=function(_0x356f94){const _0x308449=_0x46ffcc;VisuMZ['BattleCore'][_0x308449(0x3ee)][_0x308449(0x2e0)](this,_0x356f94),this[_0x308449(0x870)]();},Game_Action[_0x46ffcc(0x9c1)]['makeDamageValue']=function(_0x91c47d,_0x125d3b){const _0x3beb7d=_0x46ffcc;return VisuMZ[_0x3beb7d(0x354)][_0x3beb7d(0x59e)]['Damage'][_0x3beb7d(0x7fe)][_0x3beb7d(0x2e0)](this,_0x91c47d,_0x125d3b);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x958)]=function(_0x566b41,_0x43d42a){const _0x50f10f=_0x46ffcc;return VisuMZ[_0x50f10f(0x354)][_0x50f10f(0x59e)]['Damage'][_0x50f10f(0x482)][_0x50f10f(0x2e0)](this,_0x566b41,_0x43d42a);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x49b)]=function(_0x186583,_0x24c65e){const _0x4ad171=_0x46ffcc;return VisuMZ[_0x4ad171(0x354)][_0x4ad171(0x59e)][_0x4ad171(0x896)]['GuardFormulaJS']['call'](this,_0x186583,_0x24c65e);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xbc0)]=Game_Action[_0x46ffcc(0x9c1)]['itemHit'],Game_Action['prototype'][_0x46ffcc(0xa9c)]=function(_0x1bd867){const _0x29bdca=_0x46ffcc,_0x1da5d0=this['item']()[_0x29bdca(0x8fd)];if(_0x1da5d0['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1da5d0['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x18a296=VisuMZ[_0x29bdca(0x354)][_0x29bdca(0xbc0)]['call'](this,_0x1bd867);return _0x18a296=this[_0x29bdca(0x8a3)][_0x29bdca(0x6f7)]*_0x18a296+this[_0x29bdca(0x8a3)][_0x29bdca(0x6d1)],$gameParty[_0x29bdca(0x40c)]()&&(_0x18a296=this[_0x29bdca(0x87a)](_0x18a296,_0x1bd867)),_0x18a296;}}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x8e2)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x20a)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x20a)]=function(_0x3a43dc){const _0x5cbc39=_0x46ffcc;this[_0x5cbc39(0x4e7)]=!![],VisuMZ[_0x5cbc39(0x354)][_0x5cbc39(0x8e2)]['call'](this,_0x3a43dc),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xe1)]=function(_0x182fd4){const _0x49e288=_0x46ffcc;window[_0x49e288(0x9fd)]=this,window['a']=this[_0x49e288(0xaa4)](),window['b']=_0x182fd4,window['user']=this['subject'](),window['target']=_0x182fd4,window[_0x49e288(0x929)]=this[_0x49e288(0x50d)](),window[_0x49e288(0x8ad)]=this[_0x49e288(0x50d)](),window['item']=this[_0x49e288(0x50d)]();},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x3ce)]=function(_0x4ba488){const _0x225bdd=_0x46ffcc;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0x225bdd(0xa30)]=undefined,window[_0x225bdd(0xaa6)]=undefined,window[_0x225bdd(0x929)]=undefined,window['skill']=undefined,window['item']=undefined;},Game_Action['prototype'][_0x46ffcc(0x87a)]=function(_0xebed4,_0xdcb76f){const _0x7abe7e=_0x46ffcc;if(this[_0x7abe7e(0x4e7)])return _0xebed4;this[_0x7abe7e(0xe1)](_0xdcb76f),window['rate']=_0xebed4;const _0x4a9d87=VisuMZ['BattleCore'][_0x7abe7e(0x217)];if(this['item']()){if(this[_0x7abe7e(0x50d)]()[_0x7abe7e(0x8fd)][_0x7abe7e(0xe0)](_0x4a9d87['jsAccuracy'])){const _0x19145d=String(RegExp['$1']);try{eval(_0x19145d);}catch(_0x59b207){if($gameTemp['isPlaytest']())console[_0x7abe7e(0x637)](_0x59b207);}}}{const _0x577d70=this[_0x7abe7e(0xaa4)]()[_0x7abe7e(0x105)]();for(const _0x436bfd of _0x577d70){if(!_0x436bfd)continue;if(_0x436bfd[_0x7abe7e(0x8fd)]['match'](_0x4a9d87[_0x7abe7e(0xd6)])){const _0x1fc33b=String(RegExp['$1']);try{eval(_0x1fc33b);}catch(_0x41a26d){if($gameTemp[_0x7abe7e(0x72d)]())console[_0x7abe7e(0x637)](_0x41a26d);}}}}{const _0x5bc335=_0xdcb76f[_0x7abe7e(0x105)]();for(const _0x5b10bc of _0x5bc335){if(!_0x5b10bc)continue;if(_0x5b10bc[_0x7abe7e(0x8fd)][_0x7abe7e(0xe0)](_0x4a9d87[_0x7abe7e(0xbd0)])){const _0x44c251=String(RegExp['$1']);try{eval(_0x44c251);}catch(_0x192ed7){if($gameTemp[_0x7abe7e(0x72d)]())console[_0x7abe7e(0x637)](_0x192ed7);}}}}return _0xebed4=window[_0x7abe7e(0xa4f)],this['clearGlobalVariables'](_0xdcb76f),_0xebed4;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x437)]=function(_0x320b3d){const _0x128da0=_0x46ffcc;if(!this[_0x128da0(0x50d)]()['damage']['critical'])return 0x0;let _0x3e49b5=VisuMZ[_0x128da0(0x354)][_0x128da0(0x59e)][_0x128da0(0x896)]['CriticalHitRateJS'][_0x128da0(0x2e0)](this,_0x320b3d);return _0x3e49b5=this[_0x128da0(0x8a3)][_0x128da0(0x566)]*_0x3e49b5+this[_0x128da0(0x8a3)]['criticalHitFlat'],$gameParty[_0x128da0(0x40c)]()&&(_0x3e49b5=this['applyBattleCoreCriticalHitRateJS'](_0x3e49b5,_0x320b3d)),_0x3e49b5;},Game_Action['prototype'][_0x46ffcc(0x52f)]=function(_0x38d8e4,_0x4934b2){const _0x140227=_0x46ffcc;this[_0x140227(0xe1)](_0x4934b2),window['rate']=_0x38d8e4;const _0x37ae7a=VisuMZ[_0x140227(0x354)][_0x140227(0x217)];{const _0x509ff1=this['subject']()[_0x140227(0x105)]();for(const _0xfb698 of _0x509ff1){if(!_0xfb698)continue;if(_0xfb698[_0x140227(0x8fd)][_0x140227(0xe0)](_0x37ae7a[_0x140227(0x74f)])){const _0x3775f8=String(RegExp['$1']);try{eval(_0x3775f8);}catch(_0x1f0a30){if($gameTemp['isPlaytest']())console[_0x140227(0x637)](_0x1f0a30);}}}}{const _0x1b4440=_0x4934b2['traitObjects']();for(const _0x1dc327 of _0x1b4440){if(!_0x1dc327)continue;if(_0x1dc327[_0x140227(0x8fd)][_0x140227(0xe0)](_0x37ae7a[_0x140227(0x2db)])){const _0x25842a=String(RegExp['$1']);try{eval(_0x25842a);}catch(_0x8329e0){if($gameTemp[_0x140227(0x72d)]())console[_0x140227(0x637)](_0x8329e0);}}}}return _0x38d8e4=window['rate'],this['clearGlobalVariables'](_0x4934b2),_0x38d8e4;},Game_Action[_0x46ffcc(0x9c1)]['applyBattleCoreCriticalHitRateJS']=function(_0x34aa78,_0x5bf59b){const _0x23411c=_0x46ffcc;this[_0x23411c(0xe1)](_0x5bf59b);for(const _0x36a2e0 of this[_0x23411c(0xaa4)]()['traitObjects']()){if(!_0x36a2e0)continue;key=VisuMZ[_0x23411c(0x354)]['createKeyJS'](_0x36a2e0,_0x23411c(0x74f)),VisuMZ[_0x23411c(0x354)]['JS'][key]&&(_0x34aa78=VisuMZ[_0x23411c(0x354)]['JS'][key]['call'](this,this[_0x23411c(0xaa4)](),_0x5bf59b,this[_0x23411c(0x50d)](),_0x34aa78));}for(const _0x42d7cc of _0x5bf59b[_0x23411c(0x105)]()){if(!_0x42d7cc)continue;key=VisuMZ[_0x23411c(0x354)][_0x23411c(0x4be)](_0x42d7cc,_0x23411c(0x2db)),VisuMZ[_0x23411c(0x354)]['JS'][key]&&(_0x34aa78=VisuMZ[_0x23411c(0x354)]['JS'][key][_0x23411c(0x2e0)](this,this[_0x23411c(0xaa4)](),_0x5bf59b,this[_0x23411c(0x50d)](),_0x34aa78));}return this[_0x23411c(0x3ce)](_0x5bf59b),_0x34aa78;},Game_Action[_0x46ffcc(0x9c1)]['applyCritical']=function(_0x4df1cf){const _0x47d06a=_0x46ffcc;return _0x4df1cf=VisuMZ[_0x47d06a(0x354)][_0x47d06a(0x59e)][_0x47d06a(0x896)]['CriticalHitMultiplier'][_0x47d06a(0x2e0)](this,_0x4df1cf),_0x4df1cf=this['_multipliers'][_0x47d06a(0x8b0)]*_0x4df1cf+this[_0x47d06a(0x8a3)][_0x47d06a(0x62c)],_0x4df1cf;},VisuMZ[_0x46ffcc(0x354)]['Game_Action_evalDamageFormula']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x847)],Game_Action[_0x46ffcc(0x9c1)]['evalDamageFormula']=function(_0x5558db){const _0x559b00=_0x46ffcc;if(this[_0x559b00(0xb91)]!=='default')return this[_0x559b00(0x3e9)](_0x5558db);else return DataManager[_0x559b00(0x168)](this[_0x559b00(0x50d)]())===_0x559b00(0x833)?VisuMZ[_0x559b00(0x354)]['Game_Action_evalDamageFormula'][_0x559b00(0x2e0)](this,_0x5558db):this[_0x559b00(0x2bb)](_0x5558db);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xbd9)]=function(_0x30d435){const _0x1e3082=_0x46ffcc;this[_0x1e3082(0xb91)]=_0x30d435;},Game_Action[_0x46ffcc(0x9c1)]['customDamageFormula']=function(_0x7457c5){const _0x93c73f=_0x46ffcc,_0x8b74e1=this[_0x93c73f(0x50d)](),_0x20ee91=_0x8b74e1[_0x93c73f(0x6be)][_0x93c73f(0x5cf)];_0x8b74e1['damage'][_0x93c73f(0x5cf)]=this[_0x93c73f(0xb91)];let _0x97d9e4=VisuMZ[_0x93c73f(0x354)][_0x93c73f(0x2f8)]['call'](this,_0x7457c5);return _0x8b74e1[_0x93c73f(0x6be)][_0x93c73f(0x5cf)]=_0x20ee91,_0x97d9e4;},Game_Action[_0x46ffcc(0x9c1)]['damageStyle']=function(){const _0x2a3546=_0x46ffcc;if(this[_0x2a3546(0x50d)]()[_0x2a3546(0x8fd)][_0x2a3546(0xe0)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x554ceb=String(RegExp['$1'])['toUpperCase']()['trim']();return _0x554ceb;}return _0x2a3546(0x833);},Game_Action['prototype'][_0x46ffcc(0x2bb)]=function(_0x5c5c87){const _0x260743=_0x46ffcc,_0x24f274=DataManager[_0x260743(0x168)](this['item']()),_0x4f494f=VisuMZ[_0x260743(0x4fa)][_0x24f274];try{return _0x4f494f[_0x260743(0x28d)][_0x260743(0x2e0)](this,_0x5c5c87);}catch(_0x1da0ff){if($gameTemp[_0x260743(0x72d)]())console[_0x260743(0x637)](_0x1da0ff);return VisuMZ[_0x260743(0x354)][_0x260743(0x2f8)]['call'](this);}},Game_Action[_0x46ffcc(0x9c1)]['applyArmorModifiers']=function(_0x352867,_0x59a6aa){const _0x536dbf=_0x46ffcc;if(this[_0x536dbf(0x10e)]())return _0x59a6aa;const _0x417951=this[_0x536dbf(0xaa4)](),_0x555def=_0x352867;let _0x353be3=[],_0x5a7599=[];_0x353be3['push'](this['_armorPenetration'][_0x536dbf(0x442)],this[_0x536dbf(0x8b9)]['arRedFlat']),_0x5a7599[_0x536dbf(0x40a)](this['_armorPenetration'][_0x536dbf(0xac9)],this[_0x536dbf(0x8b9)][_0x536dbf(0xa7a)]);const _0x229336=this[_0x536dbf(0xb41)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x26235f=this[_0x536dbf(0xb41)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5ae20f=this[_0x536dbf(0xb41)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x440b3d=this[_0x536dbf(0xb41)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x353be3=_0x353be3[_0x536dbf(0x385)](_0x555def['traitObjects']()[_0x536dbf(0x6cd)](_0x302b0b=>_0x302b0b&&_0x302b0b['note']['match'](_0x229336)?Number(RegExp['$1']):0x0)),_0x5a7599=_0x5a7599[_0x536dbf(0x385)](_0x555def['traitObjects']()[_0x536dbf(0x6cd)](_0x3ba83c=>_0x3ba83c&&_0x3ba83c[_0x536dbf(0x8fd)][_0x536dbf(0xe0)](_0x26235f)?Number(RegExp['$1'])/0x64:0x0)),_0x353be3=_0x353be3['concat'](_0x417951['traitObjects']()[_0x536dbf(0x6cd)](_0x11a5d7=>_0x11a5d7&&_0x11a5d7[_0x536dbf(0x8fd)][_0x536dbf(0xe0)](_0x5ae20f)?Number(RegExp['$1']):0x0)),_0x5a7599=_0x5a7599[_0x536dbf(0x385)](_0x417951[_0x536dbf(0x105)]()[_0x536dbf(0x6cd)](_0x4e04d2=>_0x4e04d2&&_0x4e04d2['note'][_0x536dbf(0xe0)](_0x440b3d)?Number(RegExp['$1'])/0x64:0x0)),this[_0x536dbf(0x50d)]()[_0x536dbf(0x8fd)][_0x536dbf(0xe0)](_0x5ae20f)&&_0x353be3[_0x536dbf(0x40a)](Number(RegExp['$1'])),this['item']()[_0x536dbf(0x8fd)]['match'](_0x440b3d)&&_0x5a7599[_0x536dbf(0x40a)](Number(RegExp['$1'])),_0x59a6aa=_0x353be3['reduce']((_0x29cd7f,_0x53b5ea)=>_0x29cd7f-_0x53b5ea,_0x59a6aa),_0x59a6aa>0x0&&(_0x59a6aa=_0x5a7599[_0x536dbf(0x790)]((_0x1e6998,_0xbfdcc2)=>_0x1e6998*(0x1-_0xbfdcc2),_0x59a6aa)),_0x59a6aa;},VisuMZ['BattleCore']['Game_Action_executeDamage']=Game_Action['prototype'][_0x46ffcc(0x803)],Game_Action[_0x46ffcc(0x9c1)]['executeDamage']=function(_0x365fc3,_0x5bb18a){const _0x4e013e=_0x46ffcc;_0x5bb18a=_0x5bb18a*this['_multipliers'][_0x4e013e(0x98b)],_0x5bb18a+=this['_multipliers'][_0x4e013e(0x2d8)]*(_0x5bb18a>=0x0?0x1:-0x1),_0x5bb18a=this[_0x4e013e(0x104)](_0x4e013e(0xa8c),_0x365fc3,_0x5bb18a,![]),_0x5bb18a=this[_0x4e013e(0x83c)](_0x5bb18a),_0x5bb18a>0x0?_0x5bb18a=Math['ceil'](_0x5bb18a):_0x5bb18a=Math[_0x4e013e(0x27a)](_0x5bb18a),this['_executedValue']=_0x5bb18a,this[_0x4e013e(0x84c)]=this[_0x4e013e(0x84c)]||0x0,this[_0x4e013e(0x84c)]+=_0x5bb18a,VisuMZ[_0x4e013e(0x354)]['Game_Action_executeDamage'][_0x4e013e(0x2e0)](this,_0x365fc3,_0x5bb18a),this['applyBattleCoreJS'](_0x4e013e(0x334),_0x365fc3,_0x5bb18a,!![]);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x83c)]=function(_0x4236dc){const _0x135110=_0x46ffcc;if(this[_0x135110(0x669)]())return _0x4236dc;return _0x4236dc=this['applySoftDamageCap'](_0x4236dc),_0x4236dc=this[_0x135110(0x3a2)](_0x4236dc),_0x4236dc;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x669)]=function(){const _0x58e146=_0x46ffcc,_0x25facc=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x58e146(0x8fd)][_0x58e146(0xe0)](_0x25facc))return!![];if(this[_0x58e146(0xaa4)]()[_0x58e146(0x105)]()[_0x58e146(0x67d)](_0x437885=>_0x437885&&_0x437885[_0x58e146(0x8fd)][_0x58e146(0xe0)](_0x25facc)))return!![];return!VisuMZ[_0x58e146(0x354)][_0x58e146(0x59e)][_0x58e146(0x896)][_0x58e146(0x558)];},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x859)]=function(_0x207e31){const _0x67a70d=_0x46ffcc;if(!VisuMZ[_0x67a70d(0x354)][_0x67a70d(0x59e)]['Damage'][_0x67a70d(0x2a1)])return _0x207e31;const _0x187711=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x67a70d(0xe0)](_0x187711))return _0x207e31;if(this[_0x67a70d(0xaa4)]()[_0x67a70d(0x105)]()['some'](_0x487e7f=>_0x487e7f&&_0x487e7f[_0x67a70d(0x8fd)][_0x67a70d(0xe0)](_0x187711)))return _0x207e31;const _0x4fafe3=_0x207e31<0x0?-0x1:0x1;_0x207e31=Math[_0x67a70d(0x4d3)](_0x207e31);let _0x5b4a5b=this[_0x67a70d(0xaa4)]()[_0x67a70d(0x14c)]();this[_0x67a70d(0x50d)]()['note'][_0x67a70d(0xe0)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x5b4a5b+=Number(RegExp['$1'])/0x64);_0x5b4a5b=_0x5b4a5b[_0x67a70d(0xae8)](0.01,0x1);const _0x12fed3=this['getHardDamageCap'](),_0xc6e036=_0x5b4a5b*_0x12fed3;if(_0x207e31>_0xc6e036&&_0x12fed3>_0xc6e036){_0x207e31-=_0xc6e036;const _0x54f6df=VisuMZ[_0x67a70d(0x354)][_0x67a70d(0x59e)][_0x67a70d(0x896)][_0x67a70d(0x626)],_0x4d38a3=Math[_0x67a70d(0x148)](0x1-_0x207e31/((_0x12fed3-_0xc6e036)*_0x54f6df+_0x207e31),0.01);_0x207e31*=_0x4d38a3,_0x207e31+=_0xc6e036;}return _0x207e31*_0x4fafe3;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x898)]=function(){const _0x4e5c53=_0x46ffcc;return this[_0x4e5c53(0x50d)]()['note']['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x4e5c53(0xaa4)]()[_0x4e5c53(0xaef)]();},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x3a2)]=function(_0x1a7b9c){const _0x24f3fe=_0x46ffcc;let _0x3ff41f=this['getHardDamageCap']();return _0x1a7b9c[_0x24f3fe(0xae8)](-_0x3ff41f,_0x3ff41f);},Game_Action['prototype']['shouldDisperseDamage']=function(){const _0x3ef479=_0x46ffcc;if(!this['item']())return![];if(!$gameParty[_0x3ef479(0x40c)]())return![];return(this['item']()['note']||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x641)]=function(_0x23d8db){const _0x526bde=_0x46ffcc;if(this[_0x526bde(0x7cb)]()){let _0x37e45a=BattleManager[_0x526bde(0x2ab)];_0x23d8db/=_0x37e45a['length'],this[_0x526bde(0x3ed)]()&&(_0x23d8db*=this[_0x526bde(0xaa4)]()['attackTimesAdd']()+0x1),_0x23d8db=_0x23d8db>0x0?Math[_0x526bde(0xa14)](_0x23d8db):Math[_0x526bde(0x27a)](_0x23d8db);}return _0x23d8db;},VisuMZ[_0x46ffcc(0x354)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x706)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x706)]=function(_0x2b2a6,_0x5b10a6){const _0x450aba=_0x46ffcc;let _0x4263ca=VisuMZ[_0x450aba(0x354)]['Game_Action_makeDamageValueDisperse'][_0x450aba(0x2e0)](this,_0x2b2a6,_0x5b10a6);return this['disperseDamage'](_0x4263ca);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xb1d)]=function(_0x6d8897,_0x13d9dd){const _0x2aba04=_0x46ffcc;let _0x2645af=(_0x6d8897[_0x2aba04(0x95a)]*_0x13d9dd[_0x2aba04(0x43a)]+_0x13d9dd['value2'])*_0x6d8897[_0x2aba04(0x459)];_0x2645af=this[_0x2aba04(0x641)](_0x2645af),this[_0x2aba04(0xb79)]()&&(_0x2645af*=this['subject']()['pha']),_0x2645af=Math[_0x2aba04(0x27a)](_0x2645af),_0x2645af!==0x0&&(_0x6d8897['gainHp'](_0x2645af),this[_0x2aba04(0x295)](_0x6d8897));},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x329)]=function(_0x2735c0,_0x568298){const _0x3c8ea0=_0x46ffcc;let _0x32096e=(_0x2735c0[_0x3c8ea0(0x6f0)]*_0x568298[_0x3c8ea0(0x43a)]+_0x568298[_0x3c8ea0(0x730)])*_0x2735c0[_0x3c8ea0(0x459)];_0x32096e=this[_0x3c8ea0(0x641)](_0x32096e),this[_0x3c8ea0(0xb79)]()&&(_0x32096e*=this[_0x3c8ea0(0xaa4)]()[_0x3c8ea0(0x30c)]),_0x32096e=Math[_0x3c8ea0(0x27a)](_0x32096e),_0x32096e!==0x0&&(_0x2735c0['gainMp'](_0x32096e),this[_0x3c8ea0(0x295)](_0x2735c0));},Game_Action['prototype'][_0x46ffcc(0x213)]=function(_0x580c06,_0x3ab4ca){const _0x2b86dc=_0x46ffcc;let _0x1c0586=Math[_0x2b86dc(0x27a)](_0x3ab4ca[_0x2b86dc(0x43a)]);_0x1c0586=this[_0x2b86dc(0x641)](_0x1c0586),_0x1c0586!==0x0&&(_0x580c06[_0x2b86dc(0x14d)](_0x1c0586),this[_0x2b86dc(0x295)](_0x580c06));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7aa)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa9f)],Game_Action[_0x46ffcc(0x9c1)]['apply']=function(_0x4a8747){const _0x500fdb=_0x46ffcc;if(_0x4a8747&&_0x4a8747[_0x500fdb(0x656)]())_0x4a8747['resetNameTempVisibility']();this[_0x500fdb(0x104)]('PreApply%1JS',_0x4a8747,0x0,!![]),VisuMZ['BattleCore'][_0x500fdb(0x7aa)][_0x500fdb(0x2e0)](this,_0x4a8747),this[_0x500fdb(0x104)]('PostApply%1JS',_0x4a8747,this[_0x500fdb(0x373)]||0x0,!![]),this[_0x500fdb(0x1b9)](_0x4a8747);},Game_Action[_0x46ffcc(0x9c1)]['applyBattleCoreJS']=function(_0x2bc245,_0x1debf5,_0x4657a5,_0x3fc6ba){const _0x2ea5d5=_0x46ffcc;if(this['_tempBattler']||this[_0x2ea5d5(0x48c)])return;_0x4657a5=_0x4657a5||0x0;const _0x1c0edf=_0x4657a5,_0x5b4579=VisuMZ['BattleCore'][_0x2ea5d5(0x59e)][_0x2ea5d5(0xac4)],_0x416c5a=_0x2bc245['format']('');if(_0x5b4579[_0x416c5a]){_0x4657a5=_0x5b4579[_0x416c5a][_0x2ea5d5(0x2e0)](this,_0x4657a5,_0x1debf5);if(_0x3fc6ba)_0x4657a5=_0x1c0edf;}let _0x214dce=VisuMZ['BattleCore']['createKeyJS'](this[_0x2ea5d5(0x50d)](),_0x2bc245[_0x2ea5d5(0x498)](''));if(VisuMZ[_0x2ea5d5(0x354)]['JS'][_0x214dce]){_0x4657a5=VisuMZ[_0x2ea5d5(0x354)]['JS'][_0x214dce][_0x2ea5d5(0x2e0)](this,this[_0x2ea5d5(0xaa4)](),_0x1debf5,this[_0x2ea5d5(0x50d)](),_0x4657a5);if(_0x3fc6ba)_0x4657a5=_0x1c0edf;}for(const _0xbdc9d of this['subject']()[_0x2ea5d5(0x105)]()){if(!_0xbdc9d)continue;_0x214dce=VisuMZ[_0x2ea5d5(0x354)][_0x2ea5d5(0x4be)](_0xbdc9d,_0x2bc245[_0x2ea5d5(0x498)](_0x2ea5d5(0xa18)));if(VisuMZ[_0x2ea5d5(0x354)]['JS'][_0x214dce]){_0x4657a5=VisuMZ[_0x2ea5d5(0x354)]['JS'][_0x214dce][_0x2ea5d5(0x2e0)](this,this[_0x2ea5d5(0xaa4)](),_0x1debf5,_0xbdc9d,_0x4657a5);if(_0x3fc6ba)_0x4657a5=_0x1c0edf;}}for(const _0xe7abb2 of _0x1debf5[_0x2ea5d5(0x105)]()){if(!_0xe7abb2)continue;_0x214dce=VisuMZ['BattleCore']['createKeyJS'](_0xe7abb2,_0x2bc245['format'](_0x2ea5d5(0x6ce)));if(VisuMZ['BattleCore']['JS'][_0x214dce]){_0x4657a5=VisuMZ[_0x2ea5d5(0x354)]['JS'][_0x214dce][_0x2ea5d5(0x2e0)](this,this[_0x2ea5d5(0xaa4)](),_0x1debf5,_0xe7abb2,_0x4657a5);if(_0x3fc6ba)_0x4657a5=_0x1c0edf;}}return _0x4657a5;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x51e)]=function(_0x5c868d){const _0x2494ef=_0x46ffcc,_0x220205=this[_0x2494ef(0x84c)]||0x0,_0x1b9dbb=VisuMZ['BattleCore'][_0x2494ef(0x59e)][_0x2494ef(0xac4)],_0x42dab5=_0x5c868d[_0x2494ef(0x498)]('');_0x1b9dbb[_0x42dab5]&&_0x1b9dbb[_0x42dab5][_0x2494ef(0x2e0)](this,_0x220205);let _0x2c74c5=VisuMZ['BattleCore'][_0x2494ef(0x4be)](this['item'](),_0x5c868d);VisuMZ[_0x2494ef(0x354)]['JS'][_0x2c74c5]&&VisuMZ[_0x2494ef(0x354)]['JS'][_0x2c74c5][_0x2494ef(0x2e0)](this,this['subject'](),this[_0x2494ef(0xaa4)](),this[_0x2494ef(0x50d)](),_0x220205);for(const _0x342bd6 of this[_0x2494ef(0xaa4)]()[_0x2494ef(0x105)]()){if(!_0x342bd6)continue;_0x2c74c5=VisuMZ[_0x2494ef(0x354)][_0x2494ef(0x4be)](_0x342bd6,_0x5c868d),VisuMZ['BattleCore']['JS'][_0x2c74c5]&&VisuMZ[_0x2494ef(0x354)]['JS'][_0x2c74c5]['call'](this,this[_0x2494ef(0xaa4)](),this['subject'](),_0x342bd6,_0x220205);}},Game_Action['prototype'][_0x46ffcc(0x893)]=function(){const _0x2355f1=_0x46ffcc;return VisuMZ['BattleCore'][_0x2355f1(0x59e)]['Mechanics'][_0x2355f1(0x380)][_0x2355f1(0x2e0)](this);},Game_Action['prototype'][_0x46ffcc(0x542)]=function(){const _0x157bc9=_0x46ffcc;return VisuMZ['BattleCore']['Settings'][_0x157bc9(0xac4)][_0x157bc9(0x4ca)];},Game_Action[_0x46ffcc(0x9c1)]['isCustomBattleScope']=function(){const _0xe0b890=_0x46ffcc;if(this['_targetBattlerKey']===_0xe0b890(0xaa5))return![];if(this[_0xe0b890(0x277)]==='all\x20enemies')return![];if(!this[_0xe0b890(0x50d)]())return![];return this[_0xe0b890(0x50d)]()['note'][_0xe0b890(0xe0)](/<JS TARGETS>/i);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x977)]=function(){const _0x57d371=_0x46ffcc;if(this[_0x57d371(0x277)]===_0x57d371(0xaa5))return![];if(this[_0x57d371(0x277)]===_0x57d371(0xa95))return![];if(!this[_0x57d371(0x1ce)]&&this[_0x57d371(0xaa4)]()[_0x57d371(0x4e6)]())return![];if(this[_0x57d371(0x4f1)]())return!![];if(!this[_0x57d371(0x50d)]())return![];return typeof this[_0x57d371(0x50d)]()[_0x57d371(0x64e)]===_0x57d371(0x575);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x806)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x2c5)],Game_Action['prototype'][_0x46ffcc(0x2c5)]=function(){const _0xa6b407=_0x46ffcc;if(this[_0xa6b407(0x277)]===_0xa6b407(0xaa5))return![];if(this[_0xa6b407(0x277)]===_0xa6b407(0xa95))return!![];return this[_0xa6b407(0x977)]()&&!this[_0xa6b407(0x4f1)]()?this[_0xa6b407(0xb1c)]():VisuMZ[_0xa6b407(0x354)][_0xa6b407(0x806)][_0xa6b407(0x2e0)](this);},Game_Action['prototype'][_0x46ffcc(0xb1c)]=function(){const _0x4f7c4b=_0x46ffcc,_0x537bdc=String(this['item']()[_0x4f7c4b(0x64e)]);if(_0x537bdc['match'](/ANY/i))return!![];return _0x537bdc['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x8d7)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x3fb)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x3fb)]=function(){const _0x4073da=_0x46ffcc;if(this[_0x4073da(0x277)]===_0x4073da(0xaa5))return!![];if(this[_0x4073da(0x277)]===_0x4073da(0xa95))return![];return this[_0x4073da(0x977)]()&&!this[_0x4073da(0x4f1)]()?this[_0x4073da(0x1a7)]():VisuMZ[_0x4073da(0x354)]['Game_Action_isForFriend'][_0x4073da(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x1a7)]=function(){const _0x26961b=_0x46ffcc,_0x277592=String(this[_0x26961b(0x50d)]()[_0x26961b(0x64e)]);return _0x277592['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x84e)]=function(){const _0x27e53e=_0x46ffcc;if(this[_0x27e53e(0x977)]()&&!this[_0x27e53e(0x4f1)]()){const _0x4e5541=String(this[_0x27e53e(0x50d)]()[_0x27e53e(0x64e)]);return _0x4e5541[_0x27e53e(0xe0)](/(?:ENEMY|FOE)/i)&&_0x4e5541['match'](/OR/i)&&_0x4e5541[_0x27e53e(0xe0)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x46ffcc(0x9c1)]['isForAnyoneFocusFriends']=function(){const _0x1f6432=_0x46ffcc;if(this[_0x1f6432(0x84e)]()){const _0x37bc48=String(this[_0x1f6432(0x50d)]()[_0x1f6432(0x64e)]);if(_0x37bc48[_0x1f6432(0xe0)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x46ffcc(0x9c1)]['isForAnyoneFocusOpponents']=function(){const _0x3e475b=_0x46ffcc;if(this[_0x3e475b(0x84e)]()){const _0x1bc05c=String(this['item']()[_0x3e475b(0x64e)]);if(_0x1bc05c['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x46ffcc(0x354)]['Game_Action_isForAliveFriend']=Game_Action['prototype'][_0x46ffcc(0xac2)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xac2)]=function(){const _0x1a10d1=_0x46ffcc;if(this[_0x1a10d1(0x277)]===_0x1a10d1(0xaa5))return!![];return this[_0x1a10d1(0x977)]()&&!this[_0x1a10d1(0x4f1)]()?this[_0x1a10d1(0xb0c)]():VisuMZ[_0x1a10d1(0x354)][_0x1a10d1(0x8bb)][_0x1a10d1(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb7f)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa85)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa85)]=function(){const _0x75d24c=_0x46ffcc;if(this[_0x75d24c(0x277)]===_0x75d24c(0xaa5))return VisuMZ['BattleCore'][_0x75d24c(0xb7f)][_0x75d24c(0x2e0)](this);return VisuMZ['BattleCore'][_0x75d24c(0xb7f)][_0x75d24c(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0c)]=function(){const _0x5f3318=_0x46ffcc;if(this[_0x5f3318(0x84e)]())return!![];return![];},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x3b3)]=function(){const _0x966b73=_0x46ffcc;return this[_0x966b73(0x50d)]()&&this['item']()['note'][_0x966b73(0xe0)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x46ffcc(0x3f8)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x28a)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x28a)]=function(){const _0x979db9=_0x46ffcc;if(this[_0x979db9(0x277)]===_0x979db9(0xaa5))return![];if(this[_0x979db9(0x277)]===_0x979db9(0xa95))return![];return this[_0x979db9(0x977)]()&&!this[_0x979db9(0x4f1)]()?this[_0x979db9(0xa33)]():VisuMZ['BattleCore']['Game_Action_isForOne'][_0x979db9(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa33)]=function(){const _0x2d4387=_0x46ffcc;if(this[_0x2d4387(0x84e)]())return!![];return![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x42a)]=Game_Action['prototype'][_0x46ffcc(0x595)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x595)]=function(){const _0x5c55a8=_0x46ffcc;if(this['_targetBattlerKey']===_0x5c55a8(0xaa5))return![];if(this[_0x5c55a8(0x277)]===_0x5c55a8(0xa95))return![];return this[_0x5c55a8(0x977)]()&&!this[_0x5c55a8(0x4f1)]()?this[_0x5c55a8(0x663)]():VisuMZ[_0x5c55a8(0x354)]['Game_Action_isForRandom'][_0x5c55a8(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x663)]=function(){const _0x313567=_0x46ffcc,_0x1dec91=String(this['item']()[_0x313567(0x64e)]);return _0x1dec91[_0x313567(0xe0)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x66e)]=Game_Action[_0x46ffcc(0x9c1)]['isForAll'],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x346)]=function(){const _0x3d937f=_0x46ffcc;if(this[_0x3d937f(0x277)]===_0x3d937f(0xaa5))return!![];if(this[_0x3d937f(0x277)]===_0x3d937f(0xa95))return!![];return VisuMZ[_0x3d937f(0x354)][_0x3d937f(0x66e)][_0x3d937f(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x82c)]=function(){const _0x261eeb=_0x46ffcc;if(!this[_0x261eeb(0x50d)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x261eeb(0x50d)]()[_0x261eeb(0x8fd)]||'')[_0x261eeb(0xe0)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x888)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x276)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x276)]=function(_0x57f2da){const _0x291a77=_0x46ffcc;if(this[_0x291a77(0x3b3)]()&&_0x57f2da===this[_0x291a77(0xaa4)]())return![];return VisuMZ['BattleCore']['Game_Action_testApply'][_0x291a77(0x2e0)](this,_0x57f2da);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb5e)]=Game_Action[_0x46ffcc(0x9c1)]['itemTargetCandidates'],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xba0)]=function(){const _0x3c3eed=_0x46ffcc,_0x103908=VisuMZ['BattleCore'][_0x3c3eed(0xb5e)][_0x3c3eed(0x2e0)](this);if(this['isForNotUser']())_0x103908['remove'](this[_0x3c3eed(0xaa4)]());return _0x103908;},VisuMZ[_0x46ffcc(0x354)]['Game_Action_needsSelection']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xafc)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xafc)]=function(){const _0x3b5a98=_0x46ffcc;return this[_0x3b5a98(0x977)]()&&!this[_0x3b5a98(0x4f1)]()?this['needsSelectionBattleCore']():VisuMZ[_0x3b5a98(0x354)][_0x3b5a98(0x50b)][_0x3b5a98(0x2e0)](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x1c3)]=function(){const _0x49a856=_0x46ffcc,_0x11d920=String(this[_0x49a856(0x50d)]()[_0x49a856(0x64e)]);if(_0x11d920[_0x49a856(0xe0)](/RANDOM/i))return![];if(_0x11d920[_0x49a856(0xe0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x11d920[_0x49a856(0xe0)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x11d920['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x11d920[_0x49a856(0xe0)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore']['Game_Action_needsSelection']['call'](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x9db)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xbef)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xbef)]=function(){const _0x5b3f7d=_0x46ffcc;let _0xc2c9ca=[];return this[_0x5b3f7d(0x977)]()?this['isCustomBattleScope']()?_0xc2c9ca=this[_0x5b3f7d(0x47b)]():_0xc2c9ca=this[_0x5b3f7d(0x1ed)]():_0xc2c9ca=VisuMZ['BattleCore'][_0x5b3f7d(0x9db)][_0x5b3f7d(0x2e0)](this),_0xc2c9ca=this['applyTargetFilters'](_0xc2c9ca),_0xc2c9ca;},Game_Action['prototype'][_0x46ffcc(0xa6d)]=function(){const _0x12c2e6=_0x46ffcc;return this['subject']()[_0x12c2e6(0x738)]()&&!this['subject']()[_0x12c2e6(0x89d)]();},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x47b)]=function(){const _0x411ae3=_0x46ffcc,_0x5dd23e=VisuMZ[_0x411ae3(0x354)][_0x411ae3(0x4be)](this[_0x411ae3(0x50d)](),'Targets');if(VisuMZ[_0x411ae3(0x354)]['JS'][_0x5dd23e]){targets=VisuMZ['BattleCore']['Game_Action_makeTargets'][_0x411ae3(0x2e0)](this);const _0x3b64b9=VisuMZ[_0x411ae3(0x354)][_0x411ae3(0x4be)](this[_0x411ae3(0x50d)](),_0x411ae3(0xb78));return targets=VisuMZ[_0x411ae3(0x354)]['JS'][_0x3b64b9][_0x411ae3(0x2e0)](this,this[_0x411ae3(0xaa4)](),targets),this[_0x411ae3(0x235)](targets);}return this[_0x411ae3(0x1ed)]();},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x1ed)]=function(){const _0x5e869f=_0x46ffcc;let _0x5bd210=[];const _0x53cd13=String(this[_0x5e869f(0x50d)]()[_0x5e869f(0x64e)]);if(this[_0x5e869f(0xbca)]())return this['isSubjectValidForAnyoneSelect']()?(_0x5bd210=this['getBattlerKeyTargets'](),this['repeatTargets'](_0x5bd210)):(this['_targetIndex']=-0x1,_0x5bd210[_0x5e869f(0x40a)](...this[_0x5e869f(0x48f)]()),this[_0x5e869f(0x235)](_0x5bd210));if(this['isForAnyoneFocusFriends']()){if(this[_0x5e869f(0xa6d)]())return _0x5bd210=this[_0x5e869f(0x6ea)](),this[_0x5e869f(0x235)](_0x5bd210);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ[_0x5e869f(0x676)][_0x5e869f(0x613)]<1.19){let _0x3da555='';_0x3da555+=_0x5e869f(0x667),_0x3da555+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x3da555+=_0x5e869f(0x96f),alert(_0x3da555),SceneManager[_0x5e869f(0x462)]();}}return this[_0x5e869f(0x820)]=-0x1,_0x5bd210['push'](...this[_0x5e869f(0x8f7)]()),this[_0x5e869f(0x235)](_0x5bd210);}}if(_0x53cd13[_0x5e869f(0xe0)](/(\d+) RANDOM ANY/i)){let _0x2851f4=Number(RegExp['$1']);while(_0x2851f4--){const _0x3d7891=Math['randomInt'](0x2)===0x0?this[_0x5e869f(0xbea)]():this[_0x5e869f(0xa71)]();_0x5bd210[_0x5e869f(0x40a)](_0x3d7891[_0x5e869f(0x3e1)]());}return this[_0x5e869f(0x235)](_0x5bd210);}if(_0x53cd13[_0x5e869f(0xe0)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0xe3a13d=Number(RegExp['$1']);while(_0xe3a13d--){_0x5bd210[_0x5e869f(0x40a)](this[_0x5e869f(0xbea)]()[_0x5e869f(0x3e1)]());}return this['repeatTargets'](_0x5bd210);}if(_0x53cd13[_0x5e869f(0xe0)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x59eb06=Number(RegExp['$1']);while(_0x59eb06--){_0x5bd210[_0x5e869f(0x40a)](this[_0x5e869f(0xa71)]()['trueRandomTarget']());}return this[_0x5e869f(0x235)](_0x5bd210);}if(_0x53cd13[_0x5e869f(0xe0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5bd210[_0x5e869f(0x40a)](...this[_0x5e869f(0xa71)]()[_0x5e869f(0x312)]()[_0x5e869f(0x8ba)](_0x2cf4d9=>_0x2cf4d9!==this[_0x5e869f(0xaa4)]())),this[_0x5e869f(0x235)](_0x5bd210);return VisuMZ['BattleCore'][_0x5e869f(0x9db)]['call'](this);},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f7)]=function(_0x18a072){const _0x1bc395=_0x46ffcc,_0x423eef=[];for(let _0x55d33b=0x0;_0x55d33b<this[_0x1bc395(0xbb6)]();_0x55d33b++){_0x423eef['push'](_0x18a072['trueRandomTarget']());}return _0x423eef;},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x33c)]=function(_0x5f475b){const _0x55a94b=_0x46ffcc;if(!this[_0x55a94b(0x50d)]())return _0x5f475b;const _0x51f35d=this[_0x55a94b(0x50d)]()[_0x55a94b(0x8fd)];if(this[_0x55a94b(0x3b3)]()){this[_0x55a94b(0x346)]()&&_0x5f475b[_0x55a94b(0x112)](this['subject']());if(_0x5f475b['includes'](this[_0x55a94b(0xaa4)]())){const _0x158b33=this['friendsUnit']()[_0x55a94b(0x312)]()[_0x55a94b(0x112)](this['subject']());if(_0x158b33[_0x55a94b(0x9bf)]>0x0){_0x158b33['sort']((_0x2a3f9b,_0x33b29a)=>_0x2a3f9b[_0x55a94b(0xb9c)]()-_0x33b29a[_0x55a94b(0xb9c)]());while(_0x5f475b[_0x55a94b(0x6a2)](this[_0x55a94b(0xaa4)]())){const _0x491a38=_0x5f475b[_0x55a94b(0xb8c)](this[_0x55a94b(0xaa4)]());_0x5f475b[_0x491a38]=_0x158b33[Math[_0x55a94b(0xcd)](_0x158b33[_0x55a94b(0x9bf)])];}}else _0x5f475b[_0x55a94b(0x112)](this[_0x55a94b(0xaa4)]());}}return _0x5f475b;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x99b)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x4b2)],Game_Action[_0x46ffcc(0x9c1)]['itemEffectAddAttackState']=function(_0x4ad81c,_0x3829fb){const _0x19faad=_0x46ffcc;VisuMZ[_0x19faad(0x354)]['Game_Action_itemEffectAddAttackState'][_0x19faad(0x2e0)](this,_0x4ad81c,_0x3829fb);if(!_0x4ad81c[_0x19faad(0x4a3)]())return;for(const _0x4c24e8 of this[_0x19faad(0xaa4)]()[_0x19faad(0x490)]()){if(_0x4c24e8===_0x4ad81c['deathStateId']()){let _0x206e7c=_0x3829fb[_0x19faad(0x43a)];_0x206e7c*=_0x4ad81c[_0x19faad(0x868)](_0x4c24e8),_0x206e7c*=this[_0x19faad(0xaa4)]()[_0x19faad(0x5aa)](_0x4c24e8),_0x206e7c*=this[_0x19faad(0xa94)](_0x4ad81c),Math['random']()<_0x206e7c&&(_0x4ad81c['_deathStateApplied']=!![],this[_0x19faad(0x295)](_0x4ad81c));}}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x51b)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x8ac)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x8ac)]=function(_0x43cc9e,_0x14b084){const _0x4f291c=_0x46ffcc;VisuMZ[_0x4f291c(0x354)][_0x4f291c(0x51b)]['call'](this,_0x43cc9e,_0x14b084);if(!_0x43cc9e[_0x4f291c(0x4a3)]())return;if(_0x14b084[_0x4f291c(0x32c)]!==_0x43cc9e[_0x4f291c(0xdc)]())return;let _0x24276f=_0x14b084[_0x4f291c(0x43a)];!this[_0x4f291c(0x10e)]()&&(_0x24276f*=_0x43cc9e[_0x4f291c(0x868)](_0x14b084[_0x4f291c(0x32c)]),_0x24276f*=this[_0x4f291c(0xa94)](_0x43cc9e)),Math[_0x4f291c(0x7a6)]()<_0x24276f&&(_0x43cc9e[_0x4f291c(0x7ae)]=!![],this[_0x4f291c(0x295)](_0x43cc9e));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7d6)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x2f3)],Game_Action['prototype'][_0x46ffcc(0x2f3)]=function(){const _0x5f124e=_0x46ffcc;VisuMZ[_0x5f124e(0x354)][_0x5f124e(0x7d6)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x5f124e(0x79b)]();},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0xa25)]=function(){const _0x468259=_0x46ffcc;if(!SceneManager[_0x468259(0xaf2)]())return;const _0xb5f341=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5d1b53=this['item']()[_0x468259(0x8fd)][_0x468259(0xe0)](_0xb5f341);if(_0x5d1b53)for(const _0x57ca4a of _0x5d1b53){if(!_0x57ca4a)continue;_0x57ca4a[_0x468259(0xe0)](_0xb5f341);const _0x54d7dd=String(RegExp['$1'])[_0x468259(0x4f9)](',')['map'](_0x379358=>String(_0x379358)[_0x468259(0xafd)]()),_0x449597=_0x54d7dd[_0x468259(0x6cd)](_0xf0b4f4=>DataManager[_0x468259(0x7c5)](_0xf0b4f4));for(const _0x14ded6 of _0x449597){const _0x39dc9e=$dataCommonEvents[_0x14ded6];_0x39dc9e&&$gameTemp[_0x468259(0x9aa)](_0x14ded6);}}},DataManager['getCommonEventIdWithName']=function(_0x133553){const _0x119df2=_0x46ffcc;_0x133553=_0x133553[_0x119df2(0x7b1)]()[_0x119df2(0xafd)](),this[_0x119df2(0x9fa)]=this[_0x119df2(0x9fa)]||{};if(this[_0x119df2(0x9fa)][_0x133553])return this[_0x119df2(0x9fa)][_0x133553];for(const _0x4d23dd of $dataCommonEvents){if(!_0x4d23dd)continue;let _0x534355=_0x4d23dd[_0x119df2(0x1a8)];_0x534355=_0x534355[_0x119df2(0x5c1)](/\x1I\[(\d+)\]/gi,''),_0x534355=_0x534355[_0x119df2(0x5c1)](/\\I\[(\d+)\]/gi,''),this[_0x119df2(0x9fa)][_0x534355[_0x119df2(0x7b1)]()[_0x119df2(0xafd)]()]=_0x4d23dd['id'];}return this[_0x119df2(0x9fa)][_0x133553]||0x0;},Game_Action[_0x46ffcc(0x9c1)]['resetResultSwitches']=function(){const _0x31016e=_0x46ffcc;if(!SceneManager[_0x31016e(0xaf2)]())return;const _0x5b956a=VisuMZ['BattleCore'][_0x31016e(0x59e)][_0x31016e(0xac4)];_0x5b956a[_0x31016e(0xa89)]&&$gameSwitches[_0x31016e(0x7f0)](_0x5b956a[_0x31016e(0xa89)],![]),_0x5b956a[_0x31016e(0x2dc)]&&$gameSwitches['setValue'](_0x5b956a[_0x31016e(0x2dc)],![]),_0x5b956a['VariableDmg']&&$gameVariables['setValue'](_0x5b956a['VariableDmg'],0x0),_0x5b956a['VariableHeal']&&$gameVariables['setValue'](_0x5b956a[_0x31016e(0x208)],0x0);},Game_Action['prototype']['applyResultSwitches']=function(_0xe24699){const _0x5c9447=_0x46ffcc;if(!SceneManager[_0x5c9447(0xaf2)]())return;if(!_0xe24699)return;const _0x58d87f=_0xe24699['result'](),_0x19dfb3=VisuMZ[_0x5c9447(0x354)][_0x5c9447(0x59e)]['Mechanics'];_0x19dfb3['SwitchCritical']&&_0x58d87f[_0x5c9447(0x3c7)]&&$gameSwitches[_0x5c9447(0x7f0)](_0x19dfb3['SwitchCritical'],!![]);_0x19dfb3[_0x5c9447(0x2dc)]&&(_0x58d87f[_0x5c9447(0x850)]||_0x58d87f[_0x5c9447(0x7eb)])&&$gameSwitches['setValue'](_0x19dfb3[_0x5c9447(0x2dc)],!![]);if(_0x19dfb3['VariableDmg']){let _0x2dba97=$gameVariables[_0x5c9447(0x944)](_0x19dfb3[_0x5c9447(0x7b0)]);_0x58d87f['hpDamage']>0x0&&(_0x2dba97+=Math['abs'](_0x58d87f[_0x5c9447(0x77c)])),$gameVariables[_0x5c9447(0x7f0)](_0x19dfb3[_0x5c9447(0x7b0)],_0x2dba97);}if(_0x19dfb3[_0x5c9447(0x208)]){let _0x68ee7b=$gameVariables['value'](_0x19dfb3[_0x5c9447(0x208)]);_0x58d87f[_0x5c9447(0x77c)]<0x0&&(_0x68ee7b+=Math[_0x5c9447(0x4d3)](_0x58d87f[_0x5c9447(0x77c)])),$gameVariables[_0x5c9447(0x7f0)](_0x19dfb3['VariableHeal'],_0x68ee7b);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x776)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x588)]=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x83b)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x83b)]=function(_0x4f6e94,_0x44b991){const _0x39ae7c=_0x46ffcc;VisuMZ[_0x39ae7c(0x354)][_0x39ae7c(0x588)][_0x39ae7c(0x2e0)](this,_0x4f6e94,_0x44b991);!this['isDrain']()&&_0x4f6e94&&_0x4f6e94['result']()[_0x39ae7c(0x77c)]>0x0&&this[_0x39ae7c(0x534)]('HP',_0x4f6e94,_0x4f6e94[_0x39ae7c(0x804)]()[_0x39ae7c(0x77c)]);if(_0x4f6e94){this[_0x39ae7c(0xa4a)]=this[_0x39ae7c(0xa4a)]||{};const _0x41e968=_0x4f6e94[_0x39ae7c(0x43f)]();this[_0x39ae7c(0xa4a)][_0x41e968]=_0x44b991;}},Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x723)]=function(_0x9cd18c){const _0x4740db=_0x46ffcc;this['_executeHpDamage']=this[_0x4740db(0xa4a)]||{};const _0x5287c6=_0x9cd18c[_0x4740db(0x43f)]();return this['_executeHpDamage'][_0x5287c6]||0x0;},VisuMZ[_0x46ffcc(0x354)]['Game_Action_executeMpDamage']=Game_Action['prototype'][_0x46ffcc(0xa1d)],Game_Action['prototype'][_0x46ffcc(0xa1d)]=function(_0x17288b,_0xde8f4d){const _0xe939ca=_0x46ffcc;VisuMZ[_0xe939ca(0x354)][_0xe939ca(0x851)][_0xe939ca(0x2e0)](this,_0x17288b,_0xde8f4d),!this[_0xe939ca(0xa01)]()&&_0x17288b&&_0x17288b['result']()[_0xe939ca(0x27e)]>0x0&&this[_0xe939ca(0x534)]('MP',_0x17288b,_0x17288b[_0xe939ca(0x804)]()['mpDamage']);},Game_Action['prototype'][_0x46ffcc(0x534)]=function(_0x2252bc,_0x5bcdec,_0x45476f){const _0x57921f=_0x46ffcc;_0x2252bc=_0x2252bc[_0x57921f(0x7b1)]()[_0x57921f(0xafd)]();const _0x2358d5=this[_0x57921f(0x8e1)](_0x2252bc,_0x5bcdec);if(_0x2358d5<=0x0)return;const _0x2d40fe=Math[_0x57921f(0x6da)](_0x45476f*_0x2358d5);if(_0x2d40fe<=0x0)return;let _0x207367=this[_0x57921f(0xaa4)]();if(this['_reflectionTarget'])_0x207367=this['_reflectionTarget'];const _0xcdfa1b=_0x5bcdec[_0x57921f(0x845)](_0x2252bc)?-0x1:0x1;if(_0x2252bc==='HP')_0x207367[_0x57921f(0x80a)](_0xcdfa1b*_0x2d40fe);if(_0x2252bc==='MP')_0x207367[_0x57921f(0x19c)](_0xcdfa1b*_0x2d40fe);},Game_Action[_0x46ffcc(0x9c1)]['lifeStealRate']=function(_0x497656,_0x523cfa){const _0x48f64e=_0x46ffcc;if(this[_0x48f64e(0xcf)](_0x497656))return 0x0;if(this[_0x48f64e(0xaa4)]()[_0x48f64e(0x20d)](_0x497656))return 0x0;if(_0x523cfa['isGuardLifeSteal'](_0x497656))return 0x0;let _0x5c334e=0x0;return _0x5c334e+=this[_0x48f64e(0x6d3)](_0x497656),_0x5c334e+=this['subject']()['lifeStealRate'](_0x497656,this[_0x48f64e(0x50d)]()['hitType']),_0x5c334e['clamp'](0x0,0x1);},Game_Action['prototype'][_0x46ffcc(0xcf)]=function(_0x5277c8){const _0x28d753=_0x46ffcc;_0x5277c8=_0x5277c8[_0x28d753(0x7b1)]()[_0x28d753(0xafd)]();const _0x28fdee=VisuMZ[_0x28d753(0x354)][_0x28d753(0x776)],_0x332f4a=this[_0x28d753(0x50d)]()[_0x28d753(0x8fd)]||'';if(_0x332f4a[_0x28d753(0xe0)](_0x28fdee[_0x28d753(0x532)]))return!![];if(_0x5277c8==='HP'&&_0x332f4a[_0x28d753(0xe0)](_0x28fdee['cancelHpLifeSteal']))return!![];if(_0x5277c8==='MP'&&_0x332f4a['match'](_0x28fdee[_0x28d753(0xbe7)]))return!![];return![];},Game_Action[_0x46ffcc(0x9c1)]['itemLifeStealRate']=function(_0x4ca6b6){const _0x545790=_0x46ffcc,_0x52ad00=VisuMZ[_0x545790(0x354)][_0x545790(0x776)],_0x12bf8e=this[_0x545790(0x50d)]()['note']||'';_0x4ca6b6=_0x4ca6b6[_0x545790(0x7b1)]()[_0x545790(0xafd)]();const _0x4e1cdc=_0x12bf8e[_0x545790(0xe0)](_0x52ad00[_0x545790(0x8c3)]);if(_0x4e1cdc)for(const _0x2d916d of _0x4e1cdc){_0x2d916d[_0x545790(0xe0)](_0x52ad00['lifeSteaItem']);const _0x20dfab=String(RegExp['$1'])[_0x545790(0x7b1)]()[_0x545790(0xafd)](),_0x22d3ec=Number(RegExp['$2'])*0.01;if(_0x20dfab!==_0x4ca6b6)continue;return _0x22d3ec;}return 0x0;},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x8e1)]=function(_0x53769e,_0x1af4b9){const _0x57fbec=_0x46ffcc,_0x244a21=VisuMZ[_0x57fbec(0x354)][_0x57fbec(0x776)];let _0x10b831=0x0;_0x53769e=_0x53769e['toUpperCase']()[_0x57fbec(0xafd)]();for(const _0x1a402a of this['traitObjects']()){if(!_0x1a402a)continue;const _0x57f128=_0x1a402a[_0x57fbec(0x8fd)]||'',_0xc5dbb=_0x57f128[_0x57fbec(0xe0)](_0x244a21['lifeStealTrait']);if(_0xc5dbb)for(const _0x2eb939 of _0xc5dbb){_0x2eb939[_0x57fbec(0xe0)](_0x244a21[_0x57fbec(0x2d9)]);const _0x2d8021=String(RegExp['$1'])['toUpperCase']()[_0x57fbec(0xafd)](),_0x5793d8=String(RegExp['$2']),_0x5d573a=Number(RegExp['$3'])*0.01;if(_0x2d8021!==_0x53769e)continue;if(_0x1af4b9===Game_Action[_0x57fbec(0x169)]&&_0x5793d8[_0x57fbec(0xe0)](/CERTAIN/i))_0x10b831+=_0x5d573a;else{if(_0x1af4b9===Game_Action[_0x57fbec(0x21b)]&&_0x5793d8[_0x57fbec(0xe0)](/PHYS/i))_0x10b831+=_0x5d573a;else _0x1af4b9===Game_Action[_0x57fbec(0x563)]&&_0x5793d8[_0x57fbec(0xe0)](/MAGIC/i)&&(_0x10b831+=_0x5d573a);}}}return _0x10b831;},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x20d)]=function(_0x2f7f93){const _0x5e772e=_0x46ffcc;_0x2f7f93=_0x2f7f93[_0x5e772e(0x7b1)]()[_0x5e772e(0xafd)]();const _0x13fea1=VisuMZ[_0x5e772e(0x354)][_0x5e772e(0x776)];for(const _0x557385 of this[_0x5e772e(0x105)]()){if(!_0x557385)continue;const _0x2578c7=_0x557385['note']||'';if(_0x2578c7['match'](_0x13fea1[_0x5e772e(0x862)]))return!![];if(_0x2f7f93==='HP'&&_0x2578c7[_0x5e772e(0xe0)](_0x13fea1[_0x5e772e(0x640)]))return!![];if(_0x2f7f93==='MP'&&_0x2578c7[_0x5e772e(0xe0)](_0x13fea1[_0x5e772e(0x3b8)]))return!![];}return![];},Game_BattlerBase[_0x46ffcc(0x9c1)]['isNegativeLifeSteal']=function(_0x19df17){const _0x5b0c0f=_0x46ffcc;_0x19df17=_0x19df17['toUpperCase']()[_0x5b0c0f(0xafd)]();const _0x59d785=VisuMZ[_0x5b0c0f(0x354)][_0x5b0c0f(0x776)];for(const _0x29052c of this[_0x5b0c0f(0x105)]()){if(!_0x29052c)continue;const _0x1ee5ad=_0x29052c[_0x5b0c0f(0x8fd)]||'';if(_0x1ee5ad[_0x5b0c0f(0xe0)](_0x59d785[_0x5b0c0f(0xbce)]))return!![];if(_0x19df17==='HP'&&_0x1ee5ad[_0x5b0c0f(0xe0)](_0x59d785[_0x5b0c0f(0x968)]))return!![];if(_0x19df17==='MP'&&_0x1ee5ad[_0x5b0c0f(0xe0)](_0x59d785['negativeMpLifeSteal']))return!![];}return![];},Game_BattlerBase['prototype'][_0x46ffcc(0x526)]=function(_0x1e71a9){const _0x116ca3=_0x46ffcc;_0x1e71a9=_0x1e71a9[_0x116ca3(0x7b1)]()[_0x116ca3(0xafd)]();const _0x46c8e6=VisuMZ[_0x116ca3(0x354)][_0x116ca3(0x776)];for(const _0x7fa9ff of this[_0x116ca3(0x105)]()){if(!_0x7fa9ff)continue;const _0x29da6c=_0x7fa9ff['note']||'';if(_0x29da6c[_0x116ca3(0xe0)](_0x46c8e6[_0x116ca3(0x528)]))return!![];if(_0x1e71a9==='HP'&&_0x29da6c[_0x116ca3(0xe0)](_0x46c8e6[_0x116ca3(0x5d6)]))return!![];if(_0x1e71a9==='MP'&&_0x29da6c[_0x116ca3(0xe0)](_0x46c8e6[_0x116ca3(0x78f)]))return!![];}return![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x47e)]=Game_BattlerBase[_0x46ffcc(0x9c1)]['initMembers'],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d8)]=function(){const _0x213b11=_0x46ffcc;VisuMZ[_0x213b11(0x354)]['Game_BattlerBase_initMembers'][_0x213b11(0x2e0)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x537a91=_0x46ffcc;this[_0x537a91(0x55e)]=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase['prototype'][_0x46ffcc(0xb53)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0x541529=_0x46ffcc;this['_cache']={},VisuMZ[_0x541529(0x354)][_0x541529(0x36c)][_0x541529(0x2e0)](this);},Game_BattlerBase['prototype'][_0x46ffcc(0x7ee)]=function(_0x211dd5){const _0x18ceba=_0x46ffcc;return this[_0x18ceba(0x94f)]=this[_0x18ceba(0x94f)]||{},this[_0x18ceba(0x94f)][_0x211dd5]!==undefined;},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0xaef)]=function(){const _0x338f9a=_0x46ffcc;if(this['_cache'][_0x338f9a(0xaef)]!==undefined)return this[_0x338f9a(0x94f)][_0x338f9a(0xaef)];const _0x8dc8f0=/<DAMAGE CAP:[ ](\d+)>/i,_0x59e144=this[_0x338f9a(0x105)]()[_0x338f9a(0x6cd)](_0x33ad2c=>_0x33ad2c&&_0x33ad2c['note'][_0x338f9a(0xe0)](_0x8dc8f0)?Number(RegExp['$1']):0x0);let _0x4dc987=_0x59e144[_0x338f9a(0x9bf)]>0x0?Math[_0x338f9a(0x148)](..._0x59e144):0x0;if(_0x4dc987<=0x0)_0x4dc987=VisuMZ[_0x338f9a(0x354)]['Settings'][_0x338f9a(0x896)][_0x338f9a(0xa90)];return this[_0x338f9a(0x94f)][_0x338f9a(0xaef)]=_0x4dc987,this['_cache'][_0x338f9a(0xaef)];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x14c)]=function(){const _0x41ec00=_0x46ffcc;if(this[_0x41ec00(0x94f)][_0x41ec00(0x6ad)]!==undefined)return this[_0x41ec00(0x94f)][_0x41ec00(0x6ad)];let _0x4a425e=VisuMZ[_0x41ec00(0x354)][_0x41ec00(0x59e)][_0x41ec00(0x896)][_0x41ec00(0xaf4)];const _0x5a60e4=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x53f45b=this[_0x41ec00(0x105)]()[_0x41ec00(0x6cd)](_0xa219=>_0xa219&&_0xa219[_0x41ec00(0x8fd)][_0x41ec00(0xe0)](_0x5a60e4)?Number(RegExp['$1'])/0x64:0x0);return _0x4a425e=_0x53f45b['reduce']((_0x271aa5,_0x426e10)=>_0x271aa5+_0x426e10,_0x4a425e),this[_0x41ec00(0x94f)]['softDamageCap']=_0x4a425e,this[_0x41ec00(0x94f)][_0x41ec00(0x6ad)][_0x41ec00(0xae8)](0.01,0x1);},VisuMZ[_0x46ffcc(0x354)]['Game_BattlerBase_die']=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0xb35)],Game_BattlerBase['prototype'][_0x46ffcc(0xb35)]=function(){const _0x2c683f=_0x46ffcc;VisuMZ['BattleCore'][_0x2c683f(0x315)]['call'](this),SceneManager[_0x2c683f(0xaf2)]()&&(this['requestMotion']('dead'),this[_0x2c683f(0xa74)]=undefined);},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x430)]=function(){const _0x1b08b4=_0x46ffcc;if(!SceneManager[_0x1b08b4(0xaf2)]())return null;if(!SceneManager[_0x1b08b4(0x5e4)][_0x1b08b4(0x787)])return null;return SceneManager[_0x1b08b4(0x5e4)][_0x1b08b4(0x787)][_0x1b08b4(0x3db)](this);},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x20b)]=function(){const _0x5d0e0f=_0x46ffcc;return VisuMZ['BattleCore'][_0x5d0e0f(0x59e)][_0x5d0e0f(0x64a)][_0x5d0e0f(0x9a7)];},Game_BattlerBase[_0x46ffcc(0x9c1)]['svBattlerAnchorY']=function(){const _0x5c9c98=_0x46ffcc;return VisuMZ[_0x5c9c98(0x354)]['Settings']['Actor'][_0x5c9c98(0xbd2)];},Game_BattlerBase['prototype'][_0x46ffcc(0x504)]=function(){const _0x2a8e84=_0x46ffcc;return this[_0x2a8e84(0x738)]&&this['isActor']()?VisuMZ[_0x2a8e84(0x354)][_0x2a8e84(0x59e)][_0x2a8e84(0x64a)][_0x2a8e84(0x6a8)]:VisuMZ['BattleCore'][_0x2a8e84(0x59e)][_0x2a8e84(0xb8b)][_0x2a8e84(0x6a8)];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x633)]=function(){return!![];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x472)]=function(){return 0x0;},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x5f4)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x46ffcc(0x22e)]=function(_0x12fc4a){const _0x3bc875=_0x46ffcc;if(!_0x12fc4a)return 0x0;let _0x1d5756=0x0;const _0x49c780=_0x12fc4a[_0x3bc875(0x8fd)];return _0x49c780['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1d5756+=Number(RegExp['$1'])),_0x49c780['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1d5756+=Number(RegExp['$1'])),_0x1d5756;},Game_BattlerBase['prototype'][_0x46ffcc(0x273)]=function(_0x2072f5){const _0x339092=_0x46ffcc;if(!_0x2072f5)return 0x0;let _0xb059f2=0x0;const _0x2ff108=_0x2072f5[_0x339092(0x8fd)];return _0x2ff108['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0xb059f2+=Number(RegExp['$1'])),_0x2ff108['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0xb059f2+=Number(RegExp['$2'])),_0xb059f2;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1f2)]=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x13e)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x13e)]=function(_0x394c8d){const _0x55955a=_0x46ffcc;if(_0x394c8d===this[_0x55955a(0xdc)]()&&this[_0x55955a(0x4a3)]())return!![];return VisuMZ['BattleCore'][_0x55955a(0x1f2)][_0x55955a(0x2e0)](this,_0x394c8d);},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x4a3)]=function(){return this['_immortal'];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x395)]=function(_0x437017){const _0x18a1b9=_0x46ffcc;_0x437017?this[_0x18a1b9(0x487)]():this[_0x18a1b9(0x62a)]();},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x487)]=function(){const _0x15c173=_0x46ffcc;if(this[_0x15c173(0xb76)]())return;this[_0x15c173(0x55e)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase['prototype']['removeImmortal']=function(){const _0xfd6058=_0x46ffcc,_0x177d74=this['isAlive']();this[_0xfd6058(0x55e)]=![],_0x177d74&&this[_0xfd6058(0x7ae)]&&this['die'](),this['_deathStateApplied']=![],this[_0xfd6058(0xb53)](),this[_0xfd6058(0xb76)]()&&_0x177d74&&(this[_0xfd6058(0x791)](),this[_0xfd6058(0x98d)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x177)]=Game_Action[_0x46ffcc(0x9c1)]['numRepeats'],Game_Action['prototype']['numRepeats']=function(){const _0x58908a=_0x46ffcc;return this['item']()?VisuMZ[_0x58908a(0x354)][_0x58908a(0x177)][_0x58908a(0x2e0)](this):0x0;},VisuMZ[_0x46ffcc(0x354)]['Game_Action_setAttack']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x622)],Game_Action[_0x46ffcc(0x9c1)]['setAttack']=function(){const _0x1fddab=_0x46ffcc;if(this[_0x1fddab(0xaa4)]()&&this[_0x1fddab(0xaa4)]()[_0x1fddab(0xab5)]())VisuMZ[_0x1fddab(0x354)][_0x1fddab(0x317)]['call'](this);else BattleManager[_0x1fddab(0x21c)]?VisuMZ[_0x1fddab(0x354)][_0x1fddab(0x317)][_0x1fddab(0x2e0)](this):this[_0x1fddab(0x91f)]();},VisuMZ['BattleCore'][_0x46ffcc(0x403)]=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0xab5)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0xab5)]=function(){const _0x205e0b=_0x46ffcc;if(!this[_0x205e0b(0x9e7)]())return![];return VisuMZ[_0x205e0b(0x354)][_0x205e0b(0x403)]['call'](this);},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x9e7)]=function(){const _0x29ea0a=_0x46ffcc;for(const _0x544574 of this['traitObjects']()){if(!_0x544574)continue;if(_0x544574[_0x29ea0a(0x8fd)][_0x29ea0a(0xe0)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x46ffcc(0x354)]['Game_Action_setGuard']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x23e)],Game_Action[_0x46ffcc(0x9c1)]['setGuard']=function(){const _0x24d592=_0x46ffcc;this[_0x24d592(0xaa4)]()[_0x24d592(0x1df)]()&&VisuMZ[_0x24d592(0x354)][_0x24d592(0x308)][_0x24d592(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb4a)]=Game_BattlerBase['prototype'][_0x46ffcc(0x1df)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x1df)]=function(){const _0x154f32=_0x46ffcc;if(!this[_0x154f32(0x960)]())return![];return VisuMZ[_0x154f32(0x354)][_0x154f32(0xb4a)][_0x154f32(0x2e0)](this);},Game_BattlerBase[_0x46ffcc(0x9c1)]['canGuardBattleCore']=function(){const _0x4b8e6a=_0x46ffcc;for(const _0x2b4b66 of this[_0x4b8e6a(0x105)]()){if(!_0x2b4b66)continue;if(_0x2b4b66[_0x4b8e6a(0x8fd)][_0x4b8e6a(0xe0)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x237)]=function(){const _0x94b109=_0x46ffcc;for(const _0x27236f of this[_0x94b109(0x105)]()){if(!_0x27236f)continue;if(_0x27236f[_0x94b109(0x8fd)][_0x94b109(0xe0)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x46ffcc(0x57d)]=Game_BattlerBase['prototype'][_0x46ffcc(0x6c8)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x6c8)]=function(_0x440583){const _0x36ef72=_0x46ffcc;if(_0x440583&&_0x440583[_0x36ef72(0x8fd)][_0x36ef72(0xe0)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x5b85cb=this['friendsUnit']()['aliveMembers']();if(_0x5b85cb[_0x36ef72(0x9bf)]===0x1&&_0x5b85cb[0x0]===this)return![];}return VisuMZ[_0x36ef72(0x354)]['Game_BattlerBase_meetsUsableItemConditions'][_0x36ef72(0x2e0)](this,_0x440583);},Game_Battler['prototype'][_0x46ffcc(0x542)]=function(){const _0x5665aa=_0x46ffcc;return VisuMZ[_0x5665aa(0x354)][_0x5665aa(0x59e)][_0x5665aa(0xac4)][_0x5665aa(0x4ca)];},VisuMZ['BattleCore'][_0x46ffcc(0x4dd)]=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x25b)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x25b)]=function(){const _0x376351=_0x46ffcc;if(SceneManager[_0x376351(0xaf2)]()){if(BattleManager[_0x376351(0x6b6)]()){if(this[_0x376351(0x4ac)]()<=0x0)return;}else{if($gameTroop[_0x376351(0x4ac)]()<=0x0)return;}}if(SceneManager[_0x376351(0xaf2)]()&&BattleManager[_0x376351(0x6b6)]()&&this[_0x376351(0x9c6)]===Graphics[_0x376351(0x2b7)])return;this[_0x376351(0x9c6)]=Graphics[_0x376351(0x2b7)],SceneManager[_0x376351(0xaf2)]()&&this[_0x376351(0x132)]('PreRegenerateJS'),VisuMZ[_0x376351(0x354)][_0x376351(0x4dd)]['call'](this),SceneManager[_0x376351(0xaf2)]()&&(this['regenerateAllBattleCore'](),this[_0x376351(0x132)](_0x376351(0xb5c)));},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x8a7)]=function(){const _0x38d7b2=_0x46ffcc;if(SceneManager['isSceneBattle']())for(const _0x7d7ee6 of this[_0x38d7b2(0x105)]()){if(!_0x7d7ee6)continue;this[_0x38d7b2(0x864)](_0x7d7ee6);}},Game_Battler['prototype'][_0x46ffcc(0x864)]=function(_0x223c04){const _0x329276=_0x46ffcc;if(!Imported[_0x329276(0xbaf)])return;if(!SceneManager[_0x329276(0xaf2)]())return;if(this['isDead']())return;if(this[_0x329276(0x283)]())return;if(_0x223c04['note'][_0x329276(0xe0)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5d9177=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x5d9177,![],![]);}},VisuMZ['BattleCore'][_0x46ffcc(0x454)]=Game_Battler['prototype']['startTpbTurn'],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x928)]=function(){const _0x50145a=_0x46ffcc;this[_0x50145a(0x132)](_0x50145a(0x949)),VisuMZ[_0x50145a(0x354)][_0x50145a(0x454)][_0x50145a(0x2e0)](this),this['processBattleCoreJS'](_0x50145a(0x91c));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x685)]=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x5fb)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x5fb)]=function(){const _0x46e4e0=_0x46ffcc;this[_0x46e4e0(0x132)](_0x46e4e0(0x15b)),VisuMZ[_0x46e4e0(0x354)][_0x46e4e0(0x685)][_0x46e4e0(0x2e0)](this),VisuMZ[_0x46e4e0(0x354)][_0x46e4e0(0x59e)]['Mechanics'][_0x46e4e0(0xd0)]&&this[_0x46e4e0(0x5f7)](),this['processBattleCoreJS'](_0x46e4e0(0x90b));},Game_Battler[_0x46ffcc(0x9c1)]['processBattleCoreJS']=function(_0x42dcd2){const _0x357b2c=_0x46ffcc;if(this[_0x357b2c(0xa00)]||this[_0x357b2c(0x48c)])return;const _0x4f6e08=VisuMZ[_0x357b2c(0x354)][_0x357b2c(0x59e)][_0x357b2c(0xac4)];if(_0x4f6e08[_0x42dcd2])_0x4f6e08[_0x42dcd2][_0x357b2c(0x2e0)](this);for(const _0x247156 of this[_0x357b2c(0x105)]()){if(!_0x247156)continue;key=VisuMZ['BattleCore'][_0x357b2c(0x4be)](_0x247156,_0x42dcd2),VisuMZ[_0x357b2c(0x354)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x357b2c(0x2e0)](this,this,this,_0x247156,0x0);}},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x394)]=function(){const _0x432605=_0x46ffcc;return VisuMZ[_0x432605(0x354)]['Settings'][_0x432605(0x64a)][_0x432605(0x8a5)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x3e0b71=_0x46ffcc;if(this[_0x3e0b71(0x94e)]()){if(this[_0x3e0b71(0x394)]()){if(this[_0x3e0b71(0x52e)][_0x3e0b71(0x67d)](_0x7060de=>_0x7060de[_0x3e0b71(0x50d)]()&&_0x7060de[_0x3e0b71(0x959)]()))return!![];}else{if(this['_actions'][_0x3e0b71(0x67d)](_0x4727b7=>_0x4727b7[_0x3e0b71(0x50d)]()&&_0x4727b7[_0x3e0b71(0x423)]()))return!![];}}if(BattleManager['isTpb']()&&this[_0x3e0b71(0x693)]===_0x3e0b71(0x225))return this[_0x3e0b71(0x394)]()?this[_0x3e0b71(0x256)]()&&this[_0x3e0b71(0x256)]()[_0x3e0b71(0x50d)]()&&this['currentAction']()[_0x3e0b71(0x959)]():this['currentAction']()&&this['currentAction']()['item']()&&this[_0x3e0b71(0x256)]()[_0x3e0b71(0x423)]();return![];},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb16)]=function(){const _0x4fd83d=_0x46ffcc;if(BattleManager[_0x4fd83d(0x6b6)]()&&this[_0x4fd83d(0x693)]==='casting')return this[_0x4fd83d(0x394)]()?this['currentAction']()&&this[_0x4fd83d(0x256)]()['item']()&&!this['currentAction']()[_0x4fd83d(0x959)]():this[_0x4fd83d(0x256)]()&&this[_0x4fd83d(0x256)]()[_0x4fd83d(0x50d)]()&&!this['currentAction']()[_0x4fd83d(0x423)]();return![];},VisuMZ[_0x46ffcc(0x354)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x29f)],Game_Battler['prototype'][_0x46ffcc(0x29f)]=function(){const _0x3cad4e=_0x46ffcc;VisuMZ[_0x3cad4e(0x354)][_0x3cad4e(0xb47)][_0x3cad4e(0x2e0)](this),this[_0x3cad4e(0x74d)]=[];},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x7a9)]=function(){const _0x3f5000=_0x46ffcc;if(!this[_0x3f5000(0x74d)])this[_0x3f5000(0x29f)]();return this[_0x3f5000(0x74d)][_0x3f5000(0x9bf)]>0x0;},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x275)]=function(){const _0xb7a5fd=_0x46ffcc;if(!SceneManager[_0xb7a5fd(0xaf2)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0xb7a5fd(0x74d)])this[_0xb7a5fd(0x29f)]();this['createSeparateDamagePopups']();const _0x202fba=this[_0xb7a5fd(0x430)]();if(_0x202fba)_0x202fba['setupDamagePopup']();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xbd4)]=function(){const _0x9dfff7=_0x46ffcc,_0x4e4d4a=this[_0x9dfff7(0x804)]();if(_0x4e4d4a['missed']||_0x4e4d4a[_0x9dfff7(0x7eb)]){const _0x7899b6=JsonEx[_0x9dfff7(0x494)](_0x4e4d4a);_0x7899b6[_0x9dfff7(0x2bc)]=![],_0x7899b6[_0x9dfff7(0x27e)]=0x0,this[_0x9dfff7(0x74d)]['push'](_0x7899b6);if(!_0x4e4d4a[_0x9dfff7(0x77c)]&&!_0x4e4d4a['mpDamage'])return;}if(_0x4e4d4a[_0x9dfff7(0x2bc)]){const _0x1aae2e=JsonEx[_0x9dfff7(0x494)](_0x4e4d4a);_0x1aae2e[_0x9dfff7(0x850)]=![],_0x1aae2e[_0x9dfff7(0x7eb)]=![],_0x1aae2e[_0x9dfff7(0x27e)]=0x0,this['_damagePopupArray']['push'](_0x1aae2e);}if(_0x4e4d4a[_0x9dfff7(0x27e)]!==0x0){const _0x4448d6=JsonEx[_0x9dfff7(0x494)](_0x4e4d4a);_0x4448d6[_0x9dfff7(0x850)]=![],_0x4448d6[_0x9dfff7(0x7eb)]=![],_0x4448d6['hpAffected']=![],this[_0x9dfff7(0x74d)][_0x9dfff7(0x40a)](_0x4448d6);}},Game_Battler['prototype']['getNextDamagePopup']=function(){const _0x15e89e=_0x46ffcc;if(!this['_damagePopupArray'])this[_0x15e89e(0x29f)]();return VisuMZ[_0x15e89e(0x354)][_0x15e89e(0x59e)]['Damage'][_0x15e89e(0x1ac)]?this['_damagePopupArray'][_0x15e89e(0x348)]():this['_damagePopupArray']['pop']();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x61d)]=function(_0x222f6c,_0x22aa1b){const _0x4bc7b4=_0x46ffcc;if(!SceneManager[_0x4bc7b4(0xaf2)]())return;if(BattleManager[_0x4bc7b4(0x55f)]())return;if(!this['battler']())return;if(_0x222f6c['length']<=0x0)return;_0x22aa1b=_0x22aa1b||{},_0x22aa1b['textColor']=_0x22aa1b[_0x4bc7b4(0x156)]||_0x4bc7b4(0x4a1),_0x22aa1b[_0x4bc7b4(0x515)]=_0x22aa1b[_0x4bc7b4(0x515)]||[0x0,0x0,0x0,0x0],_0x22aa1b[_0x4bc7b4(0x897)]=_0x22aa1b[_0x4bc7b4(0x897)]||0x0,this[_0x4bc7b4(0x430)]()[_0x4bc7b4(0x61d)](_0x222f6c,_0x22aa1b);},Game_Battler['prototype'][_0x46ffcc(0x740)]=function(_0x3a5bde,_0x1ee758,_0x5169ca){const _0x2dab31=_0x46ffcc;if(!SceneManager[_0x2dab31(0xaf2)]())return;if(BattleManager[_0x2dab31(0x55f)]())return;if(!this[_0x2dab31(0x430)]())return;if(_0x1ee758[_0x2dab31(0x9bf)]<=0x0)return;_0x5169ca=_0x5169ca||{},_0x5169ca[_0x2dab31(0x156)]=_0x5169ca[_0x2dab31(0x156)]||_0x2dab31(0x4a1),_0x5169ca[_0x2dab31(0x515)]=_0x5169ca[_0x2dab31(0x515)]||[0x0,0x0,0x0,0x0],_0x5169ca[_0x2dab31(0x897)]=_0x5169ca['flashDuration']||0x0,this[_0x2dab31(0x430)]()[_0x2dab31(0x740)](_0x3a5bde,_0x1ee758,_0x5169ca);},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x503)]=function(){const _0x166a8d=_0x46ffcc;if(this[_0x166a8d(0x283)]())return![];if(this[_0x166a8d(0x615)]()&&this[_0x166a8d(0x241)]())return!![];if(this[_0x166a8d(0x656)]()&&this[_0x166a8d(0x978)]()){if(this['isDead']()&&this[_0x166a8d(0x2d6)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ['BattleCore']['Game_Battler_clearMotion']=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6fd)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6fd)]=function(){const _0x20f3f4=_0x46ffcc;VisuMZ['BattleCore'][_0x20f3f4(0x5fc)][_0x20f3f4(0x2e0)](this),this[_0x20f3f4(0xa0b)]();},Game_Battler['prototype'][_0x46ffcc(0x350)]=function(){return!![];},Game_Battler['prototype'][_0x46ffcc(0x8a9)]=function(){return![];},VisuMZ[_0x46ffcc(0x354)]['Game_Battler_onBattleStart']=Game_Battler['prototype'][_0x46ffcc(0x659)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x659)]=function(_0x538b5d){const _0x590021=_0x46ffcc;VisuMZ['BattleCore'][_0x590021(0x7cd)][_0x590021(0x2e0)](this,_0x538b5d),this['onBattleStartBattleCore'](_0x538b5d),this[_0x590021(0x29f)]();},Game_Battler['prototype'][_0x46ffcc(0x543)]=function(_0x46c24b){const _0x6574ed=_0x46ffcc;this[_0x6574ed(0x17b)](![]),this[_0x6574ed(0x89e)]=undefined,this[_0x6574ed(0x98a)]=undefined;},VisuMZ[_0x46ffcc(0x354)]['Game_Battler_onBattleEnd']=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x9ea)],Game_Battler['prototype'][_0x46ffcc(0x9ea)]=function(){const _0x4fa6c=_0x46ffcc;VisuMZ[_0x4fa6c(0x354)][_0x4fa6c(0x3c3)][_0x4fa6c(0x2e0)](this),this[_0x4fa6c(0x725)]();},Game_Battler[_0x46ffcc(0x9c1)]['onBattleEndBattleCore']=function(){const _0x180108=_0x46ffcc;this[_0x180108(0x89e)]=undefined,this[_0x180108(0x98a)]=undefined;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7ad)]=Game_Battler[_0x46ffcc(0x9c1)]['performActionStart'],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xbcb)]=function(_0x222e39){const _0x193ace=_0x46ffcc;VisuMZ[_0x193ace(0x354)][_0x193ace(0x7ad)][_0x193ace(0x2e0)](this,_0x222e39);if(!_0x222e39['isGuard']()){const _0x5760cf=this['battler']();_0x5760cf&&_0x5760cf['stepForward']();}this[_0x193ace(0x17b)](![]);},Game_Battler['prototype']['performActionEndMembers']=function(){const _0x14312f=_0x46ffcc;this[_0x14312f(0xa74)]=undefined;const _0x282d15=this[_0x14312f(0x9b6)];this[_0x14312f(0x9b6)]=![];if(BattleManager[_0x14312f(0x7c4)]()&&this[_0x14312f(0x5c6)]()){const _0x140296=this[_0x14312f(0x430)]();if(_0x140296&&_0x282d15)_0x140296[_0x14312f(0x573)]();return;}const _0x3a0002=this[_0x14312f(0x430)]();if(_0x3a0002)_0x3a0002[_0x14312f(0x189)]();this[_0x14312f(0x17b)](![]),this[_0x14312f(0x98d)]();},Game_Battler['prototype']['performActionMotions']=function(_0x32acad){const _0x527156=_0x46ffcc;if(_0x32acad[_0x527156(0x3ed)]())this[_0x527156(0x37a)]();else{if(_0x32acad[_0x527156(0x406)]())this['requestMotion'](_0x527156(0x644));else{if(_0x32acad[_0x527156(0x959)]())this['requestMotion'](_0x527156(0x6f4));else{if(_0x32acad[_0x527156(0x444)]())[0x1,0x2,0x5,0x6][_0x527156(0x6a2)](_0x32acad['item']()[_0x527156(0x6be)][_0x527156(0x56c)])?this[_0x527156(0x37a)]():this[_0x527156(0x5f2)](_0x527156(0x8ad));else _0x32acad[_0x527156(0xb79)]()&&this['requestMotion'](_0x527156(0x50d));}}}},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x357)]=function(){const _0x1fe6ba=_0x46ffcc;return $dataSystem[_0x1fe6ba(0xdb)][0x0];},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x36a)]=function(){const _0x17df8b=this['getAttackMotion']();return _0x17df8b?_0x17df8b['weaponImageId']:0x0;},Game_Battler['prototype'][_0x46ffcc(0x28b)]=function(_0x152176){const _0x413155=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x50e549=this[_0x413155(0x430)](),_0x589061=_0x152176['battler']();if(!_0x50e549||!_0x589061)return;const _0x2060d0=_0x589061['_baseX'],_0x511e01=_0x589061[_0x413155(0x97f)];this[_0x413155(0x49f)](_0x2060d0,_0x511e01,0x0,![],'Linear',-0x1),_0x50e549[_0x413155(0x6a3)]();const _0x1c2d20=VisuMZ['BattleCore'][_0x413155(0x59e)][_0x413155(0x721)];let _0x59d0cd=(_0x589061[_0x413155(0x448)]+_0x50e549['width'])/0x2;_0x59d0cd*=this[_0x413155(0x738)]()?0x1:-0x1;let _0x120da7=_0x1c2d20[_0x413155(0x991)]*(this[_0x413155(0x738)]()?0x1:-0x1);_0x152176[_0x413155(0xb02)](_0x59d0cd,_0x120da7,0x0,![],_0x413155(0x8e3)),_0x589061['updatePosition']();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x5f2)]=function(_0x3de984){const _0x4828e0=_0x46ffcc;if(SceneManager[_0x4828e0(0xaf2)]()){const _0x1865d4=this['battler']();_0x1865d4&&(_0x1865d4[_0x4828e0(0xbe6)](_0x3de984),[_0x4828e0(0x1dd),_0x4828e0(0x29d),'missile'][_0x4828e0(0x6a2)](_0x3de984)&&this['performWeaponAnimation']());}this[_0x4828e0(0xa0b)]();},Game_Battler['prototype']['performWeaponAnimation']=function(){},Game_Battler['prototype'][_0x46ffcc(0x93d)]=function(_0x3f9504){const _0x548ba6=_0x46ffcc;if(SceneManager['isSceneBattle']()){const _0x16ddec=this[_0x548ba6(0x430)]();if(_0x16ddec)_0x16ddec[_0x548ba6(0x158)](_0x3f9504);}},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x7bd)]=function(){const _0x479287=_0x46ffcc;if(SceneManager[_0x479287(0xaf2)]()){const _0x7e81fb=this[_0x479287(0x36a)]();this[_0x479287(0x93d)](_0x7e81fb);}},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x7b3)]=function(_0x2d5005,_0x43251f){const _0x2c7d07=_0x46ffcc;if(!_0x2d5005)return;if(!_0x2d5005[_0x2c7d07(0x50d)]())return;if(_0x2d5005['isAttack']())return;if(_0x2d5005['isGuard']())return;if(_0x2d5005[_0x2c7d07(0xb79)]())return;if($gameTemp['_playTestFastMode'])return;let _0x16f360=0x0;const _0x404261=VisuMZ[_0x2c7d07(0x354)]['Settings']['ActionSequence'],_0x146b3a=_0x2d5005[_0x2c7d07(0x50d)]()[_0x2c7d07(0x8fd)];if(_0x146b3a[_0x2c7d07(0xe0)](/<CAST ANIMATION: (\d+)>/i))_0x16f360=Number(RegExp['$1']);else{if(_0x146b3a[_0x2c7d07(0xe0)](/<NO CAST ANIMATION>/i))return;else{if(_0x2d5005[_0x2c7d07(0x10e)]())_0x16f360=_0x404261[_0x2c7d07(0x387)];else{if(_0x2d5005[_0x2c7d07(0xb41)]())_0x16f360=_0x404261[_0x2c7d07(0x917)];else _0x2d5005['isMagical']()&&(_0x16f360=_0x404261[_0x2c7d07(0xa52)]);}}}_0x16f360>0x0&&$gameTemp[_0x2c7d07(0x3cf)]([this],_0x16f360,!!_0x43251f);},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x718)]=function(){const _0x5b457a=_0x46ffcc;SoundManager[_0x5b457a(0x282)]();let _0x4dfed1=VisuMZ[_0x5b457a(0x354)][_0x5b457a(0x59e)][_0x5b457a(0x721)][_0x5b457a(0x7b9)];_0x4dfed1>0x0&&(Imported[_0x5b457a(0xbaf)]?$gameTemp[_0x5b457a(0x4c5)]([this],_0x4dfed1):$gameTemp[_0x5b457a(0x3cf)]([this],_0x4dfed1));},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb37)]=function(){const _0x4483d3=_0x46ffcc;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x4483d3(0x7c4)]())return![];if(!this[_0x4483d3(0x615)]())return![];if(this['isInputting']())return!![];if(this[_0x4483d3(0xd7)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];},VisuMZ['BattleCore'][_0x46ffcc(0xa78)]=Game_Battler[_0x46ffcc(0x9c1)]['performDamage'],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x46b)]=function(){const _0x5ba001=_0x46ffcc;this['isActiveTpbReady']()&&(this[_0x5ba001(0xa74)]=!![]),VisuMZ['BattleCore'][_0x5ba001(0xa78)]['call'](this),this[_0x5ba001(0x49e)](),this[_0x5ba001(0x6f3)]();},VisuMZ['BattleCore'][_0x46ffcc(0x6bc)]=Game_Battler['prototype'][_0x46ffcc(0xacb)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xacb)]=function(){const _0x534aea=_0x46ffcc;this[_0x534aea(0xb37)]()&&(this[_0x534aea(0xa74)]=!![]),VisuMZ['BattleCore'][_0x534aea(0x6bc)][_0x534aea(0x2e0)](this),this['performFlinch']();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x914)],Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x914)]=function(){const _0x15eaae=_0x46ffcc;this['isActiveTpbReady']()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x15eaae(0x354)][_0x15eaae(0xa10)][_0x15eaae(0x2e0)](this),this['performFlinch']();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x49e)]=function(){const _0x434b54=_0x46ffcc;if(!$gameSystem[_0x434b54(0x5c0)]())return;if(this[_0x434b54(0x9b6)])return;this[_0x434b54(0x9b6)]=!![];const _0x18c415=this[_0x434b54(0x430)]();if(_0x18c415)_0x18c415['stepFlinch']();},Game_Battler['prototype'][_0x46ffcc(0x6f3)]=function(){const _0x79be80=_0x46ffcc;if(!this[_0x79be80(0x350)]())return;const _0x3251be=VisuMZ[_0x79be80(0x354)][_0x79be80(0x59e)][_0x79be80(0x64a)];if(!(_0x3251be[_0x79be80(0x344)]??![]))return;if(this[_0x79be80(0x8f2)]<=0x0)return;const _0x17295e=this[_0x79be80(0x430)]();if(_0x17295e){const _0x46a7a4=this[_0x79be80(0x8f2)],_0x3b4696=(_0x46a7a4/this[_0x79be80(0x95a)])[_0x79be80(0xae8)](0.8,0x1),_0x3c4ba5=_0x3251be['ShakeFlinchPower']??0x30,_0x2d686d=_0x3b4696*_0x3c4ba5;_0x17295e['startShakeFlinch'](_0x2d686d,_0x3b4696);}},Game_Battler['prototype'][_0x46ffcc(0x98d)]=function(){const _0x139232=_0x46ffcc;if(this['isDead']()&&this[_0x139232(0xb96)]!=='dead'){this['requestMotion'](_0x139232(0x2be));return;}if(this[_0x139232(0xb76)]()&&this['_motionType']==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x139232(0x656)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x139232(0x30f)]){if(this['battler']())this[_0x139232(0x430)]()['refreshMotion']();}this[_0x139232(0xa0b)]();return;}if(this[_0x139232(0xb96)]===_0x139232(0x389))return;if(this['_motionType']===_0x139232(0x4c9)&&!BattleManager[_0x139232(0x5c6)]())return;if(this[_0x139232(0xb96)]===_0x139232(0x644)&&!BattleManager[_0x139232(0x5c6)]())return;this[_0x139232(0x6fd)]();if(BattleManager[_0x139232(0x7c4)]()&&this===BattleManager['_subject'])return;if(this[_0x139232(0x430)]()&&BattleManager[_0x139232(0x5c6)]()){this['battler']()[_0x139232(0x358)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x70f)]=function(){const _0x5096d9=_0x46ffcc;if(!this[_0x5096d9(0x978)]())return![];const _0x268ef=this[_0x5096d9(0x430)]();if(!_0x268ef)return![];const _0x1ca220=_0x268ef[_0x5096d9(0xa47)];if(!_0x1ca220)return![];const _0xf2e708=_0x1ca220[_0x5096d9(0x2a0)];return _0xf2e708&&!_0xf2e708[_0x5096d9(0x3f2)];},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xaa0)]=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype']['setBattlerFlip']=function(_0x31562e){const _0x59a3f3=_0x46ffcc;if(!$gameSystem[_0x59a3f3(0x5c0)]())return;this[_0x59a3f3(0x414)]=_0x31562e;const _0x16da1d=this['battler']();if(_0x16da1d)_0x16da1d[_0x59a3f3(0x1e8)]();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x913)]=function(_0x7e3d6b,_0x5bf854,_0x54cc2c){const _0x45172f=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x533215=this[_0x45172f(0x430)]();if(!_0x533215)return;if(_0x7e3d6b===_0x533215[_0x45172f(0x72f)])return;let _0x134fb6=![];if(this['isActor']()){if(_0x7e3d6b>_0x533215['_baseX'])_0x134fb6=!![];if(_0x7e3d6b<_0x533215[_0x45172f(0x72f)])_0x134fb6=![];}else{if(this[_0x45172f(0x656)]()){if(_0x7e3d6b>_0x533215[_0x45172f(0x72f)])_0x134fb6=![];if(_0x7e3d6b<_0x533215[_0x45172f(0x72f)])_0x134fb6=!![];}};this[_0x45172f(0x17b)](_0x54cc2c?!_0x134fb6:_0x134fb6),_0x533215[_0x45172f(0x1e8)]();},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb02)]=function(_0x207e57,_0xd3dd14,_0x5506e5,_0x4621eb,_0x2c6ad2){const _0x519e01=_0x46ffcc;if(!$gameSystem[_0x519e01(0x5c0)]())return;const _0x254aac=this[_0x519e01(0x430)]();if(!_0x254aac)return;if(_0x4621eb)this[_0x519e01(0x913)](_0x207e57+_0x254aac[_0x519e01(0x72f)],_0xd3dd14+_0x254aac[_0x519e01(0x97f)],![]);_0x207e57+=_0x254aac[_0x519e01(0x72f)]-_0x254aac[_0x519e01(0x2bd)],_0xd3dd14+=_0x254aac[_0x519e01(0x97f)]-_0x254aac[_0x519e01(0x611)],_0x254aac[_0x519e01(0x966)](_0x207e57,_0xd3dd14,_0x5506e5);if(Imported[_0x519e01(0xbaf)])_0x254aac[_0x519e01(0xa2d)](_0x2c6ad2||_0x519e01(0x8e3));},Game_Battler[_0x46ffcc(0x9c1)]['moveBattlerToPoint']=function(_0x2ba253,_0x5a4e69,_0x2ec752,_0xb8263f,_0xa64daa,_0x5c749a){const _0x3c5ab1=_0x46ffcc;if(!$gameSystem[_0x3c5ab1(0x5c0)]())return;const _0x47d3f2=this['battler']();if(!_0x47d3f2)return;if(_0x2ba253===Infinity||_0x5a4e69===Infinity)return;if(isNaN(_0x2ba253)||isNaN(_0x5a4e69))return;_0x5c749a=_0x5c749a||0x0;if(_0x5c749a>0x0){if(_0x47d3f2['_baseX']>_0x2ba253)_0x2ba253+=_0x47d3f2[_0x3c5ab1(0x448)]/0x2+_0x5c749a;if(_0x47d3f2[_0x3c5ab1(0x72f)]<_0x2ba253)_0x2ba253-=_0x47d3f2[_0x3c5ab1(0x448)]/0x2+_0x5c749a;}if(_0xb8263f)this[_0x3c5ab1(0x913)](_0x2ba253,_0x5a4e69,![]);_0x2ba253-=_0x47d3f2['_homeX'],_0x5a4e69-=_0x47d3f2[_0x3c5ab1(0x611)],_0x47d3f2[_0x3c5ab1(0x966)](_0x2ba253,_0x5a4e69,_0x2ec752);if(Imported[_0x3c5ab1(0xbaf)])_0x47d3f2['setMoveEasingType'](_0xa64daa||'Linear');},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x41d)]=function(_0x3b11d3,_0x3fc619,_0x173361,_0x5d9142,_0x1e69c1){const _0x587248=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x21ac3b=this[_0x587248(0x430)]();if(!_0x21ac3b)return;if(_0x5d9142)this['setBattlerFacePoint'](_0x3b11d3+_0x21ac3b[_0x587248(0x72f)],_0x3fc619+_0x21ac3b[_0x587248(0x97f)],![]);_0x3b11d3+=_0x21ac3b['_homeX'],_0x3fc619+=_0x21ac3b[_0x587248(0x611)],_0x21ac3b[_0x587248(0x53d)](_0x3b11d3,_0x3fc619,_0x173361,_0x1e69c1),this[_0x587248(0x89e)]=_0x3b11d3,this['_forcedHomeY']=_0x3fc619;},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb2f)]=function(_0x1a00a1,_0x432f77,_0x3a96df,_0x408af7,_0x8412fa,_0x1b853f){const _0x510aaf=_0x46ffcc;if(!$gameSystem[_0x510aaf(0x5c0)]())return;const _0xf8b08b=this[_0x510aaf(0x430)]();if(!_0xf8b08b)return;_0x1b853f=_0x1b853f||0x0;if(_0x1b853f>0x0){if(_0xf8b08b['_baseX']>_0x1a00a1)_0x1a00a1+=_0xf8b08b[_0x510aaf(0x448)]/0x2+_0x1b853f;if(_0xf8b08b[_0x510aaf(0x72f)]<_0x1a00a1)_0x1a00a1-=_0xf8b08b[_0x510aaf(0x448)]/0x2+_0x1b853f;}if(_0x408af7)this[_0x510aaf(0x913)](_0x1a00a1,_0x432f77,![]);_0xf8b08b[_0x510aaf(0x53d)](_0x1a00a1,_0x432f77,_0x3a96df,_0x8412fa),this['_forcedHomeX']=_0x1a00a1,this[_0x510aaf(0x98a)]=_0x432f77;},Game_Battler['prototype']['floatBattler']=function(_0x46dfc7,_0x549042,_0x5d37b4){const _0x54eecf=_0x46ffcc;if(!$gameSystem[_0x54eecf(0x5c0)]())return;const _0x488338=this['battler']();if(!_0x488338)return;_0x488338[_0x54eecf(0x3d8)](_0x46dfc7,_0x549042,_0x5d37b4);},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xd9)]=function(_0xc117dd,_0x31c60c){const _0x28ec60=_0x46ffcc;if(!$gameSystem[_0x28ec60(0x5c0)]())return;const _0x38dd72=this[_0x28ec60(0x430)]();if(!_0x38dd72)return;_0x38dd72[_0x28ec60(0x6e1)](_0xc117dd,_0x31c60c);},Game_Battler[_0x46ffcc(0x9c1)]['spinBattler']=function(_0xa03605,_0x10eb4f,_0x449cca,_0x1a1fd0){const _0x201e4e=_0x46ffcc;if(!$gameSystem[_0x201e4e(0x5c0)]())return;const _0x214104=this[_0x201e4e(0x430)]();if(!_0x214104)return;_0x214104[_0x201e4e(0xb84)](_0xa03605,_0x10eb4f,_0x449cca,_0x1a1fd0);},Game_Battler[_0x46ffcc(0x9c1)]['skewBattler']=function(_0xdf43c,_0x1cd64d,_0x326fb2,_0x2d5a65){const _0x35ecf6=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x3184e1=this[_0x35ecf6(0x430)]();if(!_0x3184e1)return;this[_0x35ecf6(0x738)]()&&(_0xdf43c*=-0x1,_0x1cd64d*=-0x1),_0x3184e1[_0x35ecf6(0x417)](_0xdf43c,_0x1cd64d,_0x326fb2,_0x2d5a65);},Game_Battler['prototype'][_0x46ffcc(0x431)]=function(_0x18a0dd,_0xe2b2ca,_0x59ae4c,_0x1152df){const _0x39c6cc=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x14efce=this['battler']();if(!_0x14efce)return;_0x14efce[_0x39c6cc(0xa4d)](_0x18a0dd,_0xe2b2ca,_0x59ae4c,_0x1152df);},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x1a2)]=function(_0x1d53e9,_0x43db4a,_0x4187a3){const _0xff8ea9=_0x46ffcc;if(!$gameSystem['isSideView']())return;const _0x1dd0d1=this[_0xff8ea9(0x430)]();if(!_0x1dd0d1)return;_0x1dd0d1[_0xff8ea9(0x556)](_0x1d53e9,_0x43db4a,_0x4187a3);},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xa0b)]=function(){const _0x27dd3e=_0x46ffcc,_0x980856=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0x980856&&(this[_0x27dd3e(0x98d)](),this[_0x27dd3e(0x306)]());},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x306)]=function(){const _0x850ac2=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;const _0x1d77bf=this[_0x850ac2(0x430)]();if(!_0x1d77bf)return;let _0x4b7ade=this[_0x850ac2(0x738)]()?_0x1d77bf[_0x850ac2(0x553)]:_0x1d77bf[_0x850ac2(0xa47)][_0x850ac2(0x553)];_0x4b7ade&&_0x4b7ade[_0x850ac2(0xb64)](0x0);},Game_Battler[_0x46ffcc(0x9c1)]['freezeMotion']=function(_0x545831,_0x471598,_0x2c9a00){const _0x19a736=_0x46ffcc;if(this[_0x19a736(0x656)]()&&!this[_0x19a736(0x978)]())return;let _0x4133d6=0x0,_0x58997e=0x0;_0x545831['match'](/ATTACK[ ](\d+)/i)&&(_0x58997e=Number(RegExp['$1']),_0x58997e--);if(this[_0x19a736(0x738)]()){const _0x2efe81=this[_0x19a736(0x935)]();_0x4133d6=_0x2efe81[_0x58997e]?_0x2efe81[_0x58997e]['wtypeId']:0x0;}else this[_0x19a736(0x656)]()&&(_0x4133d6=this['svBattlerData']()['wtypeId']||0x0);const _0x46a4dc=$dataSystem[_0x19a736(0xdb)][_0x4133d6];_0x545831[_0x19a736(0xe0)](/attack/i)&&(_0x545831=[_0x19a736(0x29d),'swing',_0x19a736(0xd2)][_0x46a4dc['type']]||_0x19a736(0x1dd)),this[_0x19a736(0x94a)]={'motionType':_0x545831,'weaponImageId':_0x471598?_0x46a4dc[_0x19a736(0x72b)]:0x0,'pattern':_0x2c9a00};},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x857)]=function(_0xee0bb5){const _0xbaf4fa=_0x46ffcc;if(!_0xee0bb5)return![];return _0xee0bb5[_0xbaf4fa(0xa71)]()===this[_0xbaf4fa(0xa71)]();},Game_Battler['prototype']['isOpponent']=function(_0x1a95ef){const _0x220f29=_0x46ffcc;if(!_0x1a95ef)return![];return _0x1a95ef['opponentsUnit']()===this[_0x220f29(0xa71)]();},Game_Battler['prototype']['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0xec)]=function(){return this['battlerName']()['match'](/\$/i);},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xec)]=function(){const _0x5501d5=_0x46ffcc;return this[_0x5501d5(0x978)]()&&this[_0x5501d5(0x396)]()[_0x5501d5(0xe0)](/\$/i);},VisuMZ['BattleCore'][_0x46ffcc(0x3c0)]=Game_Actor['prototype'][_0x46ffcc(0xb64)],Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)]=function(_0x53924c){const _0x8d73f9=_0x46ffcc;VisuMZ[_0x8d73f9(0x354)][_0x8d73f9(0x3c0)][_0x8d73f9(0x2e0)](this,_0x53924c),this[_0x8d73f9(0xaa1)]();},Game_Actor['prototype'][_0x46ffcc(0xaa1)]=function(){const _0x45f1d1=_0x46ffcc;this['_battlePortrait']='',this['actor']()&&this['actor']()['note'][_0x45f1d1(0xe0)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor['prototype'][_0x46ffcc(0xb01)]=function(){const _0x2c3296=_0x46ffcc;if(this['getBattlePortrait']()!=='')return this[_0x2c3296(0xa34)]();else{if(Imported[_0x2c3296(0x6ff)]&&this['getMenuImage']()!=='')return this[_0x2c3296(0x187)]();}return'';},Game_Actor['prototype']['getBattlePortrait']=function(){const _0x345d35=_0x46ffcc;if(this[_0x345d35(0xc3)]===undefined)this['initBattlePortrait']();return this[_0x345d35(0xc3)];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x323)]=function(_0x13dcdb){const _0x47fdfc=_0x46ffcc;if(this[_0x47fdfc(0xc3)]===undefined)this[_0x47fdfc(0xaa1)]();this[_0x47fdfc(0xc3)]=_0x13dcdb;if(SceneManager['isSceneBattle']()&&$gameParty[_0x47fdfc(0xbdb)]()[_0x47fdfc(0x6a2)](this)){const _0xeccdc0=SceneManager['_scene'][_0x47fdfc(0x7d9)];_0xeccdc0&&_0xeccdc0[_0x47fdfc(0x56f)](this);}},Game_Actor[_0x46ffcc(0x9c1)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x89d)]=function(){const _0x2b158f=_0x46ffcc;if(!this['isConfused']()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype'][_0x2b158f(0x89d)][_0x2b158f(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb7d)]=Game_Actor['prototype']['makeActionList'],Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x793)]=function(){const _0x21efc1=_0x46ffcc;if(BattleManager[_0x21efc1(0x4ec)]&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return VisuMZ['BattleCore']['Game_Actor_makeActionList']['call'](this);;}},Game_Actor['prototype'][_0x46ffcc(0x1f3)]=function(){const _0x4f1433=_0x46ffcc,_0x546ec0=[],_0x88d914=new Game_Action(this);return _0x88d914[_0x4f1433(0x622)](),_0x546ec0[_0x4f1433(0x40a)](_0x88d914),_0x546ec0;},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x422)]=function(){const _0x424e67=_0x46ffcc;return this['currentClass']()[_0x424e67(0x8fd)][_0x424e67(0xe0)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x424e67(0x4f9)](/[\r\n]+/):VisuMZ[_0x424e67(0x354)][_0x424e67(0x59e)]['ActorCmd']['BattleCmdList'];},Game_Actor[_0x46ffcc(0x9c1)]['svBattlerAnchorX']=function(){const _0x170001=_0x46ffcc;if(this[_0x170001(0x94f)][_0x170001(0x352)]!==undefined)return this[_0x170001(0x94f)][_0x170001(0x352)];return this['actor']()[_0x170001(0x8fd)][_0x170001(0xe0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x170001(0x94f)][_0x170001(0x352)]=eval(RegExp['$1']),this['_cache'][_0x170001(0x950)]=eval(RegExp['$2'])):this[_0x170001(0x94f)][_0x170001(0x352)]=Game_Battler[_0x170001(0x9c1)]['svBattlerAnchorX'][_0x170001(0x2e0)](this),this[_0x170001(0x94f)][_0x170001(0x352)];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x69b)]=function(){const _0x53e09a=_0x46ffcc;if(this[_0x53e09a(0x94f)][_0x53e09a(0x950)]!==undefined)return this['_cache']['svAnchorY'];return this['actor']()[_0x53e09a(0x8fd)][_0x53e09a(0xe0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x53e09a(0x94f)][_0x53e09a(0x352)]=eval(RegExp['$1']),this[_0x53e09a(0x94f)]['svAnchorY']=eval(RegExp['$2'])):this[_0x53e09a(0x94f)][_0x53e09a(0x950)]=Game_Battler[_0x53e09a(0x9c1)]['svBattlerAnchorY'][_0x53e09a(0x2e0)](this),this[_0x53e09a(0x94f)][_0x53e09a(0x950)];},Game_Actor[_0x46ffcc(0x9c1)]['svBattlerShadowVisible']=function(){const _0x3fe62b=_0x46ffcc;if(this[_0x3fe62b(0x94f)][_0x3fe62b(0x45a)]!==undefined)return this[_0x3fe62b(0x94f)][_0x3fe62b(0x45a)];if(this[_0x3fe62b(0xb81)]()[_0x3fe62b(0x8fd)][_0x3fe62b(0xe0)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x3fe62b(0x94f)]['svShadow']=!![];else this[_0x3fe62b(0xb81)]()[_0x3fe62b(0x8fd)][_0x3fe62b(0xe0)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache']['svShadow']=![]:this[_0x3fe62b(0x94f)][_0x3fe62b(0x45a)]=Game_Battler[_0x3fe62b(0x9c1)][_0x3fe62b(0x504)][_0x3fe62b(0x2e0)](this);return this[_0x3fe62b(0x94f)][_0x3fe62b(0x45a)];},Game_Actor['prototype'][_0x46ffcc(0x633)]=function(){const _0x4a0b16=_0x46ffcc;return VisuMZ[_0x4a0b16(0x354)][_0x4a0b16(0x59e)][_0x4a0b16(0x64a)]['SmoothImage'];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x567)]=function(){const _0x685ebb=_0x46ffcc,_0x4afc19=this[_0x685ebb(0x935)](),_0x31053c=_0x4afc19[0x0]?_0x4afc19[0x0]['wtypeId']:0x0,_0x57b22e=$dataSystem[_0x685ebb(0xdb)][_0x31053c];_0x57b22e&&this[_0x685ebb(0x93d)](_0x57b22e[_0x685ebb(0x72b)]);},Game_Actor['prototype'][_0x46ffcc(0x3e2)]=function(_0x234a59){const _0x22dd67=_0x46ffcc;Game_Battler[_0x22dd67(0x9c1)][_0x22dd67(0x3e2)][_0x22dd67(0x2e0)](this,_0x234a59),this[_0x22dd67(0x6fe)](_0x234a59);},Game_Actor[_0x46ffcc(0x9c1)]['getAttackMotion']=function(){const _0x32ab10=_0x46ffcc,_0x5e3814=this[_0x32ab10(0x935)](),_0x535a68=_0x5e3814[0x0]?_0x5e3814[0x0]['wtypeId']:0x0;return $dataSystem[_0x32ab10(0xdb)][_0x535a68];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x3ca)]=function(_0x426882){const _0x436cca=_0x46ffcc;_0x426882=_0x426882||0x1,_0x426882--;const _0x492e46=this[_0x436cca(0x935)]();return _0x492e46[_0x426882]?_0x492e46[_0x426882][_0x436cca(0x586)]:0x0;},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x10c)]=function(_0x507b6f){const _0x5dbd83=_0x46ffcc;_0x507b6f=_0x507b6f||0x1,_0x507b6f--;const _0x324785=this[_0x5dbd83(0x935)](),_0x28edbb=_0x324785[_0x507b6f]?_0x324785[_0x507b6f][_0x5dbd83(0x7d0)]:0x0;return $dataSystem['attackMotions'][_0x28edbb];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x668)]=function(_0x36d251){const _0x53a18e=_0x46ffcc;_0x36d251=_0x36d251||0x1,_0x36d251--;const _0x161a2e=this[_0x53a18e(0x935)](),_0x52d591=_0x161a2e[_0x36d251]?_0x161a2e[_0x36d251][_0x53a18e(0x7d0)]:0x0,_0x214145=$dataSystem['attackMotions'][_0x52d591];if(_0x214145){if(_0x214145[_0x53a18e(0x56c)]===0x0)this[_0x53a18e(0x5f2)](_0x53a18e(0x29d));else{if(_0x214145[_0x53a18e(0x56c)]===0x1)this['requestMotion'](_0x53a18e(0x1dd));else _0x214145[_0x53a18e(0x56c)]===0x2&&this['requestMotion'](_0x53a18e(0xd2));}this['startWeaponAnimation'](_0x214145[_0x53a18e(0x72b)]);}},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xac1)]=function(_0x564ca3){const _0xa5b62b=_0x46ffcc;if(this[_0xa5b62b(0x738)]()){const _0x108f2f=this[_0xa5b62b(0x935)]();if(_0x108f2f['length']>0x0){const _0x506ba3=_0x108f2f[_0x564ca3];if(_0x506ba3)_0x564ca3=this[_0xa5b62b(0x433)]()[_0xa5b62b(0xb8c)](_0x506ba3);}}this['_activeWeaponSlot']=_0x564ca3||0x0,this['_cache']={};},Game_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x818)]=function(){const _0x3a501e=_0x46ffcc;this[_0x3a501e(0xbed)]=this['_activeWeaponSlot']||0x0,this[_0x3a501e(0xbed)]++,this['_cache']={};},Game_Battler['prototype'][_0x46ffcc(0xa40)]=function(){const _0x57c36e=_0x46ffcc;this[_0x57c36e(0xbed)]=undefined,this[_0x57c36e(0x94f)]={};},VisuMZ[_0x46ffcc(0x354)]['Game_Actor_equips']=Game_Actor[_0x46ffcc(0x9c1)]['equips'],Game_Actor['prototype']['equips']=function(){const _0x211615=_0x46ffcc;let _0x5e6d44=VisuMZ[_0x211615(0x354)][_0x211615(0x8dc)][_0x211615(0x2e0)](this);if(this[_0x211615(0xb4d)])return _0x5e6d44;if(this['_activeWeaponSlot']!==undefined){this[_0x211615(0xb4d)]=!![];const _0x12e865=this[_0x211615(0x214)]();for(let _0x1b6018=0x0;_0x1b6018<_0x12e865[_0x211615(0x9bf)];_0x1b6018++){_0x12e865[_0x1b6018]===0x1&&this['_activeWeaponSlot']!==_0x1b6018&&(_0x5e6d44[_0x1b6018]=null);}this[_0x211615(0xb4d)]=undefined;}return _0x5e6d44;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xbd5)]=Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x766)],Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x766)]=function(_0x225fd6){const _0x3f45b6=_0x46ffcc;this['_activeWeaponSlot']!==undefined&&[0x0,0x1][_0x3f45b6(0x6a2)](_0x225fd6)&&(this['_tempEquipCheck']=!![]);const _0x160713=VisuMZ['BattleCore'][_0x3f45b6(0xbd5)]['call'](this,_0x225fd6);return this['_activeWeaponSlot']!==undefined&&[0x0,0x1]['includes'](_0x225fd6)&&(this[_0x3f45b6(0xb4d)]=![]),_0x160713;},Window_BattleLog['prototype'][_0x46ffcc(0x609)]=function(_0x4424b5){const _0xef3880=_0x46ffcc;return _0x4424b5[_0xef3880(0x738)]()?_0x4424b5[_0xef3880(0x935)]()['length']||0x1:0x1;},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x53b)]=function(_0x396eb7,_0x5cb8a8){const _0x77d655=_0x46ffcc;_0x396eb7&&_0x396eb7[_0x77d655(0x738)]()&&_0x396eb7[_0x77d655(0xac1)](_0x5cb8a8),this[_0x77d655(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x744)]=function(_0x4ddb0c){const _0x5a1dfb=_0x46ffcc;_0x4ddb0c&&_0x4ddb0c[_0x5a1dfb(0x738)]()&&_0x4ddb0c['clearActiveWeaponSlot'](),this[_0x5a1dfb(0x8d5)]();},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x472)]=function(){const _0x5001b6=_0x46ffcc;let _0x326a97=_0x5001b6(0x472);if(this[_0x5001b6(0x7ee)](_0x326a97))return this['_cache'][_0x326a97];return this[_0x5001b6(0x94f)][_0x326a97]=this[_0x5001b6(0x22e)](this[_0x5001b6(0xb81)]()),this['_cache'][_0x326a97];},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x5f4)]=function(){const _0x399e87=_0x46ffcc;let _0x523d9b=_0x399e87(0x5f4);if(this[_0x399e87(0x7ee)](_0x523d9b))return this[_0x399e87(0x94f)][_0x523d9b];return this['_cache'][_0x523d9b]=this[_0x399e87(0x273)](this[_0x399e87(0xb81)]()),this[_0x399e87(0x94f)][_0x523d9b];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x634)]=Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)],Game_Enemy['prototype'][_0x46ffcc(0xb64)]=function(_0x32f794,_0x3f81c1,_0x17f954){const _0x518a58=_0x46ffcc;_0x32f794=DataManager[_0x518a58(0x4e5)](_0x32f794),VisuMZ[_0x518a58(0x354)][_0x518a58(0x634)][_0x518a58(0x2e0)](this,_0x32f794,_0x3f81c1,_0x17f954),Imported['VisuMZ_1_ElementStatusCore']&&this['initElementStatusCore'](),this[_0x518a58(0xbf1)](),this[_0x518a58(0x28f)](),this[_0x518a58(0x739)](),Imported[_0x518a58(0x5cd)]&&this['recoverAll']();},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xbf1)]=function(){const _0x5802b5=_0x46ffcc,_0x18eff5=VisuMZ[_0x5802b5(0x354)][_0x5802b5(0x59e)][_0x5802b5(0xb8b)];this[_0x5802b5(0x2e1)]=_0x18eff5[_0x5802b5(0x224)],this[_0x5802b5(0x7c8)]={},this[_0x5802b5(0x9cd)]();},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x28f)]=function(){const _0x2b0727=_0x46ffcc,_0x40395d=VisuMZ[_0x2b0727(0x354)]['Settings']['Enemy'],_0x40e111=this[_0x2b0727(0xa55)]()['note'];this[_0x2b0727(0x7c8)]={'name':'','wtypeId':_0x40395d[_0x2b0727(0xbad)],'collapse':_0x40395d[_0x2b0727(0x987)],'motionIdle':_0x40395d['MotionIdle'],'width':_0x40395d[_0x2b0727(0x9bd)]||0x40,'height':_0x40395d[_0x2b0727(0x8cf)]||0x40,'anchorX':_0x40395d[_0x2b0727(0x9a7)]||0x0,'anchorY':_0x40395d[_0x2b0727(0xbd2)]||0x0,'shadow':_0x40395d[_0x2b0727(0x6a8)]};_0x40e111['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x2b0727(0x2e1)]=Number(RegExp['$1']));const _0x256940=this[_0x2b0727(0x7c8)];if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW BATTLER: (.*)>/i))_0x256940['name']=String(RegExp['$1']);else{if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x90984e=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x256940[_0x2b0727(0x1a8)]=DataManager[_0x2b0727(0x842)](_0x90984e);}}_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x256940[_0x2b0727(0x15d)]=eval(RegExp['$1']),_0x256940[_0x2b0727(0x561)]=eval(RegExp['$2']));if(_0x40e111['match'](/<SIDEVIEW COLLAPSE>/i))_0x256940[_0x2b0727(0x746)]=!![];else _0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x256940[_0x2b0727(0x746)]=![]);if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW SHOW SHADOW>/i))_0x256940['shadow']=!![];else _0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x256940[_0x2b0727(0x5e9)]=![]);if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x256940[_0x2b0727(0xbc2)]=String(RegExp['$1'])['toLowerCase']()[_0x2b0727(0xafd)]();else{if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xb867ae=String(RegExp['$1'])[_0x2b0727(0x4f9)](/[\r\n]+/)[_0x2b0727(0x112)]('');_0x256940[_0x2b0727(0xbc2)]=DataManager['processRandomizedData'](_0xb867ae);}}_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x256940['width']=Number(RegExp['$1']),_0x256940['height']=Number(RegExp['$2']));if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW WEAPON: (.*)>/i))_0x256940['wtypeId']=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x40e111[_0x2b0727(0xe0)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x1f45fb=String(RegExp['$1'])[_0x2b0727(0x4f9)](/[\r\n]+/)[_0x2b0727(0x112)](''),_0x33535b=DataManager[_0x2b0727(0x842)](_0x1f45fb);_0x256940[_0x2b0727(0x7d0)]=DataManager['getWtypeIdWithName'](_0x33535b);}}if(Imported[_0x2b0727(0x5cd)]){const _0x1acf19=this['getTraitSetKeys']();for(const _0x44dc47 of _0x1acf19){const _0xd4c4b6=this[_0x2b0727(0x7ce)](_0x44dc47)[_0x2b0727(0x5d9)][_0x2b0727(0x7b1)]()[_0x2b0727(0xafd)](),_0x3b5a6a=_0x44dc47['toUpperCase']()['trim']();if(_0x40e111['match'](VisuMZ[_0x2b0727(0xb86)]['RegExp']['SvBattlerSolo-%1-%2'[_0x2b0727(0x498)](_0x3b5a6a,_0xd4c4b6)]))_0x256940[_0x2b0727(0x1a8)]=String(RegExp['$1']);else{if(_0x40e111['match'](VisuMZ['ElementStatusCore'][_0x2b0727(0x217)]['SvBattlerMass-%1-%2'[_0x2b0727(0x498)](_0x3b5a6a,_0xd4c4b6)])){const _0x341df9=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x256940['name']=DataManager['processRandomizedData'](_0x341df9);}}if(_0x40e111[_0x2b0727(0xe0)](VisuMZ[_0x2b0727(0xb86)][_0x2b0727(0x217)][_0x2b0727(0xa56)['format'](_0x3b5a6a,_0xd4c4b6)]))_0x256940['wtypeId']=DataManager[_0x2b0727(0xa2a)](RegExp['$1']);else{if(_0x40e111[_0x2b0727(0xe0)](VisuMZ[_0x2b0727(0xb86)][_0x2b0727(0x217)]['SvWeaponMass-%1-%2'[_0x2b0727(0x498)](_0x3b5a6a,_0xd4c4b6)])){const _0x50744f=String(RegExp['$1'])[_0x2b0727(0x4f9)](/[\r\n]+/)[_0x2b0727(0x112)](''),_0x4b0fe2=DataManager[_0x2b0727(0x842)](_0x50744f);_0x256940[_0x2b0727(0x7d0)]=DataManager['getWtypeIdWithName'](_0x4b0fe2);}}if(_0x40e111[_0x2b0727(0xe0)](VisuMZ[_0x2b0727(0xb86)][_0x2b0727(0x217)][_0x2b0727(0x4a7)['format'](_0x3b5a6a,_0xd4c4b6)]))_0x256940[_0x2b0727(0xbc2)]=String(RegExp['$1'])[_0x2b0727(0xb3e)]()[_0x2b0727(0xafd)]();else{if(_0x40e111[_0x2b0727(0xe0)](VisuMZ[_0x2b0727(0xb86)][_0x2b0727(0x217)][_0x2b0727(0x3a1)[_0x2b0727(0x498)](_0x3b5a6a,_0xd4c4b6)])){const _0x2905ff=String(RegExp['$1'])[_0x2b0727(0x4f9)](/[\r\n]+/)[_0x2b0727(0x112)]('');_0x256940['motionIdle']=DataManager['processRandomizedData'](_0x2905ff);}}}}},Game_Enemy['prototype'][_0x46ffcc(0x88c)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x441)]=function(){const _0x2aa094=_0x46ffcc;return this[_0x2aa094(0x88c)]();},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3ca)]=function(_0x40d344){const _0x501f82=_0x46ffcc;return this[_0x501f82(0x88c)]();},Game_Enemy[_0x46ffcc(0x9c1)]['canBattlerMove']=function(){const _0x6b564c=_0x46ffcc;if(this[_0x6b564c(0xa55)]()['note'][_0x6b564c(0xe0)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x6b564c(0x9c1)]['canBattlerMove'][_0x6b564c(0x2e0)](this);},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x8a9)]=function(){const _0xfe9962=_0x46ffcc;if(this[_0xfe9962(0xa55)]()[_0xfe9962(0x8fd)][_0xfe9962(0xe0)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x945)]=function(){const _0x1b62c0=_0x46ffcc,_0x2870a9=[];for(const _0x4ad0ad of this[_0x1b62c0(0xa55)]()['actions']){const _0x54bd07=$dataSkills[_0x4ad0ad['skillId']];if(_0x54bd07&&!_0x2870a9[_0x1b62c0(0x6a2)](_0x54bd07))_0x2870a9[_0x1b62c0(0x40a)](_0x54bd07);}return _0x2870a9;},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x472)]=function(){const _0x3c2052=_0x46ffcc;let _0x51dae0=_0x3c2052(0x472);if(this[_0x3c2052(0x7ee)](_0x51dae0))return this['_cache'][_0x51dae0];return this[_0x3c2052(0x94f)][_0x51dae0]=this[_0x3c2052(0x22e)](this[_0x3c2052(0xa55)]()),this[_0x3c2052(0x94f)][_0x51dae0];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x5f4)]=function(){const _0x3b96ac=_0x46ffcc;let _0x57c99d=_0x3b96ac(0x5f4);if(this['checkCacheKey'](_0x57c99d))return this[_0x3b96ac(0x94f)][_0x57c99d];return this[_0x3b96ac(0x94f)][_0x57c99d]=this[_0x3b96ac(0x273)](this[_0x3b96ac(0xa55)]()),this[_0x3b96ac(0x94f)][_0x57c99d];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x915)]=function(){const _0x2d6151=_0x46ffcc;if(this['_svBattlerData']!==undefined)return this[_0x2d6151(0x7c8)];return this[_0x2d6151(0x28f)](),this[_0x2d6151(0x7c8)];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x978)]=function(){const _0xe6bd6f=_0x46ffcc;return this['svBattlerData']()[_0xe6bd6f(0x1a8)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x41225a=_0x46ffcc;return this[_0x41225a(0x915)]()[_0x41225a(0x1a8)];},Game_Enemy['prototype']['battlerSmoothImage']=function(){const _0x6e2828=_0x46ffcc;return this['hasSvBattler']()?VisuMZ[_0x6e2828(0x354)][_0x6e2828(0x59e)][_0x6e2828(0x64a)][_0x6e2828(0x6fc)]:VisuMZ['BattleCore'][_0x6e2828(0x59e)]['Enemy']['SmoothImage'];},Game_Enemy['prototype'][_0x46ffcc(0x3e2)]=function(_0x1202e7){const _0x58524b=_0x46ffcc;Game_Battler[_0x58524b(0x9c1)][_0x58524b(0x3e2)]['call'](this,_0x1202e7);if(this['hasSvBattler']())this[_0x58524b(0x6fe)](_0x1202e7);},Game_Enemy[_0x46ffcc(0x9c1)]['performAttack']=function(){const _0xb1a61a=_0x46ffcc,_0xfec675=this['svBattlerData']()[_0xb1a61a(0x7d0)]||0x0,_0xc3c845=$dataSystem['attackMotions'][_0xfec675];if(_0xc3c845){if(_0xc3c845[_0xb1a61a(0x56c)]===0x0)this[_0xb1a61a(0x5f2)](_0xb1a61a(0x29d));else{if(_0xc3c845[_0xb1a61a(0x56c)]===0x1)this['requestMotion'](_0xb1a61a(0x1dd));else _0xc3c845['type']===0x2&&this['requestMotion'](_0xb1a61a(0xd2));}}},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x567)]=function(){const _0x16ea5c=_0x46ffcc,_0x468ed2=this['svBattlerData']()[_0x16ea5c(0x7d0)]||0x0,_0x5229b0=$dataSystem[_0x16ea5c(0xdb)][_0x468ed2];_0x5229b0&&this['startWeaponAnimation'](_0x5229b0[_0x16ea5c(0x72b)]);},Game_Enemy['prototype'][_0x46ffcc(0x357)]=function(){const _0xbb7794=_0x46ffcc,_0x41a1fc=this[_0xbb7794(0x915)]()[_0xbb7794(0x7d0)]||0x0;return $dataSystem[_0xbb7794(0xdb)][_0x41a1fc];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x10c)]=function(_0x19b8db){return this['getAttackMotion']();},Game_Enemy['prototype']['performDamage']=function(){const _0x2a0c96=_0x46ffcc;Game_Battler[_0x2a0c96(0x9c1)]['performDamage'][_0x2a0c96(0x2e0)](this),this['isSpriteVisible']()&&this[_0x2a0c96(0x978)]()&&this[_0x2a0c96(0x5f2)](_0x2a0c96(0x6be)),SoundManager[_0x2a0c96(0xaf3)]();},Game_Enemy[_0x46ffcc(0x9c1)]['performEvasion']=function(){const _0x2ecde2=_0x46ffcc;Game_Battler[_0x2ecde2(0x9c1)][_0x2ecde2(0x914)][_0x2ecde2(0x2e0)](this),this[_0x2ecde2(0x5f2)](_0x2ecde2(0x3c4));},Game_Enemy['prototype']['performMagicEvasion']=function(){const _0x28f3a9=_0x46ffcc;Game_Battler[_0x28f3a9(0x9c1)]['performMagicEvasion'][_0x28f3a9(0x2e0)](this),this[_0x28f3a9(0x5f2)](_0x28f3a9(0x3c4));},Game_Enemy['prototype'][_0x46ffcc(0x657)]=function(){const _0x4cc32b=_0x46ffcc;Game_Battler[_0x4cc32b(0x9c1)][_0x4cc32b(0x657)][_0x4cc32b(0x2e0)](this),this[_0x4cc32b(0x37a)]();},Game_Enemy[_0x46ffcc(0x9c1)]['allowCollapse']=function(){const _0xa6ac1d=_0x46ffcc;if(this[_0xa6ac1d(0x978)]()){if(this[_0xa6ac1d(0x25a)]()>=0x1)return!![];return this['svBattlerData']()['collapse'];}else return!![];},Game_Enemy['prototype'][_0x46ffcc(0x20b)]=function(){const _0x5b3ff7=_0x46ffcc;return this[_0x5b3ff7(0x915)]()[_0x5b3ff7(0x15d)];},Game_Enemy[_0x46ffcc(0x9c1)]['svBattlerAnchorY']=function(){const _0x406237=_0x46ffcc;return this[_0x406237(0x915)]()['anchorY'];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x504)]=function(){const _0x1a9ef6=_0x46ffcc;return this[_0x1a9ef6(0x915)]()[_0x1a9ef6(0x5e9)];},VisuMZ['BattleCore'][_0x46ffcc(0x309)]=Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x426)],Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x426)]=function(_0x381a60){const _0x9d57d6=_0x46ffcc;VisuMZ[_0x9d57d6(0x354)][_0x9d57d6(0x309)]['call'](this,_0x381a60),this[_0x9d57d6(0xbf1)](),this[_0x9d57d6(0x28f)]();const _0x442157=this['battler']();_0x442157&&(_0x442157['_battlerName']=undefined,_0x442157[_0x9d57d6(0x1d1)](this));},Game_Enemy['prototype']['resetNameTempVisibility']=function(){const _0xf2bc74=_0x46ffcc,_0x1b1bd0=VisuMZ[_0xf2bc74(0x354)][_0xf2bc74(0x59e)][_0xf2bc74(0xb8b)];this[_0xf2bc74(0xb6c)]=_0x1b1bd0[_0xf2bc74(0x360)]??0x0;},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x636)]=function(){const _0x4c5d1c=_0x46ffcc;return this['_nameTempVisibleDuration']&&this[_0x4c5d1c(0xb6c)]>0x0;},Game_Enemy[_0x46ffcc(0x9c1)]['updateNameTempVisibility']=function(){const _0x49365d=_0x46ffcc;this['_nameTempVisibleDuration']&&this[_0x49365d(0xb6c)]>0x0&&this['_nameTempVisibleDuration']--;},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x75f)]=function(){const _0x34e923=_0x46ffcc;this[_0x34e923(0xb6c)]=0x0;},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x739)]=function(){const _0x1f620f=_0x46ffcc;this[_0x1f620f(0x89c)]();const _0x5f4084=this[_0x1f620f(0xa55)]()[_0x1f620f(0x8fd)]||'';if(_0x5f4084['match'](/<ASPECT NAME:[ ](.*)>/i)){const _0x6ba4a9=String(RegExp['$1']);this['getAspectData']()[_0x1f620f(0x1a8)]=_0x6ba4a9['format'](this['originalName']());}_0x5f4084['match'](/<ASPECT ICON:[ ](\d+)>/i)&&(this['getAspectData']()[_0x1f620f(0x216)]=Number(RegExp['$1'])),_0x5f4084[_0x1f620f(0xe0)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()[_0x1f620f(0x3e5)]=String(RegExp['$1'])),_0x5f4084['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this['getAspectData']()[_0x1f620f(0x311)]=String(RegExp['$1']));},Game_Enemy[_0x46ffcc(0x9c1)]['clearBattleCoreAspects']=function(){const _0x27cc8f=_0x46ffcc,_0x34a450=VisuMZ[_0x27cc8f(0x354)][_0x27cc8f(0x59e)][_0x27cc8f(0xb8b)][_0x27cc8f(0x56e)]??_0x27cc8f(0x5b8);this[_0x27cc8f(0xabe)]={'name':_0x34a450[_0x27cc8f(0x498)](this['originalName']()),'iconIndex':VisuMZ['BattleCore'][_0x27cc8f(0x59e)][_0x27cc8f(0xb8b)][_0x27cc8f(0x796)]??0x1a,'nameColor':VisuMZ[_0x27cc8f(0x354)][_0x27cc8f(0x59e)][_0x27cc8f(0xb8b)]['AspectColor']??'2','description':''};},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x79e)]=function(){const _0x5e640d=_0x46ffcc;if(this['_aspectData']===undefined)this[_0x5e640d(0x739)]();return this[_0x5e640d(0xabe)];},Game_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xbb5)]=function(){const _0xf6eb1f=_0x46ffcc;return(this[_0xf6eb1f(0x79e)]()[_0xf6eb1f(0x311)]||'')[_0xf6eb1f(0x9bf)]>0x0;},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x11a)]=function(){const _0x29fc95=_0x46ffcc;return VisuMZ[_0x29fc95(0x354)][_0x29fc95(0x59e)][_0x29fc95(0x896)][_0x29fc95(0x74e)];},Game_Enemy['prototype'][_0x46ffcc(0x11a)]=function(){const _0x859b20=_0x46ffcc,_0x474a17=this['enemy']()?this['enemy']()[_0x859b20(0x8fd)]||'':'';if(_0x474a17[_0x859b20(0xe0)](/<POPUP POSITION: HEAD>/i))return _0x859b20(0x1cb);else{if(_0x474a17['match'](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0x474a17['match'](/<POPUP POSITION: BASE>/i))return _0x859b20(0x130);}}return Game_BattlerBase[_0x859b20(0x9c1)]['damagePopupPosition'][_0x859b20(0x2e0)](this);},Game_BattlerBase['prototype'][_0x46ffcc(0x5ab)]=function(){return 0x0;},Game_Enemy['prototype']['damagePopupOffsetX']=function(){const _0x3cc60b=_0x46ffcc,_0x13ad7a=this[_0x3cc60b(0xa55)]()?this[_0x3cc60b(0xa55)]()[_0x3cc60b(0x8fd)]||'':'';if(_0x13ad7a[_0x3cc60b(0xe0)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype']['damagePopupOffsetX']['call'](this);},Game_BattlerBase[_0x46ffcc(0x9c1)][_0x46ffcc(0x783)]=function(){return 0x0;},Game_Enemy[_0x46ffcc(0x9c1)]['damagePopupOffsetY']=function(){const _0x187771=_0x46ffcc,_0xa48eb4=this['enemy']()?this['enemy']()[_0x187771(0x8fd)]||'':'';if(_0xa48eb4[_0x187771(0xe0)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x187771(0x9c1)][_0x187771(0x783)][_0x187771(0x2e0)](this);},Game_Unit[_0x46ffcc(0x9c1)]['processBattleCoreJS']=function(_0x5584b3){const _0x254c0d=_0x46ffcc;for(const _0x17ba22 of this[_0x254c0d(0x3b2)]()){if(_0x17ba22)_0x17ba22[_0x254c0d(0x132)](_0x5584b3);}},Game_Unit[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e1)]=function(){const _0x390f4e=_0x46ffcc,_0x1f4c3e=this[_0x390f4e(0x312)]();return _0x1f4c3e[Math[_0x390f4e(0xcd)](_0x1f4c3e[_0x390f4e(0x9bf)])];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7b7)]=Game_Party['prototype'][_0x46ffcc(0x849)],Game_Party[_0x46ffcc(0x9c1)]['addActor']=function(_0x5d52b6){const _0x2044b0=_0x46ffcc;VisuMZ['BattleCore'][_0x2044b0(0x7b7)]['call'](this,_0x5d52b6),BattleManager[_0x2044b0(0x35e)]();},VisuMZ['BattleCore'][_0x46ffcc(0x35a)]=Game_Party['prototype'][_0x46ffcc(0x745)],Game_Party['prototype'][_0x46ffcc(0x745)]=function(_0x138d8d){const _0x38e876=_0x46ffcc;VisuMZ['BattleCore'][_0x38e876(0x35a)][_0x38e876(0x2e0)](this,_0x138d8d),BattleManager[_0x38e876(0x35e)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb5b)]=Game_Troop[_0x46ffcc(0x9c1)]['setup'],Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)]=function(_0x336586){const _0x5e5a7d=_0x46ffcc;$gameTemp[_0x5e5a7d(0x124)](),$gameTemp[_0x5e5a7d(0x8d6)](_0x336586),VisuMZ[_0x5e5a7d(0x354)]['Game_Troop_setup'][_0x5e5a7d(0x2e0)](this,_0x336586),this[_0x5e5a7d(0xb33)]();},VisuMZ[_0x46ffcc(0x354)]['Game_Troop_expTotal']=Game_Troop[_0x46ffcc(0x9c1)]['expTotal'],Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0x834)]=function(){const _0x3339f2=_0x46ffcc;let _0x416c14=VisuMZ[_0x3339f2(0x354)][_0x3339f2(0x45d)][_0x3339f2(0x2e0)](this);return this[_0x3339f2(0xb92)]&&(_0x416c14*=this['expRate']()),Math['ceil'](_0x416c14);},Game_Troop['prototype'][_0x46ffcc(0xb92)]=function(){return 0x1;},Game_Troop['prototype'][_0x46ffcc(0xb33)]=function(){const _0x5f3351=_0x46ffcc,_0x4e988c=DataManager['createTroopNote'](this['troop']()['id']);if(_0x4e988c[_0x5f3351(0xe0)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x4c1b5b=RegExp['$1'][_0x5f3351(0x4f9)](',')['map'](_0x309ac6=>Number(_0x309ac6));this['checkExtendTroopCompatibility'](),this[_0x5f3351(0x4ed)](_0x4c1b5b);}},Game_Troop['prototype'][_0x46ffcc(0xae4)]=function(){const _0x1dd822=_0x46ffcc;let _0x3e478b=_0x1dd822(0x250)+'\x0a';_0x3e478b+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported[_0x1dd822(0xbab)]&&(VisuMZ[_0x1dd822(0x221)][_0x1dd822(0x613)]<1.11&&(alert(_0x3e478b['format'](_0x1dd822(0x42e))),SceneManager['exit']())),Imported[_0x1dd822(0x899)]&&(VisuMZ[_0x1dd822(0xa48)][_0x1dd822(0x613)]<1.19&&(alert(_0x3e478b[_0x1dd822(0x498)](_0x1dd822(0x816))),SceneManager[_0x1dd822(0x462)]())),Imported[_0x1dd822(0x24d)]&&(VisuMZ[_0x1dd822(0xa92)][_0x1dd822(0x613)]<1.15&&(alert(_0x3e478b[_0x1dd822(0x498)](_0x1dd822(0xdf))),SceneManager[_0x1dd822(0x462)]()));},Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0x4ed)]=function(_0x9564ec){const _0x493ce7=_0x46ffcc;this['_namesCount']={};for(const _0x3f907e of this[_0x493ce7(0x3b2)]()){if(!_0x3f907e)continue;_0x3f907e[_0x493ce7(0xad4)]('');}for(const _0x51c7c2 of _0x9564ec){const _0x56c9cb=$dataTroops[_0x51c7c2];if(_0x56c9cb)this[_0x493ce7(0x604)](_0x56c9cb);}this[_0x493ce7(0x7fd)]();},Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0x604)]=function(_0x36b0e9){const _0x2f1241=_0x46ffcc;for(const _0x14cff0 of _0x36b0e9[_0x2f1241(0x3b2)]){if($dataEnemies[_0x14cff0[_0x2f1241(0x5ce)]]){const _0x34f92e=_0x14cff0[_0x2f1241(0x5ce)],_0x14e4d2=_0x14cff0['x'],_0x5a7cd0=_0x14cff0['y'],_0x91eef8=new Game_Enemy(_0x34f92e,_0x14e4d2,_0x5a7cd0);_0x14cff0[_0x2f1241(0x674)]&&_0x91eef8[_0x2f1241(0x369)](),this[_0x2f1241(0x14a)]['push'](_0x91eef8);}}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x6db)]=Game_Map[_0x46ffcc(0x9c1)]['setupBattleback'],Game_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0xa51)]=function(){const _0x5f4646=_0x46ffcc;VisuMZ[_0x5f4646(0x354)][_0x5f4646(0x6db)][_0x5f4646(0x2e0)](this),this['setupBattlebackBattleCore']();},Game_Map['prototype'][_0x46ffcc(0xb04)]=function(){const _0x5efe7c=_0x46ffcc;this[_0x5efe7c(0x33a)]={},this[_0x5efe7c(0x981)]={};if(!$dataMap)return;const _0x4b54c7=$dataMap[_0x5efe7c(0x8fd)];if(!_0x4b54c7)return;const _0x22f59c=_0x4b54c7[_0x5efe7c(0xe0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x22f59c)for(const _0x3a9725 of _0x22f59c){_0x3a9725[_0x5efe7c(0xe0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x53f4b6=Number(RegExp['$1']),_0x48106b=Number(RegExp['$2']),_0x4f2c3b=_0x48106b===0x1?this[_0x5efe7c(0x33a)]:this[_0x5efe7c(0x981)],_0x1bdfa7=String(RegExp['$3']);_0x4f2c3b[_0x53f4b6]=_0x1bdfa7;}},VisuMZ['BattleCore']['Game_Map_battleback1Name']=Game_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x9d4)],Game_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x9d4)]=function(){const _0x5d5c2e=_0x46ffcc;if(!BattleManager['isBattleTest']()){const _0x17d0ac=$gamePlayer[_0x5d5c2e(0x219)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this['_regionBattleback1'][_0x17d0ac])return this[_0x5d5c2e(0x33a)][_0x17d0ac];}return VisuMZ['BattleCore']['Game_Map_battleback1Name'][_0x5d5c2e(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x890)]=Game_Map[_0x46ffcc(0x9c1)]['battleback2Name'],Game_Map['prototype']['battleback2Name']=function(){const _0xd7508b=_0x46ffcc;if(!BattleManager[_0xd7508b(0xa6a)]()){const _0x17dbc0=$gamePlayer[_0xd7508b(0x219)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0xd7508b(0x33a)]&&this[_0xd7508b(0x981)][_0x17dbc0])return this['_regionBattleback2'][_0x17dbc0];}return VisuMZ[_0xd7508b(0x354)][_0xd7508b(0x890)][_0xd7508b(0x2e0)](this);},VisuMZ['BattleCore']['Game_Map_encounterList']=Game_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f6)],Game_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f6)]=function(){const _0x3354e6=_0x46ffcc;let _0xc1b5c=JsonEx['makeDeepCopy'](VisuMZ[_0x3354e6(0x354)][_0x3354e6(0x7fb)]['call'](this));return VisuMZ['BattleCore'][_0x3354e6(0xba1)](_0xc1b5c);},VisuMZ['BattleCore'][_0x46ffcc(0xba1)]=function(_0x3d57a6){const _0x23b2b7=_0x46ffcc;var _0x201e8b,_0x3ee30f,_0x505db1;for(_0x505db1=_0x3d57a6[_0x23b2b7(0x9bf)]-0x1;_0x505db1>0x0;_0x505db1--){_0x201e8b=Math[_0x23b2b7(0x27a)](Math[_0x23b2b7(0x7a6)]()*(_0x505db1+0x1)),_0x3ee30f=_0x3d57a6[_0x505db1],_0x3d57a6[_0x505db1]=_0x3d57a6[_0x201e8b],_0x3d57a6[_0x201e8b]=_0x3ee30f;}return _0x3d57a6;},VisuMZ[_0x46ffcc(0x354)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x46ffcc(0x9c1)]['command357'],Game_Interpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0x7db)]=function(_0x2a0a0f){const _0x358e8a=_0x46ffcc;return $gameTemp[_0x358e8a(0x184)](this),VisuMZ[_0x358e8a(0x354)][_0x358e8a(0x805)][_0x358e8a(0x2e0)](this,_0x2a0a0f);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x612)]=Game_Interpreter[_0x46ffcc(0x9c1)]['updateWaitMode'],Game_Interpreter['prototype'][_0x46ffcc(0xbc6)]=function(){const _0x4b8800=_0x46ffcc;if(SceneManager[_0x4b8800(0xaf2)]())switch(this[_0x4b8800(0x8b6)]){case _0x4b8800(0xf7):if(Imported[_0x4b8800(0x1f8)]){if($gameScreen[_0x4b8800(0x666)]()[_0x4b8800(0x87c)]>0x0)return!![];this[_0x4b8800(0x8b6)]='';}break;case _0x4b8800(0x998):if(BattleManager[_0x4b8800(0x787)]['isAnimationPlaying']())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0x600):if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0xb00)]())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0x4cf):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x4b8800(0x666)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x4b8800(0x666)]()[_0x4b8800(0x335)]>0x0)return!![];this['_waitMode']='';}break;case'battleEffect':if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x16f)]())return!![];this['_waitMode']='';break;case _0x4b8800(0x32a):if(BattleManager['_spriteset'][_0x4b8800(0xb13)]())return!![];this['_waitMode']='';break;case _0x4b8800(0x427):if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x409)]())return!![];this[_0x4b8800(0x8b6)]='';break;case'battlelog':if(BattleManager[_0x4b8800(0x8f1)][_0x4b8800(0x200)]())return!![];this[_0x4b8800(0x8b6)]='';break;case'battleMove':if(BattleManager['_spriteset']['isAnyoneMoving']())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0x78e):if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x6c9)]())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0xb46):if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x4b7)]())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0x785):if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x774)]())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0x413):if(Imported[_0x4b8800(0x5fe)]){if(BattleManager[_0x4b8800(0x787)][_0x4b8800(0x535)]())return!![];this[_0x4b8800(0x8b6)]='';}break;case _0x4b8800(0x9da):if(Imported[_0x4b8800(0x1f8)]){if($gameScreen[_0x4b8800(0x666)]()['skewDuration']>0x0)return!![];this[_0x4b8800(0x8b6)]='';}break;case _0x4b8800(0x5b9):if(BattleManager['_spriteset'][_0x4b8800(0x5a2)]())return!![];this[_0x4b8800(0x8b6)]='';break;case _0x4b8800(0xaf1):if(Imported[_0x4b8800(0x1f8)]){if($gameScreen['battleCameraData']()[_0x4b8800(0x6dc)]>0x0)return!![];this[_0x4b8800(0x8b6)]='';}break;case'battleInjectPrep':if(Imported[_0x4b8800(0x98c)]){if(BattleManager['_spriteset'][_0x4b8800(0x249)]){if(BattleManager['_spriteset'][_0x4b8800(0x249)]())return!![];this[_0x4b8800(0x8b6)]='battleInjectAni';}else this['_waitMode']='';break;}break;case _0x4b8800(0x300):if(Imported[_0x4b8800(0x98c)]){if(BattleManager[_0x4b8800(0x787)]['isAnyoneInjectAnimating']())return!![];this[_0x4b8800(0x8b6)]='';}break;}return VisuMZ[_0x4b8800(0x354)]['Game_Interpreter_updateWaitMode'][_0x4b8800(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x577)]=Game_Interpreter[_0x46ffcc(0x9c1)]['command301'],Game_Interpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0x961)]=function(_0x4acbb8){const _0x1d9262=_0x46ffcc;return!$gameParty[_0x1d9262(0x40c)]()?this['command301_PreBattleEvent'](_0x4acbb8):VisuMZ['BattleCore']['Game_Interpreter_command301']['call'](this,_0x4acbb8);},Game_Interpreter['prototype'][_0x46ffcc(0x5b4)]=function(_0x526bd4){const _0x396f68=_0x46ffcc;return VisuMZ[_0x396f68(0x354)]['Game_Interpreter_command301']['call'](this,_0x526bd4),BattleManager[_0x396f68(0x38a)](_0x4308cd=>{const _0x191e13=_0x396f68;this[_0x191e13(0xa45)][this[_0x191e13(0x401)]]=_0x4308cd;}),!![];},VisuMZ['BattleCore']['CheckMapBattleEventValid']=function(_0x1cdf5c){const _0x47f03d=_0x46ffcc,_0x18a815=$dataCommonEvents[_0x1cdf5c];if(!_0x18a815)return![];if(_0x18a815[_0x47f03d(0x497)]['length']<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x46ffcc(0x7df)]=function(_0xf4aab5){const _0x45e320=_0x46ffcc,_0x410dcc=VisuMZ[_0x45e320(0x354)][_0x45e320(0x59e)][_0x45e320(0xac4)],_0x17e461=_0x410dcc[_0x45e320(0x4ba)],_0xbb6d9=$dataCommonEvents[_0x17e461];if(_0xbb6d9&&VisuMZ[_0x45e320(0x354)]['CheckMapBattleEventValid'](_0x17e461)){const _0x5e300d=this[_0x45e320(0x3a3)]()?this[_0x45e320(0x7e2)]:0x0,_0x408164=_0xbb6d9['list'];this[_0x45e320(0x7bc)](_0x408164,_0x5e300d),this[_0x45e320(0xa7e)]=JsonEx['makeDeepCopy'](this[_0x45e320(0xa7e)]);const _0x4b1305={'code':0xbc3,'indent':this[_0x45e320(0x401)],'parameters':JsonEx[_0x45e320(0x494)](_0xf4aab5)};return this[_0x45e320(0xa7e)][_0x45e320(0x630)](this[_0x45e320(0x447)]+0x1,0x0,_0x4b1305),!![];}else return VisuMZ[_0x45e320(0x354)]['Game_Interpreter_command301']['call'](this,_0xf4aab5);},VisuMZ['BattleCore'][_0x46ffcc(0xb89)]=BattleManager[_0x46ffcc(0x16b)],BattleManager[_0x46ffcc(0x16b)]=function(){const _0x1c0d75=_0x46ffcc;VisuMZ[_0x1c0d75(0x354)]['BattleManager_onEncounter'][_0x1c0d75(0x2e0)](this),this['onEncounterBattleCore']();},BattleManager[_0x46ffcc(0x1bf)]=function(){const _0x4337d1=_0x46ffcc,_0x49fe27=VisuMZ['BattleCore']['Settings']['Mechanics'],_0x77c6d5=_0x49fe27[_0x4337d1(0x4ba)];_0x77c6d5&&VisuMZ[_0x4337d1(0x354)][_0x4337d1(0x9e8)](_0x77c6d5)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x4337d1(0x9aa)](_0x49fe27[_0x4337d1(0x4ba)]),$gameMap[_0x4337d1(0x5f8)](),$gameMap['_interpreter'][_0x4337d1(0x2d7)]=!![]),_0x49fe27[_0x4337d1(0x8b7)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x9ab)]=Scene_Map[_0x46ffcc(0x9c1)]['updateCallMenu'],Scene_Map['prototype'][_0x46ffcc(0xa64)]=function(){const _0x108f05=_0x46ffcc;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x108f05(0x354)][_0x108f05(0x9ab)][_0x108f05(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)]['Scene_Map_launchBattle']=Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x46f)],Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x46f)]=function(){const _0x108981=_0x46ffcc;BattleManager[_0x108981(0x1d0)]?this[_0x108981(0x8f9)]():VisuMZ[_0x108981(0x354)][_0x108981(0x568)][_0x108981(0x2e0)](this);},Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x8f9)]=function(){const _0x3a3049=_0x46ffcc;this[_0x3a3049(0x90e)]=!![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb85)]=SceneManager['isSceneChanging'],SceneManager['isSceneChanging']=function(){const _0x3b81db=_0x46ffcc;if(BattleManager[_0x3b81db(0x1d0)])return![];return VisuMZ['BattleCore'][_0x3b81db(0xb85)][_0x3b81db(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x86e)]=Game_Interpreter[_0x46ffcc(0x9c1)]['terminate'],Game_Interpreter['prototype']['terminate']=function(){const _0x3f16df=_0x46ffcc;VisuMZ[_0x3f16df(0x354)][_0x3f16df(0x86e)][_0x3f16df(0x2e0)](this),this['_preBattleCommonEvent']&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x3f16df(0x5e4)][_0x3f16df(0x679)]());},Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x679)]=function(){const _0x5bb872=_0x46ffcc;BattleManager[_0x5bb872(0x1d0)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x5bb872(0xef)]();},VisuMZ[_0x46ffcc(0x354)]['Scene_Map_initializeAfter']=Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Scene_Map[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x38a1aa=_0x46ffcc;VisuMZ[_0x38a1aa(0x354)]['Scene_Map_initializeAfter'][_0x38a1aa(0x2e0)](this),BattleManager[_0x38a1aa(0x9e0)]&&(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x8ae)]=Scene_Map['prototype'][_0x46ffcc(0x3e3)],Scene_Map['prototype']['initialize']=function(){const _0x4a03ce=_0x46ffcc;VisuMZ[_0x4a03ce(0x354)][_0x4a03ce(0x8ae)][_0x4a03ce(0x2e0)](this),$gameTemp[_0x4a03ce(0x124)]();},VisuMZ[_0x46ffcc(0x354)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x46ffcc(0x9c1)]['applyItem'],Scene_ItemBase['prototype'][_0x46ffcc(0xe5)]=function(){const _0xd9900=_0x46ffcc;VisuMZ[_0xd9900(0x354)][_0xd9900(0x646)]['call'](this);if(this[_0xd9900(0x50d)]()[_0xd9900(0x8fd)][_0xd9900(0xe0)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()['note'][_0xd9900(0xe0)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0xd9900(0xa73)]=[]),DataManager[_0xd9900(0x3bf)](this[_0xd9900(0x50d)]())&&($gameTemp[_0xd9900(0xa73)]=[]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x5c3)]=Scene_Options['prototype']['maxCommands'],Scene_Options[_0x46ffcc(0x9c1)]['maxCommands']=function(){const _0x2bb82a=_0x46ffcc;let _0x3458c3=VisuMZ[_0x2bb82a(0x354)][_0x2bb82a(0x5c3)][_0x2bb82a(0x2e0)](this);const _0x3033d3=VisuMZ['BattleCore'][_0x2bb82a(0x59e)];if(_0x3033d3[_0x2bb82a(0x6c1)][_0x2bb82a(0xb83)]&&_0x3033d3[_0x2bb82a(0x6c1)][_0x2bb82a(0x296)])_0x3458c3+=0x2;if(_0x3033d3[_0x2bb82a(0xa97)]['AddOption']&&_0x3033d3[_0x2bb82a(0xa97)][_0x2bb82a(0x296)])_0x3458c3+=0x1;return _0x3458c3;},VisuMZ['BattleCore'][_0x46ffcc(0x762)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x165027=_0x46ffcc;VisuMZ[_0x165027(0x354)][_0x165027(0x762)][_0x165027(0x2e0)](this),this[_0x165027(0x5a8)]();},VisuMZ['BattleCore']['Scene_Battle_start']=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x63a)],Scene_Battle[_0x46ffcc(0x9c1)]['start']=function(){const _0x276bdf=_0x46ffcc;SceneManager[_0x276bdf(0x3b4)]()?(Scene_Message[_0x276bdf(0x9c1)][_0x276bdf(0x63a)]['call'](this),this[_0x276bdf(0x787)]&&this[_0x276bdf(0x787)][_0x276bdf(0x881)](),BattleManager[_0x276bdf(0x499)]&&BattleManager[_0x276bdf(0x8e8)]()):(VisuMZ[_0x276bdf(0x354)]['Scene_Battle_start'][_0x276bdf(0x2e0)](this),$gameTroop[_0x276bdf(0x48b)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb50)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xef)],Scene_Battle['prototype'][_0x46ffcc(0xef)]=function(){const _0x5c9307=_0x46ffcc;SceneManager[_0x5c9307(0x6b4)]()?Scene_Message['prototype'][_0x5c9307(0xef)]['call'](this):VisuMZ[_0x5c9307(0x354)][_0x5c9307(0xb50)]['call'](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x512)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x87f)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x87f)]=function(){const _0x4b6c38=_0x46ffcc;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x4b6c38(0x9c1)][_0x4b6c38(0x87f)][_0x4b6c38(0x2e0)](this):VisuMZ[_0x4b6c38(0x354)][_0x4b6c38(0x512)]['call'](this),$gameTemp['clearBattleBalloons'](),this[_0x4b6c38(0x5a8)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3d9)]=function(){const _0x210255=_0x46ffcc;if(ConfigManager[_0x210255(0x66a)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager['uiInputPosition'];else{if(this['battleLayoutStyle']()===_0x210255(0x245))return![];else{return Scene_Message['prototype']['isRightInputMode'][_0x210255(0x2e0)](this);;}}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x45f)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x858)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x858)]=function(){const _0x45844a=_0x46ffcc;VisuMZ[_0x45844a(0x354)][_0x45844a(0x45f)][_0x45844a(0x2e0)](this),this[_0x45844a(0x154)]()===_0x45844a(0x245)&&this[_0x45844a(0xa03)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa63)]=function(_0x2dce21){const _0x59e6c5=_0x46ffcc;_0x2dce21?(this[_0x59e6c5(0x6eb)]['x']=(Graphics[_0x59e6c5(0x448)]-Graphics[_0x59e6c5(0xab3)])/0x2,this[_0x59e6c5(0x6eb)]['y']=(Graphics[_0x59e6c5(0x212)]-Graphics['boxHeight'])/0x2):(this[_0x59e6c5(0x6eb)]['x']=Graphics[_0x59e6c5(0x448)]*0xa,this['_windowLayer']['y']=Graphics['height']*0xa);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x3f7)]=Scene_Battle[_0x46ffcc(0x9c1)]['selectNextCommand'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x86d)]=function(){const _0x52f687=_0x46ffcc,_0xd031e3=BattleManager[_0x52f687(0xb81)]();VisuMZ['BattleCore'][_0x52f687(0x3f7)]['call'](this);if(_0xd031e3){if(_0xd031e3===BattleManager['actor']())return;if(_0xd031e3===BattleManager['_subject'])return;if(_0xd031e3[_0x52f687(0x430)]())_0xd031e3[_0x52f687(0x430)]()[_0x52f687(0x189)]();}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xa27)]=Scene_Battle['prototype'][_0x46ffcc(0x22c)],Scene_Battle['prototype']['selectPreviousCommand']=function(){const _0x1f2e13=_0x46ffcc,_0x14091b=BattleManager[_0x1f2e13(0xb81)]();if(_0x14091b&&_0x14091b[_0x1f2e13(0x430)])_0x14091b[_0x1f2e13(0x430)]()['stepBack']();VisuMZ[_0x1f2e13(0x354)][_0x1f2e13(0xa27)]['call'](this);},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_createAllWindows']=Scene_Battle['prototype']['createAllWindows'],Scene_Battle['prototype']['createAllWindows']=function(){const _0x2da171=_0x46ffcc;this[_0x2da171(0xa79)](),VisuMZ[_0x2da171(0x354)][_0x2da171(0x43e)][_0x2da171(0x2e0)](this),this['createAutoBattleWindow']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x3ef)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x361)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x361)]=function(){const _0x367a0c=_0x46ffcc;if(VisuMZ[_0x367a0c(0x354)][_0x367a0c(0x59e)][_0x367a0c(0x17f)]['BattleLogRectJS'])return VisuMZ[_0x367a0c(0x354)][_0x367a0c(0x59e)][_0x367a0c(0x17f)][_0x367a0c(0x2b9)][_0x367a0c(0x2e0)](this);return VisuMZ[_0x367a0c(0x354)][_0x367a0c(0x3ef)][_0x367a0c(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x572)]=Scene_Battle[_0x46ffcc(0x9c1)]['createPartyCommandWindow'],Scene_Battle[_0x46ffcc(0x9c1)]['createPartyCommandWindow']=function(){const _0x513852=_0x46ffcc;VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow'][_0x513852(0x2e0)](this),this[_0x513852(0x60b)]();},Scene_Battle['prototype'][_0x46ffcc(0x60b)]=function(){const _0x28866c=_0x46ffcc,_0x5a5a91=this['_partyCommandWindow'];_0x5a5a91[_0x28866c(0x59a)](_0x28866c(0x381),this['commandAutoBattle']['bind'](this)),_0x5a5a91['setHandler']('options',this[_0x28866c(0x548)][_0x28866c(0x479)](this));const _0x3522cd=this[_0x28866c(0x154)]();switch(_0x3522cd){case'xp':case _0x28866c(0x1cd):return this[_0x28866c(0x79f)][_0x28866c(0x9cb)](0x1);break;}},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x4d0)]=function(){const _0x481f72=_0x46ffcc;BattleManager[_0x481f72(0x4ec)]=!![],$gameParty[_0x481f72(0x4ff)](),this[_0x481f72(0x86d)](),BattleManager[_0x481f72(0x6b6)]()&&(BattleManager[_0x481f72(0xa54)]=![]);},Scene_Battle['prototype'][_0x46ffcc(0x548)]=function(){const _0x4f5d12=_0x46ffcc;this[_0x4f5d12(0xb26)]()?(this[_0x4f5d12(0x8dd)]=!![],this[_0x4f5d12(0x8f1)]['push'](_0x4f5d12(0xb70),VisuMZ[_0x4f5d12(0x354)]['Settings']['PartyCmd'][_0x4f5d12(0x8de)])):this[_0x4f5d12(0x599)]();},Scene_Battle['prototype'][_0x46ffcc(0xb26)]=function(){const _0x4e0ba7=_0x46ffcc;return BattleManager[_0x4e0ba7(0x7c4)]();},Scene_Battle[_0x46ffcc(0x9c1)]['callOptions']=function(){const _0x3cb950=_0x46ffcc;this[_0x3cb950(0x8dd)]=![],this[_0x3cb950(0x787)]['update'](),this[_0x3cb950(0x6eb)][_0x3cb950(0xa23)]=![];if(BattleManager['isBattleTest']())($dataSystem['battleback1Name']||$dataSystem[_0x3cb950(0x75d)])&&SceneManager[_0x3cb950(0xafe)]();else($gameMap['battleback1Name']()||$gameMap[_0x3cb950(0x75d)]())&&SceneManager['snapForBackground']();SceneManager['push'](Scene_Options),BattleManager[_0x3cb950(0x6b6)]()&&(BattleManager[_0x3cb950(0x499)]=BattleManager['actor']());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x835)]=Scene_Battle[_0x46ffcc(0x9c1)]['updateBattleProcess'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x166)]=function(){const _0x583904=_0x46ffcc;VisuMZ[_0x583904(0x354)][_0x583904(0x835)][_0x583904(0x2e0)](this);if(this[_0x583904(0x8dd)]&&!BattleManager[_0x583904(0x30f)])this[_0x583904(0x599)]();},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_update']=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Scene_Battle['prototype'][_0x46ffcc(0x881)]=function(){const _0x14f089=_0x46ffcc;VisuMZ[_0x14f089(0x354)][_0x14f089(0x262)][_0x14f089(0x2e0)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x46ffcc(0x9c1)]['createAutoBattleWindow']=function(){const _0x5ed1ac=_0x46ffcc,_0x16c1ad=this[_0x5ed1ac(0x3e6)]();this[_0x5ed1ac(0x3bb)]=new Window_AutoBattleCancel(_0x16c1ad),this[_0x5ed1ac(0x3bb)]['hide'](),this['addChild'](this[_0x5ed1ac(0x3bb)]);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e6)]=function(){const _0x21d269=_0x46ffcc;return VisuMZ[_0x21d269(0x354)][_0x21d269(0x59e)][_0x21d269(0x6c1)]['AutoBattleRect'][_0x21d269(0x2e0)](this);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x5a8)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x455)]=function(){const _0x1b8461=_0x46ffcc;if(!this[_0x1b8461(0x3ac)])return;for(const _0x1100b0 of this['_onceParallelInterpreters']){_0x1100b0&&_0x1100b0[_0x1b8461(0x881)]();}},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x9d2)]=function(_0x56e777){const _0x493293=_0x46ffcc,_0x5a0642=$dataCommonEvents[_0x56e777];if(!_0x5a0642)return;const _0x3c2dda=new Game_BattleOnceParallelInterpreter();this[_0x493293(0x298)](_0x3c2dda),_0x3c2dda[_0x493293(0x139)](_0x56e777);},Scene_Battle[_0x46ffcc(0x9c1)]['addOnceParallelInterpreter']=function(_0x2fb757){const _0x305946=_0x46ffcc;this[_0x305946(0x3ac)]=this[_0x305946(0x3ac)]||[],this[_0x305946(0x3ac)][_0x305946(0x40a)](_0x2fb757);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x708)]=function(_0x328c6e){const _0x97ff36=_0x46ffcc;this[_0x97ff36(0x3ac)]=this['_onceParallelInterpreters']||[],this[_0x97ff36(0x3ac)][_0x97ff36(0x112)](_0x328c6e);},Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0x48b)]=function(){const _0x4a76fb=_0x46ffcc;for(const _0x16b80a of this[_0x4a76fb(0x436)]()[_0x4a76fb(0x170)]){if(!this['doesPageHaveOnceParallelStart'](_0x16b80a))continue;SceneManager[_0x4a76fb(0x5e4)][_0x4a76fb(0x4d7)](_0x16b80a);}},Game_Troop[_0x46ffcc(0x9c1)][_0x46ffcc(0x34a)]=function(_0x390644){const _0x256b2c=_0x46ffcc;if(!_0x390644)return;for(const _0x39ced8 of _0x390644['list']){if([0x6c,0x198]['includes'](_0x39ced8['code'])){const _0x12158b=_0x39ced8[_0x256b2c(0x37b)][0x0];if(_0x12158b[_0x256b2c(0xe0)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x4d7)]=function(_0x14d0b6){const _0x91727f=_0x46ffcc;if(!_0x14d0b6)return;const _0x5e2132=new Game_BattleOnceParallelInterpreter();this[_0x91727f(0x298)](_0x5e2132),_0x5e2132[_0x91727f(0x93f)](_0x14d0b6);};function Game_BattleOnceParallelInterpreter(){const _0x5e465f=_0x46ffcc;this[_0x5e465f(0x3e3)](...arguments);}Game_BattleOnceParallelInterpreter[_0x46ffcc(0x9c1)]=Object[_0x46ffcc(0x411)](Game_Interpreter[_0x46ffcc(0x9c1)]),Game_BattleOnceParallelInterpreter[_0x46ffcc(0x9c1)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0x139)]=function(_0x10713d){const _0x22eaa4=_0x46ffcc,_0x5dad18=$dataCommonEvents[_0x10713d];_0x5dad18?this[_0x22eaa4(0xb64)](_0x5dad18[_0x22eaa4(0x497)],0x0):this[_0x22eaa4(0x87f)]();},Game_BattleOnceParallelInterpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0x87f)]=function(){const _0xfa1579=_0x46ffcc;if(!SceneManager['isSceneBattle']())return;SceneManager['_scene'][_0xfa1579(0x708)](this),Game_Interpreter[_0xfa1579(0x9c1)][_0xfa1579(0x87f)]['call'](this);},Game_BattleOnceParallelInterpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0x93f)]=function(_0x2027f4){const _0x4f1d94=_0x46ffcc;_0x2027f4?this['setup'](_0x2027f4[_0x4f1d94(0x497)],0x0):this[_0x4f1d94(0x87f)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x891)]=function(){const _0x2c7471=_0x46ffcc;return VisuMZ['BattleCore'][_0x2c7471(0x59e)][_0x2c7471(0x4eb)]['DisablePartyCmd'];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x95d)]=Scene_Battle[_0x46ffcc(0x9c1)]['startPartyCommandSelection'],Scene_Battle['prototype'][_0x46ffcc(0x35c)]=function(){const _0x4d4599=_0x46ffcc;this[_0x4d4599(0x891)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x4d4599(0x354)]['Scene_Battle_startPartyCommandSelection'][_0x4d4599(0x2e0)](this);},Scene_Battle['prototype'][_0x46ffcc(0x138)]=function(){const _0x28e636=_0x46ffcc;if(BattleManager['isDTB']())this[_0x28e636(0x86d)]();else BattleManager[_0x28e636(0x6b6)]()&&VisuMZ[_0x28e636(0x354)][_0x28e636(0x95d)][_0x28e636(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_commandFight']=Scene_Battle['prototype'][_0x46ffcc(0xb40)],Scene_Battle['prototype'][_0x46ffcc(0xb40)]=function(){const _0x3874bc=_0x46ffcc;BattleManager['isTpb']()?(this[_0x3874bc(0x6ee)](),this[_0x3874bc(0x8e5)]()):VisuMZ[_0x3874bc(0x354)][_0x3874bc(0xa8b)]['call'](this);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x6ee)]=function(){const _0xc02ddd=_0x46ffcc;if(!VisuMZ['BattleCore'][_0xc02ddd(0x4f4)])return;if(Imported[_0xc02ddd(0x899)]&&BattleManager[_0xc02ddd(0x754)]())return;const _0x1e25f7=$gameParty['aliveMembers']()['filter'](_0x2c5692=>_0x2c5692[_0xc02ddd(0x594)]()&&_0x2c5692[_0xc02ddd(0x75b)]());BattleManager[_0xc02ddd(0x203)]=_0x1e25f7[0x0]||null,BattleManager[_0xc02ddd(0x203)]&&BattleManager[_0xc02ddd(0x203)][_0xc02ddd(0x36b)](_0xc02ddd(0x46c));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x873)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3ad)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3ad)]=function(){const _0x59a0aa=_0x46ffcc;VisuMZ['BattleCore'][_0x59a0aa(0x873)][_0x59a0aa(0x2e0)](this);if(!BattleManager['isTpb']())BattleManager['_currentActor']=null;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x202)]=Scene_Battle[_0x46ffcc(0x9c1)]['createActorCommandWindow'],Scene_Battle['prototype'][_0x46ffcc(0x231)]=function(){const _0x5b9fc7=_0x46ffcc;VisuMZ[_0x5b9fc7(0x354)][_0x5b9fc7(0x202)][_0x5b9fc7(0x2e0)](this),this[_0x5b9fc7(0xa07)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa07)]=function(){const _0x15fccf=_0x46ffcc,_0x32b5c9=this[_0x15fccf(0xa2c)];_0x32b5c9['setHandler'](_0x15fccf(0x4c9),this[_0x15fccf(0xb98)][_0x15fccf(0x479)](this)),_0x32b5c9[_0x15fccf(0x59a)](_0x15fccf(0x381),this[_0x15fccf(0x82e)][_0x15fccf(0x479)](this)),_0x32b5c9[_0x15fccf(0x59a)]('singleSkill',this[_0x15fccf(0xa19)][_0x15fccf(0x479)](this)),BattleManager['isTpb']()&&(this[_0x15fccf(0x891)]()?delete _0x32b5c9[_0x15fccf(0xb0b)][_0x15fccf(0x6d5)]:_0x32b5c9[_0x15fccf(0x59a)]('cancel',this[_0x15fccf(0x713)][_0x15fccf(0x479)](this)));},Scene_Battle[_0x46ffcc(0x9c1)]['actorCommandEscape']=function(){const _0x15f64a=_0x46ffcc;this[_0x15f64a(0x3ad)]();},Scene_Battle[_0x46ffcc(0x9c1)]['actorCommandAutoBattle']=function(){const _0x34a413=_0x46ffcc;BattleManager[_0x34a413(0xb81)]()['makeAutoBattleActions'](),BattleManager[_0x34a413(0x5f5)](),BattleManager[_0x34a413(0x887)](),this['changeInputWindow']();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa19)]=function(){const _0x23906f=_0x46ffcc,_0x3d4911=BattleManager[_0x23906f(0x772)](),_0x2d3d72=this[_0x23906f(0xa2c)]['currentExt']();_0x3d4911[_0x23906f(0x9a6)](_0x2d3d72),BattleManager[_0x23906f(0xb81)]()[_0x23906f(0x2c2)]($dataSkills[_0x2d3d72]),this[_0x23906f(0x32b)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x713)]=function(){const _0x1f94dc=_0x46ffcc;this['tpbActorSwitchConditionsMet']()?this['performTpbActiveCheckSwitch']():this[_0x1f94dc(0x8fb)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x4f4)]=![],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x460)]=function(){const _0x3b36b4=_0x46ffcc;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x3b36b4(0x754)]())return![];else{if(!VisuMZ[_0x3b36b4(0x354)][_0x3b36b4(0x4f4)])return![];const _0x9da057=$gameParty[_0x3b36b4(0x312)]()['filter'](_0x593dbe=>_0x593dbe[_0x3b36b4(0x594)]()&&_0x593dbe['canInput']());return _0x9da057[_0x3b36b4(0x9bf)]>0x0&&BattleManager[_0x3b36b4(0xb81)]()!==_0x9da057[_0x9da057['length']-0x1];}},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xbe2)]=function(){const _0x12669c=_0x46ffcc,_0x338840=BattleManager[_0x12669c(0xb81)](),_0x2f9606=_0x338840[_0x12669c(0x430)]();if(_0x2f9606)_0x2f9606[_0x12669c(0x189)]();const _0x4b3041=$gameParty[_0x12669c(0x312)]()[_0x12669c(0x8ba)](_0x1dc8c4=>_0x1dc8c4[_0x12669c(0x594)]()&&_0x1dc8c4[_0x12669c(0x75b)]()),_0x42e985=_0x4b3041['indexOf'](_0x338840),_0x1e867a=_0x4b3041[_0x42e985+0x1];BattleManager[_0x12669c(0x203)]=_0x1e867a||null;if(_0x1e867a)_0x1e867a[_0x12669c(0x36b)]('inputting');_0x338840[_0x12669c(0x36b)](_0x12669c(0xbb8)),this[_0x12669c(0x741)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x8fb)]=function(){const _0xbede1d=_0x46ffcc;this['_partyCommandWindow'][_0xbede1d(0xb64)](),this[_0xbede1d(0xa2c)]['close']();if(!VisuMZ['BattleCore'][_0xbede1d(0x4f4)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0xbede1d(0x754)]())return;if(BattleManager[_0xbede1d(0x203)]){BattleManager[_0xbede1d(0x203)][_0xbede1d(0x36b)](_0xbede1d(0xbb8));const _0x16d6cd=BattleManager[_0xbede1d(0x203)][_0xbede1d(0x430)]();if(_0x16d6cd)_0x16d6cd['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xbcf)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2ed)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2ed)]=function(){const _0x5f1147=_0x46ffcc;VisuMZ[_0x5f1147(0x354)][_0x5f1147(0xbcf)]['call'](this),this[_0x5f1147(0x6d6)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x6d6)]=function(){const _0x2d8979=_0x46ffcc;this[_0x2d8979(0xa2c)][_0x2d8979(0x18a)](this[_0x2d8979(0x76e)]),this[_0x2d8979(0x79f)][_0x2d8979(0x18a)](this['_helpWindow']);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa79)]=function(){const _0x392134=_0x46ffcc;if(!VisuMZ[_0x392134(0x354)][_0x392134(0x59e)]['Enemy']['NameLegacy'])return;this[_0x392134(0x432)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x392134(0x6eb)]['x'],this[_0x392134(0x432)]['y']=this[_0x392134(0x6eb)]['y'];const _0x5d2e96=this['children'][_0x392134(0xb8c)](this[_0x392134(0x6eb)]);this[_0x392134(0x8c8)](this[_0x392134(0x432)],_0x5d2e96);for(let _0x19e4f3=0x0;_0x19e4f3<0x8;_0x19e4f3++){const _0xdb3dbe=new Window_EnemyName(_0x19e4f3);this[_0x392134(0x432)][_0x392134(0xb15)](_0xdb3dbe);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x19e)]=Scene_Battle[_0x46ffcc(0x9c1)]['createEnemyWindow'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3d4)]=function(){const _0x1fa0d0=_0x46ffcc;VisuMZ[_0x1fa0d0(0x354)]['Scene_Battle_createEnemyWindow'][_0x1fa0d0(0x2e0)](this),this[_0x1fa0d0(0x1dc)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x1dc)]=function(){const _0x3ca78c=_0x46ffcc;this[_0x3ca78c(0x379)](!![]),this[_0x3ca78c(0x379)](![]);},Scene_Battle[_0x46ffcc(0x9c1)]['multiTargetWindowRect']=function(_0x1c22f9){const _0x20a248=_0x46ffcc,_0x13bc01=Window_BattleMultiTarget[_0x20a248(0x878)],_0x1d6185=this[_0x20a248(0x2fe)](0x1,!![]);let _0x5df0b8=_0x1c22f9?Graphics[_0x20a248(0xab3)]-_0x13bc01:0x0;_0x5df0b8+=_0x1c22f9?Window_BattleMultiTarget[_0x20a248(0x7e1)]:Window_BattleMultiTarget[_0x20a248(0x3e0)];const _0x6b1116=['frontview_ui'][_0x20a248(0x6a2)](this['battleLayoutStyle']())?0x0:this[_0x20a248(0x7d9)][_0x20a248(0x212)];let _0x170a15=Graphics[_0x20a248(0x78c)]-_0x6b1116-_0x1d6185;return _0x170a15+=_0x1c22f9?Window_BattleMultiTarget[_0x20a248(0x3fe)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x5df0b8,_0x170a15,_0x13bc01,_0x1d6185);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x379)]=function(_0x5f5164){const _0x3f0d74=_0x46ffcc,_0x381480=this[_0x3f0d74(0xb03)](_0x5f5164),_0x4ffff5=new Window_BattleMultiTarget(_0x381480,_0x5f5164);this['addWindow'](_0x4ffff5),_0x5f5164?this[_0x3f0d74(0x877)]=_0x4ffff5:this['_enemyMultiTargetWindow']=_0x4ffff5;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x701)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x665)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x665)]=function(){const _0xd29b5e=_0x46ffcc;if(this[_0xd29b5e(0x9d8)])return![];return VisuMZ['BattleCore'][_0xd29b5e(0x701)][_0xd29b5e(0x2e0)](this);},VisuMZ['BattleCore']['Scene_Battle_updateCancelButton']=Scene_Battle['prototype'][_0x46ffcc(0x1bc)],Scene_Battle['prototype']['updateCancelButton']=function(){const _0x16b029=_0x46ffcc;if(this[_0x16b029(0xac3)]&&this[_0x16b029(0x9d8)]){this[_0x16b029(0xac3)][_0x16b029(0xa23)]=!![];return;}VisuMZ[_0x16b029(0x354)][_0x16b029(0x7c9)][_0x16b029(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x838)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x93c)],Scene_Battle[_0x46ffcc(0x9c1)]['isTimeActive']=function(){const _0x470475=_0x46ffcc;if(this['_inBattleStatusMode'])return![];return VisuMZ['BattleCore'][_0x470475(0x838)]['call'](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xbb0)]=Scene_Battle['prototype'][_0x46ffcc(0x2d4)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2d4)]=function(){const _0x1e778a=_0x46ffcc;VisuMZ[_0x1e778a(0x354)][_0x1e778a(0xbb0)]['call'](this),this[_0x1e778a(0x565)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x4af)]=Scene_Battle[_0x46ffcc(0x9c1)]['createPartyCommandWindow'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x4ad)]=function(){const _0x4b02d6=_0x46ffcc;VisuMZ[_0x4b02d6(0x354)][_0x4b02d6(0x4af)][_0x4b02d6(0x2e0)](this);const _0x2c49dc=this[_0x4b02d6(0x79f)];_0x2c49dc[_0x4b02d6(0x59a)](_0x4b02d6(0xa7d),this[_0x4b02d6(0x42c)][_0x4b02d6(0x479)](this,_0x2c49dc));},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_createActorCommandWindowIBS']=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x231)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x1eb4be=_0x46ffcc;VisuMZ['BattleCore'][_0x1eb4be(0x909)]['call'](this);const _0xa1d71f=this[_0x1eb4be(0xa2c)];_0xa1d71f[_0x1eb4be(0x59a)]('status',this[_0x1eb4be(0x42c)]['bind'](this,_0xa1d71f));},Scene_Battle['prototype']['createInBattleStatusWindow']=function(){const _0x49cd98=_0x46ffcc,_0x5d0df2=this[_0x49cd98(0xa8f)](),_0x1211f1=new Window_InBattleStatus(_0x5d0df2);this['addWindow'](_0x1211f1),_0x1211f1[_0x49cd98(0x369)](),_0x1211f1[_0x49cd98(0x6d0)](),this['_inBattleStatusWindow']=_0x1211f1;},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa8f)]=function(){const _0x1dcf66=_0x46ffcc;if(VisuMZ['BattleCore'][_0x1dcf66(0x59e)]['InBattleStatus'][_0x1dcf66(0x345)])return VisuMZ['BattleCore'][_0x1dcf66(0x59e)][_0x1dcf66(0x7da)]['StatusWindow_RectJS']['call'](this);const _0x46caaf=Graphics[_0x1dcf66(0xab3)]>0x3e8?0x78:0x0,_0x35a7bc=this[_0x1dcf66(0x76e)]['y']+this[_0x1dcf66(0x76e)][_0x1dcf66(0x212)],_0x4f87eb=Graphics[_0x1dcf66(0xab3)]-_0x46caaf*0x2,_0x42549e=Graphics['boxHeight']-_0x35a7bc-this[_0x1dcf66(0x34b)]();return new Rectangle(_0x46caaf,_0x35a7bc,_0x4f87eb,_0x42549e);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x42c)]=function(_0x5d52ee){const _0x3f6733=_0x46ffcc;this[_0x3f6733(0x9ed)](this[_0x3f6733(0x4fd)]),this[_0x3f6733(0x9d8)]=!![],this[_0x3f6733(0x76e)]['show']();const _0x459c36=['xp',_0x3f6733(0x1cd),'border',_0x3f6733(0x1b3),_0x3f6733(0x799)];let _0x5938b1=_0x459c36[_0x3f6733(0x6a2)](this[_0x3f6733(0x154)]());_0x5938b1&&(_0x5d52ee[_0x3f6733(0x369)](),_0x5d52ee[_0x3f6733(0x6d0)]()),this['_inBattleStatusWindow'][_0x3f6733(0x1d1)](BattleManager['actor']()||$gameParty[_0x3f6733(0xbdb)]()[0x0]),this[_0x3f6733(0x4fd)][_0x3f6733(0xbe8)](_0x5d52ee),this['_inBattleStatusWindow']['show'](),this[_0x3f6733(0x4fd)]['open']();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x270)]=function(){const _0x181c58=_0x46ffcc;this[_0x181c58(0x9d8)]=![],this[_0x181c58(0x76e)][_0x181c58(0x369)]();const _0x2b80a2=this[_0x181c58(0x4fd)][_0x181c58(0x236)]();_0x2b80a2[_0x181c58(0xbc8)](),_0x2b80a2[_0x181c58(0xadc)](),_0x2b80a2['activate'](),this[_0x181c58(0x4fd)]['hide'](),this[_0x181c58(0x4fd)][_0x181c58(0x6d0)]();},Scene_Battle[_0x46ffcc(0x9c1)]['battleLayoutStyle']=function(){const _0x33e2bc=_0x46ffcc;if($gameTemp[_0x33e2bc(0x782)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x33e2bc(0x853)])return this[_0x33e2bc(0x853)];return this[_0x33e2bc(0x853)]=VisuMZ['BattleCore'][_0x33e2bc(0x59e)][_0x33e2bc(0x31c)][_0x33e2bc(0x2ac)]['toLowerCase']()[_0x33e2bc(0xafd)](),this[_0x33e2bc(0x853)]===_0x33e2bc(0x1b3)&&!Imported[_0x33e2bc(0xa3d)]&&(this['_battleLayoutStyle']='default'),this[_0x33e2bc(0x853)]===_0x33e2bc(0x799)&&!Imported[_0x33e2bc(0x75a)]&&(this['_battleLayoutStyle']='default'),this[_0x33e2bc(0x853)];},VisuMZ['BattleCore'][_0x46ffcc(0xad0)]=Scene_Battle['prototype'][_0x46ffcc(0x34b)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x34b)]=function(){const _0x528847=_0x46ffcc,_0xe6af60=this[_0x528847(0x154)]();switch(_0xe6af60){case'list':return this['calcWindowHeight'](Math[_0x528847(0x148)](0x1,$gameParty[_0x528847(0x2ae)]()),!![]);break;case _0x528847(0x245):return this[_0x528847(0x2fe)](0x4,!![]);break;default:return VisuMZ[_0x528847(0x354)][_0x528847(0xad0)][_0x528847(0x2e0)](this);break;}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x402)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x9a9)],Scene_Battle[_0x46ffcc(0x9c1)]['helpWindowRect']=function(){const _0xaeec4b=_0x46ffcc,_0x288f78=this[_0xaeec4b(0x154)]();switch(_0x288f78){case _0xaeec4b(0x245):return this[_0xaeec4b(0x647)]();break;case _0xaeec4b(0x728):case _0xaeec4b(0x497):case'xp':case _0xaeec4b(0x1cd):default:return VisuMZ['BattleCore']['Scene_Battle_helpWindowRect'][_0xaeec4b(0x2e0)](this);break;}},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x7d4)]=function(){const _0x32cc86=_0x46ffcc,_0x14d824=this[_0x32cc86(0x154)]();switch(_0x14d824){case'xp':case _0x32cc86(0x1cd):return this['statusWindowRectXPStyle']();break;case'border':return this[_0x32cc86(0x56b)]();break;case'default':case _0x32cc86(0x497):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ['BattleCore'][_0x46ffcc(0x331)]=Scene_Battle[_0x46ffcc(0x9c1)]['partyCommandWindowRect'],Scene_Battle[_0x46ffcc(0x9c1)]['partyCommandWindowRect']=function(){const _0x10389b=_0x46ffcc,_0x3a1ed0=this[_0x10389b(0x154)]();switch(_0x3a1ed0){case'xp':case _0x10389b(0x1cd):return this[_0x10389b(0x443)]();break;case _0x10389b(0x245):return this[_0x10389b(0x2df)]();case _0x10389b(0x728):case _0x10389b(0x497):default:return this[_0x10389b(0x7ea)]();break;}},Scene_Battle['prototype'][_0x46ffcc(0x7ea)]=function(){const _0x37e7cf=_0x46ffcc,_0x50020d=VisuMZ[_0x37e7cf(0x354)][_0x37e7cf(0x59e)][_0x37e7cf(0x31c)],_0x33c40c=_0x50020d[_0x37e7cf(0x5bc)]||0xc0,_0x4bac5d=this[_0x37e7cf(0x34b)](),_0x3f6f9b=this[_0x37e7cf(0x3d9)]()?Graphics[_0x37e7cf(0xab3)]-_0x33c40c:0x0,_0x48a79e=Graphics[_0x37e7cf(0x78c)]-_0x4bac5d;return new Rectangle(_0x3f6f9b,_0x48a79e,_0x33c40c,_0x4bac5d);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x50e)]=function(){const _0x340d14=_0x46ffcc;return this[_0x340d14(0x206)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1d9)]=Scene_Battle['prototype'][_0x46ffcc(0x903)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x903)]=function(){const _0x1256c7=_0x46ffcc;if(this['_inBattleStatusMode'])return;const _0x2a0b24=this[_0x1256c7(0x154)]();switch(_0x2a0b24){case'xp':case _0x1256c7(0x1cd):case _0x1256c7(0x245):break;case _0x1256c7(0x728):case'list':default:VisuMZ['BattleCore'][_0x1256c7(0x1d9)][_0x1256c7(0x2e0)](this);break;}},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x5ea)]=function(){const _0x1957b8=_0x46ffcc,_0xfa959d=VisuMZ[_0x1957b8(0x354)][_0x1957b8(0x59e)][_0x1957b8(0x31c)],_0x4deefd=Window_BattleStatus['prototype'][_0x1957b8(0xb9f)](),_0x2c2bf7=Graphics[_0x1957b8(0xab3)]-(_0xfa959d[_0x1957b8(0x5bc)]||0xc0),_0x5a8448=this[_0x1957b8(0x34b)]()+_0x4deefd,_0xce66c3=this['isRightInputMode']()?0x0:Graphics[_0x1957b8(0xab3)]-_0x2c2bf7,_0x356865=Graphics['boxHeight']-_0x5a8448+_0x4deefd;return new Rectangle(_0xce66c3,_0x356865,_0x2c2bf7,_0x5a8448);},Scene_Battle['prototype'][_0x46ffcc(0x259)]=function(){const _0x5d47ff=_0x46ffcc,_0x40f494=Window_BattleStatus['prototype'][_0x5d47ff(0xb9f)](),_0x2b829b=Graphics[_0x5d47ff(0xab3)],_0x17f563=this[_0x5d47ff(0x34b)]()+_0x40f494,_0x2fbc39=0x0,_0x46ecec=Graphics[_0x5d47ff(0x78c)]-_0x17f563+_0x40f494;return new Rectangle(_0x2fbc39,_0x46ecec,_0x2b829b,_0x17f563);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x443)]=function(){const _0x57d1d1=_0x46ffcc,_0x29fce7=Graphics[_0x57d1d1(0xab3)]/0x2,_0x231d14=this[_0x57d1d1(0x2fe)](VisuMZ[_0x57d1d1(0x354)]['Settings']['BattleLayout']['XPActorCommandLines'],!![]),_0x4189cc=Math[_0x57d1d1(0x6da)]((Graphics['boxWidth']-_0x29fce7)/0x2),_0x305f3f=Graphics['boxHeight']-_0x231d14-this[_0x57d1d1(0x259)]()[_0x57d1d1(0x212)];return new Rectangle(_0x4189cc,_0x305f3f,_0x29fce7,_0x231d14);},Scene_Battle[_0x46ffcc(0x9c1)]['helpWindowRectBorderStyle']=function(){const _0x130c9c=_0x46ffcc,_0x6f9151=Graphics[_0x130c9c(0x448)],_0x3e7e4c=Math[_0x130c9c(0x6da)]((Graphics[_0x130c9c(0xab3)]-_0x6f9151)/0x2),_0x18836c=this[_0x130c9c(0x4f8)](),_0xb2cfa7=(Graphics['height']-Graphics[_0x130c9c(0x78c)])/-0x2;return new Rectangle(_0x3e7e4c,_0xb2cfa7,_0x6f9151,_0x18836c);},Scene_Battle['prototype'][_0x46ffcc(0x56b)]=function(){const _0xeb21a6=_0x46ffcc,_0x56dbd7=Graphics['width'],_0x28550e=Math[_0xeb21a6(0x6da)]((Graphics[_0xeb21a6(0xab3)]-_0x56dbd7)/0x2),_0x397206=this[_0xeb21a6(0x2fe)](0x4,!![]),_0xd16af0=Graphics['boxHeight']-_0x397206+(Graphics[_0xeb21a6(0x212)]-Graphics[_0xeb21a6(0x78c)])/0x2;return new Rectangle(_0x28550e,_0xd16af0,_0x56dbd7,_0x397206);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2df)]=function(){const _0x4c857a=_0x46ffcc,_0x5b99da=Math[_0x4c857a(0x27a)](Graphics[_0x4c857a(0x448)]/0x3),_0x484ba9=this[_0x4c857a(0x3d9)]()?(Graphics[_0x4c857a(0x448)]+Graphics[_0x4c857a(0xab3)])/0x2-_0x5b99da:(Graphics[_0x4c857a(0x448)]-Graphics['boxWidth'])/-0x2,_0x250e0b=this[_0x4c857a(0x647)](),_0x315e4a=_0x250e0b['y']+_0x250e0b[_0x4c857a(0x212)],_0x2ad240=this[_0x4c857a(0x56b)](),_0x4e42ec=_0x2ad240['y']-_0x315e4a;return new Rectangle(_0x484ba9,_0x315e4a,_0x5b99da,_0x4e42ec);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x608)]=function(){const _0x2fe412=_0x46ffcc,_0x20fdd2=Math[_0x2fe412(0xa14)](Graphics[_0x2fe412(0x448)]/0x3),_0x1b52b0=Math[_0x2fe412(0x6da)]((Graphics[_0x2fe412(0xab3)]-_0x20fdd2)/0x2),_0x21a17c=this[_0x2fe412(0x2df)](),_0x34916c=_0x21a17c['y'],_0x44c72a=_0x21a17c['height'];return new Rectangle(_0x1b52b0,_0x34916c,_0x20fdd2,_0x44c72a);},Scene_Battle['prototype'][_0x46ffcc(0xa03)]=function(){const _0x2fe923=_0x46ffcc;this[_0x2fe923(0xac3)]['y']=this[_0x2fe923(0x76e)]['y']+this['_helpWindow'][_0x2fe923(0x212)],this[_0x2fe923(0x3d9)]()?this[_0x2fe923(0x154)]()===_0x2fe923(0x245)?this[_0x2fe923(0xac3)]['x']=0x8:this[_0x2fe923(0xac3)]['x']=-this[_0x2fe923(0xac3)][_0x2fe923(0x448)]-0x4:this[_0x2fe923(0xac3)]['x']=Graphics[_0x2fe923(0x448)]-(Graphics[_0x2fe923(0x448)]-Graphics['boxWidth'])/0x2-this[_0x2fe923(0xac3)][_0x2fe923(0x448)]-0x4;},VisuMZ['BattleCore'][_0x46ffcc(0x69a)]=Scene_Battle[_0x46ffcc(0x9c1)]['skillWindowRect'],Scene_Battle[_0x46ffcc(0x9c1)]['skillWindowRect']=function(){const _0x3e7670=_0x46ffcc;if(this[_0x3e7670(0x154)]()===_0x3e7670(0x245))return this[_0x3e7670(0x608)]();else return this[_0x3e7670(0xa61)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x3e7670(0x354)]['Scene_Battle_skillWindowRect'][_0x3e7670(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x46ffcc(0x9c1)]['itemWindowRect'],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x26f)]=function(){const _0x13bca8=_0x46ffcc;if(this[_0x13bca8(0x154)]()===_0x13bca8(0x245))return this[_0x13bca8(0x608)]();else return this[_0x13bca8(0xa61)]()?this[_0x13bca8(0xbc9)]():VisuMZ[_0x13bca8(0x354)][_0x13bca8(0x63f)][_0x13bca8(0x2e0)](this);},Scene_Battle['prototype'][_0x46ffcc(0xa61)]=function(){const _0x235dad=_0x46ffcc;return VisuMZ['BattleCore'][_0x235dad(0x59e)][_0x235dad(0x31c)][_0x235dad(0xa1f)];},Scene_Battle[_0x46ffcc(0x9c1)]['skillItemWindowRectMiddle']=function(){const _0x57ebda=_0x46ffcc,_0x5387a4=Sprite_Button['prototype'][_0x57ebda(0x1c4)]()*0x2+0x4;let _0xcbc8b9=Graphics[_0x57ebda(0xab3)]-_0x5387a4;Imported[_0x57ebda(0xbaf)]&&SceneManager[_0x57ebda(0x466)]()&&(_0xcbc8b9+=_0x5387a4);const _0x1f34d9=this[_0x57ebda(0x289)](),_0x6c3b84=Graphics[_0x57ebda(0x78c)]-_0x1f34d9-this[_0x57ebda(0x7d4)]()['height']+Window_BattleStatus[_0x57ebda(0x9c1)][_0x57ebda(0xb9f)](),_0x50571a=0x0;return new Rectangle(_0x50571a,_0x1f34d9,_0xcbc8b9,_0x6c3b84);},VisuMZ[_0x46ffcc(0x354)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype'][_0x46ffcc(0xbbc)],Scene_Battle['prototype']['startActorSelection']=function(){const _0x2878d8=_0x46ffcc;VisuMZ['BattleCore']['Scene_Battle_startActorSelection']['call'](this),this[_0x2878d8(0x616)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x420)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x337)],Scene_Battle['prototype'][_0x46ffcc(0x337)]=function(){const _0x548f55=_0x46ffcc;VisuMZ['BattleCore'][_0x548f55(0x420)][_0x548f55(0x2e0)](this),this[_0x548f55(0x1eb)][_0x548f55(0x773)](),this[_0x548f55(0x616)]();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x616)]=function(){const _0x361f4a=_0x46ffcc,_0x183117=this[_0x361f4a(0x154)]();['xp','portrait',_0x361f4a(0x245)][_0x361f4a(0x6a2)](_0x183117)&&this[_0x361f4a(0xa2c)][_0x361f4a(0x6d0)](),(_0x183117==='border'||this[_0x361f4a(0xa61)]())&&(this['_skillWindow'][_0x361f4a(0x6d0)](),this[_0x361f4a(0x513)][_0x361f4a(0x6d0)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x690)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x1ab)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x1ab)]=function(){const _0x6694=_0x46ffcc;VisuMZ[_0x6694(0x354)][_0x6694(0x690)][_0x6694(0x2e0)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x32d)]=function(){const _0x4203c8=_0x46ffcc;return[_0x4203c8(0x68b),_0x4203c8(0x644),_0x4203c8(0x4c3)][_0x4203c8(0x6a2)](this[_0x4203c8(0xa2c)]['currentSymbol']());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x939)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x125)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x125)]=function(){const _0x4efcb4=_0x46ffcc;this[_0x4efcb4(0x32d)]()?(this[_0x4efcb4(0x7d9)][_0x4efcb4(0xbc8)](),this[_0x4efcb4(0x6e0)][_0x4efcb4(0x369)](),this[_0x4efcb4(0xa2c)][_0x4efcb4(0xaf5)]()):VisuMZ[_0x4efcb4(0x354)][_0x4efcb4(0x939)][_0x4efcb4(0x2e0)](this),this[_0x4efcb4(0x3de)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7b8)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x7be)],Scene_Battle[_0x46ffcc(0x9c1)]['onEnemyOk']=function(){const _0x5a6cb8=_0x46ffcc;if(!this['_enemyWindow'][_0x5a6cb8(0xa55)]()){this['_enemyWindow'][_0x5a6cb8(0xaf5)]();return;}const _0x51d3bb=BattleManager[_0x5a6cb8(0x772)]();_0x51d3bb[_0x5a6cb8(0x884)](this[_0x5a6cb8(0x1eb)][_0x5a6cb8(0xa55)]()),this[_0x5a6cb8(0x1eb)][_0x5a6cb8(0x31a)](),VisuMZ[_0x5a6cb8(0x354)][_0x5a6cb8(0x7b8)][_0x5a6cb8(0x2e0)](this),this[_0x5a6cb8(0x7b2)]();},VisuMZ['BattleCore'][_0x46ffcc(0x209)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa5a)],Scene_Battle[_0x46ffcc(0x9c1)]['onEnemyCancel']=function(){const _0x88cfa4=_0x46ffcc;this['isNonSubmenuCancel']()?(this[_0x88cfa4(0x7d9)]['show'](),this[_0x88cfa4(0x1eb)][_0x88cfa4(0x369)](),this['_actorCommandWindow']['activate']()):VisuMZ['BattleCore'][_0x88cfa4(0x209)][_0x88cfa4(0x2e0)](this),this['cancelTargetSelectionVisibility'](),this[_0x88cfa4(0x1eb)][_0x88cfa4(0x31a)]();},Scene_Battle[_0x46ffcc(0x9c1)]['okTargetSelectionVisibility']=function(){const _0x3da2c8=_0x46ffcc,_0x188e1a=this[_0x3da2c8(0x154)]();(_0x188e1a==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x3da2c8(0x491)][_0x3da2c8(0xadc)](),this[_0x3da2c8(0x491)][_0x3da2c8(0x164)]&&this['_skillWindow'][_0x3da2c8(0xbc8)](),this[_0x3da2c8(0x513)][_0x3da2c8(0xadc)](),this['_itemWindow'][_0x3da2c8(0x164)]&&this[_0x3da2c8(0x513)][_0x3da2c8(0xbc8)]());},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3de)]=function(){const _0x5e2187=_0x46ffcc,_0x2b4671=this['battleLayoutStyle']();['xp',_0x5e2187(0x1cd),_0x5e2187(0x245)][_0x5e2187(0x6a2)](_0x2b4671)&&this[_0x5e2187(0xa2c)][_0x5e2187(0xadc)](),this[_0x5e2187(0x7b2)]();},Sprite_Battler[_0x46ffcc(0xa02)]=VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x64a)][_0x46ffcc(0x727)],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler['prototype']['initMembers'],Sprite_Battler[_0x46ffcc(0x9c1)]['initMembers']=function(){const _0x124567=_0x46ffcc;VisuMZ[_0x124567(0x354)][_0x124567(0xb25)][_0x124567(0x2e0)](this),this[_0x124567(0x33e)]();if(this[_0x124567(0x42f)]===Sprite_Enemy)this[_0x124567(0x97c)]();this['createDistortionSprite']();},Sprite_Battler['prototype'][_0x46ffcc(0x33e)]=function(){const _0x286ed0=_0x46ffcc;this['_baseX']=0x0,this[_0x286ed0(0x97f)]=0x0,this['_floatHeight']=0x0,this[_0x286ed0(0x97d)]=0x0,this[_0x286ed0(0xbb3)]=0x0,this[_0x286ed0(0x233)]=0x0,this[_0x286ed0(0x689)]='Linear',this[_0x286ed0(0x223)]=0x0,this[_0x286ed0(0x9ca)]=0x0,this['_jumpDuration']=0x0,this[_0x286ed0(0x4d2)]=0x0,this['_targetOpacity']=0xff,this[_0x286ed0(0xa86)]=0x0,this[_0x286ed0(0x87e)]=0x0,this[_0x286ed0(0x957)]=_0x286ed0(0x8e3),this[_0x286ed0(0x551)]=0x0,this[_0x286ed0(0x2d1)]=0x0,this[_0x286ed0(0x11d)]=0x0,this[_0x286ed0(0x90a)]=0x0,this[_0x286ed0(0x255)]=_0x286ed0(0x8e3),this[_0x286ed0(0x4ce)]=!![],this[_0x286ed0(0x207)]=0x0,this[_0x286ed0(0x183)]=0x0,this['_targetSkewX']=0x0,this[_0x286ed0(0x1c1)]=0x0,this[_0x286ed0(0x2a5)]=0x0,this[_0x286ed0(0x720)]=0x0,this[_0x286ed0(0x530)]=_0x286ed0(0x8e3),this[_0x286ed0(0x6ab)]=0x1,this[_0x286ed0(0xa83)]=0x1,this[_0x286ed0(0x67e)]=0x1,this[_0x286ed0(0x2f4)]=0x1,this[_0x286ed0(0xb66)]=0x0,this[_0x286ed0(0x5c2)]=0x0,this['_growEasing']='Linear',this['_flipScaleX']=0x1,this[_0x286ed0(0x3cb)]=0x0,this[_0x286ed0(0x536)]=0x0,this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this[_0x286ed0(0x9ae)]=_0x286ed0(0x8e3),this[_0x286ed0(0x4db)]=0x0,this[_0x286ed0(0x60e)]=0x0;},Sprite_Battler[_0x46ffcc(0x9c1)]['createShadowSprite']=function(){const _0x7e6956=_0x46ffcc;this[_0x7e6956(0x41e)]=new Sprite(),this[_0x7e6956(0x41e)][_0x7e6956(0x267)]=ImageManager[_0x7e6956(0x8c4)](_0x7e6956(0xa3c)),this[_0x7e6956(0x41e)][_0x7e6956(0x267)]['smooth']=VisuMZ[_0x7e6956(0x354)][_0x7e6956(0x59e)][_0x7e6956(0x64a)][_0x7e6956(0x6fc)],this['_shadowSprite']['anchor']['x']=0.5,this[_0x7e6956(0x41e)]['anchor']['y']=0.5,this[_0x7e6956(0x41e)]['y']=-0x2,this[_0x7e6956(0x41e)][_0x7e6956(0xa23)]=![],this[_0x7e6956(0xb15)](this[_0x7e6956(0x41e)]);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xa09)]=function(){const _0x3a6b00=_0x46ffcc;this[_0x3a6b00(0x643)]=new Sprite(),this[_0x3a6b00(0x643)]['anchor']['x']=0.5,this[_0x3a6b00(0x643)]['anchor']['y']=0.5,this[_0x3a6b00(0xb15)](this[_0x3a6b00(0x643)]);},Sprite_Battler['prototype']['_updateColorFilter']=function(){const _0x42035c=_0x46ffcc;if(this[_0x42035c(0x74c)]&&this['getDragonbones']()){Sprite[_0x42035c(0x9c1)][_0x42035c(0xa77)][_0x42035c(0x2e0)](this);return;}const _0x878b89=this[_0x42035c(0x643)];if(!_0x878b89)return;!_0x878b89[_0x42035c(0x6f8)]&&_0x878b89[_0x42035c(0x49d)](),_0x878b89[_0x42035c(0x6f8)][_0x42035c(0x576)](this[_0x42035c(0x2bf)]),_0x878b89[_0x42035c(0x6f8)][_0x42035c(0x1fe)](this[_0x42035c(0x74b)]),_0x878b89[_0x42035c(0x6f8)][_0x42035c(0xce)](this[_0x42035c(0x24f)]);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xa16)]=function(){const _0x1f2aed=_0x46ffcc;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){const _0x1ab109=this[_0x1f2aed(0x4f3)](this['_distortionSprite']);this[_0x1f2aed(0x8c8)](this[_0x1f2aed(0x41e)],_0x1ab109),this[_0x1f2aed(0x87d)]();}this[_0x1f2aed(0xa47)]&&this[_0x1f2aed(0x643)][_0x1f2aed(0xb15)](this['_svBattlerSprite']),this[_0x1f2aed(0x553)]&&this[_0x1f2aed(0x643)][_0x1f2aed(0xb15)](this[_0x1f2aed(0x553)]),this['_mainSprite']&&this['_distortionSprite'][_0x1f2aed(0xb15)](this[_0x1f2aed(0x41c)]),this['_injectAnimationSprite']&&this[_0x1f2aed(0x643)][_0x1f2aed(0xb15)](this['_injectAnimationSprite']),this[_0x1f2aed(0xaaf)]&&this[_0x1f2aed(0x643)]['addChild'](this[_0x1f2aed(0xaaf)]);},Sprite_Battler['prototype'][_0x46ffcc(0x87d)]=function(){const _0xba328e=_0x46ffcc;if(!this['_shadowSprite'])return;if(this[_0xba328e(0x50c)]&&this['_battler'][_0xba328e(0x504)]()){const _0x54e9a7=this[_0xba328e(0x41e)][_0xba328e(0x267)];this['_shadowSprite']['setFrame'](0x0,0x0,_0x54e9a7['width'],_0x54e9a7[_0xba328e(0x212)]);}else this['_shadowSprite'][_0xba328e(0x13f)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x46ffcc(0x9c1)]['damageContainer']=function(){const _0x2a9296=_0x46ffcc;return SceneManager['isSceneBattle']()?SceneManager[_0x2a9296(0x5e4)][_0x2a9296(0x787)][_0x2a9296(0x161)]:this[_0x2a9296(0x7b6)];},Sprite_Battler['prototype'][_0x46ffcc(0x61d)]=function(_0x18cc0e,_0x13f4a2){const _0x4cc170=_0x46ffcc;if(!this[_0x4cc170(0x50c)]['isSpriteVisible']())return;if(BattleManager[_0x4cc170(0x55f)]())return;const _0x3cf1e1=VisuMZ[_0x4cc170(0x354)]['Settings']['Damage'],_0x15871c=new Sprite_Damage();_0x15871c[_0x4cc170(0x695)]=_0x3cf1e1[_0x4cc170(0x1e4)],this[_0x4cc170(0xb4f)](_0x15871c),_0x15871c[_0x4cc170(0x61d)](_0x18cc0e,_0x13f4a2),this['addDamageSprite'](_0x15871c);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x740)]=function(_0x5e793b,_0x22cf04,_0x383cba){const _0x51af33=_0x46ffcc;if(!this[_0x51af33(0x50c)][_0x51af33(0xb3f)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x4321b2=VisuMZ[_0x51af33(0x354)][_0x51af33(0x59e)][_0x51af33(0x896)],_0x4af855=new Sprite_Damage();_0x4af855['_duration']=_0x4321b2[_0x51af33(0x1e4)],this[_0x51af33(0xb4f)](_0x4af855),_0x4af855['setupIconTextPopup'](_0x5e793b,_0x22cf04,_0x383cba),this[_0x51af33(0x2ba)](_0x4af855);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x5a1)]=function(){const _0x403e67=_0x46ffcc;if(!this[_0x403e67(0x50c)][_0x403e67(0x7a9)]())return;while(this['_battler'][_0x403e67(0x7a9)]()){this['_battler'][_0x403e67(0xb3f)]()&&this[_0x403e67(0x8a6)]();}this[_0x403e67(0x50c)][_0x403e67(0x29f)](),this[_0x403e67(0x50c)]['clearResult']();},Sprite_Battler['prototype']['createDamageSprite']=function(){const _0xe455ff=_0x46ffcc;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x557d7f=VisuMZ[_0xe455ff(0x354)][_0xe455ff(0x59e)][_0xe455ff(0x896)],_0x124a11=new Sprite_Damage();_0x124a11[_0xe455ff(0x695)]=_0x557d7f['PopupDuration'],this[_0xe455ff(0xb4f)](_0x124a11),_0x124a11[_0xe455ff(0xb64)](this[_0xe455ff(0x50c)]),_0x124a11[_0xe455ff(0x2d5)](this[_0xe455ff(0x50c)]),this[_0xe455ff(0x2ba)](_0x124a11);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x2ba)]=function(_0x43df50){const _0x2369db=_0x46ffcc;this[_0x2369db(0x980)]['push'](_0x43df50);if(this[_0x2369db(0x115)]()){const _0x5b4684=SceneManager[_0x2369db(0x5e4)][_0x2369db(0x7d9)];if(_0x5b4684)_0x5b4684[_0x2369db(0x2ba)](_0x43df50,this['_battler']);}else{this[_0x2369db(0x4dc)]()[_0x2369db(0xb15)](_0x43df50);if(SceneManager[_0x2369db(0x257)]())_0x43df50[_0x2369db(0x3be)]['x']=-0x1;}},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x115)]=function(){const _0x324d1e=_0x46ffcc;return!$gameSystem[_0x324d1e(0x5c0)]()&&this[_0x324d1e(0x50c)]&&this[_0x324d1e(0x50c)][_0x324d1e(0x738)]();return!$gameSystem[_0x324d1e(0x5c0)]()&&this[_0x324d1e(0x50c)]&&this['_battler'][_0x324d1e(0x738)]()&&Window_BattleStatus['prototype'][_0x324d1e(0x154)]()==='portrait';},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb4f)]=function(_0x50eb54){const _0x465d87=_0x46ffcc;this[_0x465d87(0x9c0)](_0x50eb54,!![]);const _0x5876cc=VisuMZ['BattleCore'][_0x465d87(0x59e)]['Damage'],_0x35e332=SceneManager[_0x465d87(0x257)]()?-0x1:0x1;if(_0x5876cc[_0x465d87(0x1ac)])for(const _0x3a14c6 of this[_0x465d87(0x980)]){_0x3a14c6['x']+=_0x5876cc[_0x465d87(0x94d)]*_0x35e332,_0x3a14c6['y']+=_0x5876cc[_0x465d87(0x22b)];}else{const _0x18f6fb=this[_0x465d87(0x980)][this[_0x465d87(0x980)][_0x465d87(0x9bf)]-0x1];_0x18f6fb&&(_0x50eb54['x']=_0x18f6fb['x']+_0x5876cc['PopupShiftX']*_0x35e332,_0x50eb54['y']=_0x18f6fb['y']+_0x5876cc[_0x465d87(0x22b)]);}},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x9c0)]=function(_0xa868cb,_0x4da588){const _0x21ef3c=_0x46ffcc,_0x4a0d7f=SceneManager[_0x21ef3c(0x257)]()?-0x1:0x1;let _0x2a3fb9=this['_baseX'];_0x2a3fb9+=this[_0x21ef3c(0x4ef)]();let _0x20ca8b=this[_0x21ef3c(0x97f)];const _0x434b98=this['_distortionSprite'][_0x21ef3c(0x3be)]['y'];_0x20ca8b+=this['extraPositionY']();const _0x3d30a9=SceneManager[_0x21ef3c(0x5e4)][_0x21ef3c(0x7d9)];if(_0x3d30a9&&this['parent']===_0x3d30a9){_0x2a3fb9+=_0x3d30a9['x']-this['damageOffsetX']();const _0x4346d=_0x3d30a9[_0x21ef3c(0x3eb)]()*0x3/0x4;_0x20ca8b=_0x3d30a9['y']+_0x4346d,_0x20ca8b=Math[_0x21ef3c(0x4d8)](_0x20ca8b,_0x3d30a9['y']+this['y']-this[_0x21ef3c(0x212)]+_0x4346d);}_0xa868cb['x']=Math[_0x21ef3c(0x6da)](_0x2a3fb9+this[_0x21ef3c(0x6cf)]()*_0x4a0d7f),_0xa868cb['y']=Math[_0x21ef3c(0x6da)](_0x20ca8b+this[_0x21ef3c(0xa6f)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x4d4)]=Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6cf)],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6cf)]=function(){const _0xc9913e=_0x46ffcc;let _0x46a415=VisuMZ[_0xc9913e(0x354)]['Sprite_Battler_damageOffsetX']['call'](this),_0x4fa33e=VisuMZ[_0xc9913e(0x354)][_0xc9913e(0x59e)][_0xc9913e(0x896)][_0xc9913e(0x3bd)]||0x0;return _0x4fa33e+=this[_0xc9913e(0x50c)][_0xc9913e(0x5ab)](),Math['round'](_0x46a415+_0x4fa33e);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x204)]=Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xa6f)],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xa6f)]=function(){const _0x556daf=_0x46ffcc;let _0x4150e1=VisuMZ['BattleCore'][_0x556daf(0x204)][_0x556daf(0x2e0)](this);switch(this['_battler'][_0x556daf(0x11a)]()){case _0x556daf(0x1cb):_0x4150e1-=this[_0x556daf(0x212)]*this[_0x556daf(0x3be)]['y'];break;case _0x556daf(0x7bf):_0x4150e1-=this[_0x556daf(0x212)]*this[_0x556daf(0x3be)]['y']*0.5;break;}let _0x401300=VisuMZ[_0x556daf(0x354)][_0x556daf(0x59e)]['Damage'][_0x556daf(0x52c)]||0x0;return _0x401300+=this[_0x556daf(0x50c)][_0x556daf(0x783)](),Math[_0x556daf(0x6da)](_0x4150e1+_0x401300);},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x6cf)]=function(){const _0x362f4e=_0x46ffcc;return Sprite_Battler['prototype'][_0x362f4e(0x6cf)][_0x362f4e(0x2e0)](this);},Sprite_Actor[_0x46ffcc(0x9c1)]['damageOffsetY']=function(){const _0x465ccc=_0x46ffcc;return Sprite_Battler[_0x465ccc(0x9c1)][_0x465ccc(0xa6f)][_0x465ccc(0x2e0)](this);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x52d)]=function(_0x557ce4){const _0x3ec273=_0x46ffcc;this[_0x3ec273(0x115)]()?SceneManager[_0x3ec273(0x5e4)][_0x3ec273(0x7d9)][_0x3ec273(0x920)](_0x557ce4):(this[_0x3ec273(0x4dc)]()[_0x3ec273(0x7e3)](_0x557ce4),this['_damages'][_0x3ec273(0x112)](_0x557ce4),_0x557ce4[_0x3ec273(0x197)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x4bb)]=Sprite_Battler['prototype'][_0x46ffcc(0x49c)],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x49c)]=function(_0x512cd7,_0x58be9b){const _0x2569ca=_0x46ffcc,_0x5467aa=VisuMZ[_0x2569ca(0x354)][_0x2569ca(0x59e)];if(this[_0x2569ca(0x42f)]===Sprite_Actor)_0x512cd7+=_0x5467aa[_0x2569ca(0x64a)][_0x2569ca(0x815)]||0x0,_0x58be9b+=_0x5467aa['Actor']['OffsetY']||0x0;else this[_0x2569ca(0x42f)]===Sprite_Enemy&&(_0x512cd7+=_0x5467aa[_0x2569ca(0xb8b)][_0x2569ca(0x815)]||0x0,_0x58be9b+=_0x5467aa[_0x2569ca(0xb8b)][_0x2569ca(0x5d2)]||0x0);this[_0x2569ca(0x50c)]&&(_0x512cd7=this['_battler'][_0x2569ca(0x89e)]??_0x512cd7,_0x58be9b=this[_0x2569ca(0x50c)][_0x2569ca(0x98a)]??_0x58be9b),VisuMZ[_0x2569ca(0x354)]['Sprite_Battler_setHome'][_0x2569ca(0x2e0)](this,_0x512cd7,_0x58be9b),this[_0x2569ca(0x3cb)]=this['_homeX'],this[_0x2569ca(0x536)]=this[_0x2569ca(0x611)],this['_homeDuration']=0x0,this[_0x2569ca(0xa1b)]=0x0,this[_0x2569ca(0x9ae)]=_0x2569ca(0x8e3);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x195)]=Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x1288ec=_0x46ffcc;VisuMZ[_0x1288ec(0x354)][_0x1288ec(0x195)]['call'](this),!this[_0x1288ec(0x50c)]&&this['_hpGaugeSprite']&&(this['_hpGaugeSprite'][_0x1288ec(0xa23)]=![]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2eb)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xc9)]=function(){const _0x2d43de=_0x46ffcc;this[_0x2d43de(0xcb)](),this['updateSkew'](),this['updateSpin'](),this[_0x2d43de(0x1e8)](),VisuMZ[_0x2d43de(0x354)][_0x2d43de(0x2eb)][_0x2d43de(0x2e0)](this),this[_0x2d43de(0xbd6)](),this[_0x2d43de(0x457)]();if(this[_0x2d43de(0x42f)]===Sprite_Enemy)this[_0x2d43de(0x84d)]();},VisuMZ[_0x46ffcc(0x354)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a3)]=function(){const _0x38c15f=_0x46ffcc;this['updateHomeMove'](),VisuMZ['BattleCore']['Sprite_Battler_updatePosition'][_0x38c15f(0x2e0)](this),this['updatePositionBattleCore'](),this[_0x38c15f(0x3aa)]();},Sprite_Battler[_0x46ffcc(0x9c1)]['updateSelectionEffect']=function(){const _0x167906=_0x46ffcc,_0x724532=this[_0x167906(0x3d0)]();if(this[_0x167906(0x50c)][_0x167906(0x3a6)]())this['_selectionEffectCount']++,Graphics[_0x167906(0x2b7)]%0x1e<0xf?_0x724532[_0x167906(0x1fe)]([0xff,0xff,0xff,0x40]):_0x724532[_0x167906(0x1fe)]([0x0,0x0,0x0,0x0]);else this[_0x167906(0xbbd)]>0x0&&(this['_selectionEffectCount']=0x0,_0x724532[_0x167906(0x1fe)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype']['silentHomeMove']=function(_0x56014b,_0x4a8b9e){const _0x4a83c1=_0x46ffcc,_0x29be05=VisuMZ['BattleCore'][_0x4a83c1(0x59e)];if(this[_0x4a83c1(0x42f)]===Sprite_Actor)_0x56014b+=_0x29be05[_0x4a83c1(0x64a)][_0x4a83c1(0x815)]||0x0,_0x4a8b9e+=_0x29be05[_0x4a83c1(0x64a)][_0x4a83c1(0x5d2)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x56014b+=_0x29be05[_0x4a83c1(0xb8b)][_0x4a83c1(0x815)]||0x0,_0x4a8b9e+=_0x29be05[_0x4a83c1(0xb8b)][_0x4a83c1(0x5d2)]||0x0);const _0x371dff=_0x56014b-this[_0x4a83c1(0x2bd)],_0x13f7b1=_0x4a8b9e-this[_0x4a83c1(0x611)];this[_0x4a83c1(0x2bd)]=_0x56014b,this['_homeY']=_0x4a8b9e,this[_0x4a83c1(0xd8)]-=_0x371dff,this[_0x4a83c1(0x1e2)]-=_0x13f7b1,this[_0x4a83c1(0x3b0)]-=_0x371dff,this['_targetOffsetY']-=_0x13f7b1,this[_0x4a83c1(0x6a3)]();},Sprite_Battler['prototype'][_0x46ffcc(0x53d)]=function(_0x51222e,_0x52de02,_0x20ba8e,_0xbae27a){const _0x22a241=_0x46ffcc,_0x431faa=VisuMZ['BattleCore']['Settings'];if(this['constructor']===Sprite_Actor)_0x51222e+=_0x431faa[_0x22a241(0x64a)]['OffsetX']||0x0,_0x52de02+=_0x431faa[_0x22a241(0x64a)][_0x22a241(0x5d2)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x51222e+=_0x431faa[_0x22a241(0xb8b)][_0x22a241(0x815)]||0x0,_0x52de02+=_0x431faa[_0x22a241(0xb8b)]['OffsetY']||0x0);(this[_0x22a241(0x3cb)]!==_0x51222e||this[_0x22a241(0x536)]!==_0x52de02)&&(this['_targetHomeX']=_0x51222e,this[_0x22a241(0x536)]=_0x52de02,this[_0x22a241(0xa93)]=_0x20ba8e,this[_0x22a241(0xa1b)]=_0x20ba8e,this['_homeEasing']=_0xbae27a,_0x20ba8e<=0x0&&this[_0x22a241(0x26c)]());},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x9ce)]=function(){const _0x4dfdd4=_0x46ffcc;if(this[_0x4dfdd4(0xa93)]<=0x0)return;const _0x378e0c=this[_0x4dfdd4(0xa93)],_0x4d5cab=this['_homeWholeDuration'],_0x221b6b=this[_0x4dfdd4(0x9ae)];Imported['VisuMZ_0_CoreEngine']?(this['_homeX']=this['applyEasing'](this[_0x4dfdd4(0x2bd)],this['_targetHomeX'],_0x378e0c,_0x4d5cab,_0x221b6b),this['_homeY']=this[_0x4dfdd4(0x325)](this[_0x4dfdd4(0x611)],this['_targetHomeY'],_0x378e0c,_0x4d5cab,_0x221b6b)):(this[_0x4dfdd4(0x2bd)]=(this[_0x4dfdd4(0x2bd)]*(_0x378e0c-0x1)+this[_0x4dfdd4(0x3cb)])/_0x378e0c,this[_0x4dfdd4(0x611)]=(this[_0x4dfdd4(0x611)]*(_0x378e0c-0x1)+this[_0x4dfdd4(0x536)])/_0x378e0c);this[_0x4dfdd4(0xa93)]--;if(this['_homeDuration']<=0x0)this[_0x4dfdd4(0x26c)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x26c)]=function(){const _0x2df5a7=_0x46ffcc;this['_homeX']=this[_0x2df5a7(0x3cb)],this[_0x2df5a7(0x611)]=this[_0x2df5a7(0x536)];},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x57a)]=function(){const _0x3e8d27=_0x46ffcc;this[_0x3e8d27(0x72f)]=this['x'],this[_0x3e8d27(0x97f)]=this['y'],this[_0x3e8d27(0x892)](),this[_0x3e8d27(0x673)](),this['x']+=this[_0x3e8d27(0x4ef)](),this['y']+=this[_0x3e8d27(0x9a0)](),this['y']+=this[_0x3e8d27(0x2f0)](),this['x']=Math[_0x3e8d27(0x27a)](this['x']),this['y']=Math[_0x3e8d27(0x27a)](this['y']);},Sprite_Battler[_0x46ffcc(0x9c1)]['extraPositionX']=function(){let _0x5ee065=0x0;return _0x5ee065;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x9a0)]=function(){const _0x4cacc4=_0x46ffcc;let _0xf1ae10=0x0;return this['_battler']&&!this['_battler'][_0x4cacc4(0x8a9)]()&&(_0xf1ae10-=this['_floatHeight'],_0xf1ae10-=this[_0x4cacc4(0x223)]),_0xf1ae10;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x2f0)]=function(){const _0x1d0c61=_0x46ffcc;let _0x478a05=0x0;if(this[_0x1d0c61(0x643)]&&this['constructor']!==Sprite_SvEnemy){const _0xf85a02=this['_distortionSprite'][_0x1d0c61(0x3be)]['y'];_0x478a05-=(_0xf85a02-0x1)*this[_0x1d0c61(0x212)];}return _0x478a05;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x1e8)]=function(){const _0x19512e=_0x46ffcc,_0x33aa06=this['_battler']&&this[_0x19512e(0x50c)][_0x19512e(0xaa0)]();this[_0x19512e(0x9b7)]=(_0x33aa06?-0x1:0x1)*Math[_0x19512e(0x4d3)](this[_0x19512e(0x3be)]['x']);},Sprite_Battler[_0x46ffcc(0x9c1)]['startFloat']=function(_0xe7cec9,_0xa508f1,_0x37fe68){const _0x12e7e0=_0x46ffcc;if(!this[_0x12e7e0(0x5b2)]())return;if(this['_targetFloatHeight']===_0xe7cec9)return;this[_0x12e7e0(0x97d)]=_0xe7cec9,this[_0x12e7e0(0xbb3)]=_0xa508f1,this[_0x12e7e0(0x233)]=_0xa508f1,this[_0x12e7e0(0x689)]=_0x37fe68||'Linear';if(_0xa508f1<=0x0)this[_0x12e7e0(0xa88)]=_0xe7cec9;},Sprite_Battler[_0x46ffcc(0x9c1)]['updateFloat']=function(){const _0x2e0cc4=_0x46ffcc;if(this[_0x2e0cc4(0xbb3)]<=0x0)return;const _0x5aa92f=this[_0x2e0cc4(0xbb3)],_0x2dca03=this[_0x2e0cc4(0x233)],_0x1fe3c1=this[_0x2e0cc4(0x689)];Imported[_0x2e0cc4(0xbaf)]?this[_0x2e0cc4(0xa88)]=this[_0x2e0cc4(0x325)](this[_0x2e0cc4(0xa88)],this[_0x2e0cc4(0x97d)],_0x5aa92f,_0x2dca03,_0x1fe3c1):this[_0x2e0cc4(0xa88)]=(this[_0x2e0cc4(0xa88)]*(_0x5aa92f-0x1)+this['_targetFloatHeight'])/_0x5aa92f;this[_0x2e0cc4(0xbb3)]--;if(this[_0x2e0cc4(0xbb3)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x280)]=function(){const _0x215fa1=_0x46ffcc;this[_0x215fa1(0xa88)]=this[_0x215fa1(0x97d)];},Sprite_Battler[_0x46ffcc(0x9c1)]['isFloating']=function(){const _0x3ebf90=_0x46ffcc;return this[_0x3ebf90(0xbb3)]>0x0;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6e1)]=function(_0xd89c84,_0x35f2e8){const _0x488985=_0x46ffcc;if(!this[_0x488985(0x5b2)]())return;if(_0x35f2e8<=0x0)return;this['_jumpMaxHeight']=_0xd89c84,this[_0x488985(0x5a3)]=_0x35f2e8,this[_0x488985(0x4d2)]=_0x35f2e8;},Sprite_Battler['prototype'][_0x46ffcc(0x673)]=function(){const _0x1ce2c5=_0x46ffcc;if(this['_jumpDuration']<=0x0)return;const _0xa02f46=this['_jumpWholeDuration']-this[_0x1ce2c5(0x5a3)],_0x4269e3=this[_0x1ce2c5(0x4d2)]/0x2,_0x3d26a1=this[_0x1ce2c5(0x9ca)],_0x411a87=-_0x3d26a1/Math[_0x1ce2c5(0xf2)](_0x4269e3,0x2);this[_0x1ce2c5(0x223)]=_0x411a87*Math[_0x1ce2c5(0xf2)](_0xa02f46-_0x4269e3,0x2)+_0x3d26a1,this[_0x1ce2c5(0x5a3)]--;if(this['_jumpDuration']<=0x0)return this[_0x1ce2c5(0x253)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x253)]=function(){const _0x1a240d=_0x46ffcc;this[_0x1a240d(0x223)]=0x0;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x141)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x46ffcc(0x9c1)]['startOpacity']=function(_0x825077,_0x179ac6,_0x4992a8){const _0x5c59fd=_0x46ffcc;if(this['_targetOpacity']===_0x825077)return;this[_0x5c59fd(0xa8e)]=_0x825077,this['_opacityDuration']=_0x179ac6,this['_opacityWholeDuration']=_0x179ac6,this[_0x5c59fd(0x957)]=_0x4992a8||_0x5c59fd(0x8e3);if(_0x179ac6<=0x0)this[_0x5c59fd(0x2a4)]=_0x825077;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x3aa)]=function(){const _0x3965ea=_0x46ffcc;if(this[_0x3965ea(0x42f)][_0x3965ea(0x1a8)]===_0x3965ea(0x21d))return;if(this['_opacityDuration']<=0x0)return;const _0x2346ef=this['_opacityDuration'],_0x5efa50=this[_0x3965ea(0x87e)],_0x2ad83b=this[_0x3965ea(0x957)];Imported[_0x3965ea(0xbaf)]?this['opacity']=this[_0x3965ea(0x325)](this[_0x3965ea(0x2a4)],this['_targetOpacity'],_0x2346ef,_0x5efa50,_0x2ad83b):this[_0x3965ea(0x2a4)]=(this[_0x3965ea(0x2a4)]*(_0x2346ef-0x1)+this[_0x3965ea(0xa8e)])/_0x2346ef;this[_0x3965ea(0xa86)]--;if(this[_0x3965ea(0xa86)]<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype'][_0x46ffcc(0xabd)]=function(){const _0x222a2a=_0x46ffcc;this[_0x222a2a(0x2a4)]=this[_0x222a2a(0xa8e)];},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x9a1)]=function(){const _0x42132e=_0x46ffcc;return this[_0x42132e(0xa86)]>0x0;},Sprite_Battler['prototype']['updateShadow']=function(){const _0x31165=_0x46ffcc;this['_shadowSprite']['visible']=this['_battler'][_0x31165(0x978)](),this[_0x31165(0x126)]();},Sprite_Battler[_0x46ffcc(0x9c1)]['updateShadowPosition']=function(){const _0x54855f=_0x46ffcc;if(!this[_0x54855f(0x41e)])return;this[_0x54855f(0x41e)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x338)]=function(){const _0x4803fe=_0x46ffcc;if(!this[_0x4803fe(0x50c)])return;this['_shadowScaleX']=this['_battler'][_0x4803fe(0x28c)](),this['_shadowScaleY']=this[_0x4803fe(0x50c)]['battlerShadowScaleY']();},Game_BattlerBase['prototype'][_0x46ffcc(0x28c)]=function(){const _0xbf89d6=_0x46ffcc,_0x51b241=this[_0xbf89d6(0x738)]()?this[_0xbf89d6(0xb81)]():this[_0xbf89d6(0xa55)]();if(_0x51b241){const _0x1960e8=_0x51b241['note'];if(_0x1960e8['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x1960e8[_0xbf89d6(0xe0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x46ffcc(0x9c1)]['battlerShadowScaleY']=function(){const _0x56ab3b=_0x46ffcc,_0x31c883=this['isActor']()?this[_0x56ab3b(0xb81)]():this[_0x56ab3b(0xa55)]();if(_0x31c883){const _0x320b8e=_0x31c883[_0x56ab3b(0x8fd)];if(_0x320b8e[_0x56ab3b(0xe0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x320b8e[_0x56ab3b(0xe0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x46ffcc(0x9c1)]['updateScale']=function(){const _0x95e55b=_0x46ffcc;if(this[_0x95e55b(0x42f)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x95e55b(0x580)]();},Sprite_Battler[_0x46ffcc(0x9c1)]['finalizeScale']=function(){const _0x3a7685=_0x46ffcc,_0x5782f8=this['_distortionSprite'];_0x5782f8&&(_0x5782f8[_0x3a7685(0x3be)]['x']=this[_0x3a7685(0x272)](),_0x5782f8[_0x3a7685(0x3be)]['y']=this[_0x3a7685(0x8bc)]());},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x5237b9=_0x46ffcc;let _0x28a110=0x1;return _0x28a110*=this[_0x5237b9(0x9b7)],_0x28a110*=this[_0x5237b9(0x6ab)],_0x28a110;},Sprite_Battler[_0x46ffcc(0x9c1)]['mainSpriteScaleY']=function(){const _0x2bfe7c=_0x46ffcc;let _0x27662d=0x1;return _0x27662d*=this[_0x2bfe7c(0xa83)],_0x27662d;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x54d)]=function(){const _0x5cf06e=_0x46ffcc;return this[_0x5cf06e(0x448)]*this[_0x5cf06e(0x272)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x8c2)]=function(){const _0x3eb24d=_0x46ffcc;return this[_0x3eb24d(0x212)]*this[_0x3eb24d(0x8bc)]();},Sprite_Battler['prototype'][_0x46ffcc(0xa4d)]=function(_0x4d7d57,_0x4e5ac0,_0x53759a,_0x2bfc72){const _0x3e7fcc=_0x46ffcc;if(!this['canMove']())return;if(!this[_0x3e7fcc(0x643)])return;if(this['_targetGrowX']===_0x4d7d57&&this[_0x3e7fcc(0x2f4)]===_0x4e5ac0)return;this['_targetGrowX']=_0x4d7d57,this[_0x3e7fcc(0x2f4)]=_0x4e5ac0,this[_0x3e7fcc(0xb66)]=_0x53759a,this[_0x3e7fcc(0x5c2)]=_0x53759a,this['_growEasing']=_0x2bfc72||_0x3e7fcc(0x8e3),_0x53759a<=0x0&&(this[_0x3e7fcc(0x6ab)]=this[_0x3e7fcc(0x67e)],this['_growY']=this[_0x3e7fcc(0x2f4)]);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x72e)]=function(){const _0x26ec78=_0x46ffcc;if(this['_growDuration']<=0x0)return;if(!this[_0x26ec78(0x643)])return;const _0x3c1404=this['_growDuration'],_0x4f7823=this[_0x26ec78(0x5c2)],_0x42b315=this[_0x26ec78(0xae2)];Imported['VisuMZ_0_CoreEngine']?(this['_growX']=this[_0x26ec78(0x325)](this[_0x26ec78(0x6ab)],this['_targetGrowX'],_0x3c1404,_0x4f7823,_0x42b315),this[_0x26ec78(0xa83)]=this[_0x26ec78(0x325)](this['_growY'],this[_0x26ec78(0x2f4)],_0x3c1404,_0x4f7823,_0x42b315)):(this[_0x26ec78(0x6ab)]=(this[_0x26ec78(0x6ab)]*(_0x3c1404-0x1)+this[_0x26ec78(0x67e)])/_0x3c1404,this[_0x26ec78(0xa83)]=(this[_0x26ec78(0xa83)]*(_0x3c1404-0x1)+this[_0x26ec78(0x2f4)])/_0x3c1404);this[_0x26ec78(0xb66)]--;if(this['_growDuration']<=0x0)this[_0x26ec78(0xb10)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb10)]=function(){const _0x4dae7d=_0x46ffcc;this[_0x4dae7d(0x6ab)]=this['_targetGrowX'],this[_0x4dae7d(0xa83)]=this['_targetGrowY'];},Sprite_Battler['prototype']['isGrowing']=function(){const _0x45ed17=_0x46ffcc;return this[_0x45ed17(0xb66)]>0x0;},Sprite_Battler[_0x46ffcc(0x9c1)]['startSkew']=function(_0x330362,_0xaebb0f,_0x370e52,_0x512978){const _0x32af63=_0x46ffcc;if(!this[_0x32af63(0x5b2)]())return;if(!this[_0x32af63(0x643)])return;if(this[_0x32af63(0xa8a)]===_0x330362&&this[_0x32af63(0x1c1)]===_0xaebb0f)return;this[_0x32af63(0xa8a)]=_0x330362,this[_0x32af63(0x1c1)]=_0xaebb0f,this[_0x32af63(0x2a5)]=_0x370e52,this[_0x32af63(0x720)]=_0x370e52,this[_0x32af63(0x530)]=_0x512978||_0x32af63(0x8e3),_0x370e52<=0x0&&(this[_0x32af63(0x643)][_0x32af63(0x620)]['x']=this[_0x32af63(0xa8a)],this[_0x32af63(0x643)][_0x32af63(0x620)]['y']=this[_0x32af63(0x1c1)]);},Sprite_Battler['prototype'][_0x46ffcc(0x801)]=function(){const _0x106c4e=_0x46ffcc;if(this[_0x106c4e(0x2a5)]<=0x0)return;if(!this[_0x106c4e(0x643)])return;const _0xe6769f=this[_0x106c4e(0x2a5)],_0x18bc03=this[_0x106c4e(0x720)],_0x4f7c50=this['_skewEasing'],_0x4fa054=this[_0x106c4e(0x643)];Imported[_0x106c4e(0xbaf)]?(_0x4fa054[_0x106c4e(0x620)]['x']=this[_0x106c4e(0x325)](_0x4fa054['skew']['x'],this[_0x106c4e(0xa8a)],_0xe6769f,_0x18bc03,_0x4f7c50),_0x4fa054[_0x106c4e(0x620)]['y']=this['applyEasing'](_0x4fa054['skew']['y'],this[_0x106c4e(0x1c1)],_0xe6769f,_0x18bc03,_0x4f7c50)):(_0x4fa054[_0x106c4e(0x620)]['x']=(_0x4fa054[_0x106c4e(0x620)]['x']*(_0xe6769f-0x1)+this[_0x106c4e(0xa8a)])/_0xe6769f,_0x4fa054[_0x106c4e(0x620)]['y']=(_0x4fa054[_0x106c4e(0x620)]['y']*(_0xe6769f-0x1)+this[_0x106c4e(0x1c1)])/_0xe6769f);this[_0x106c4e(0x2a5)]--;if(this[_0x106c4e(0x2a5)]<=0x0)this[_0x106c4e(0x81b)]();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x1efcaa=_0x46ffcc;this[_0x1efcaa(0x643)][_0x1efcaa(0x620)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x1efcaa(0x620)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x6c6)]=function(){const _0x5d20d9=_0x46ffcc;return this[_0x5d20d9(0x2a5)]>0x0;},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0xb84)]=function(_0x50955c,_0x35455e,_0x363001,_0x195393){const _0x21cafb=_0x46ffcc;if(!this[_0x21cafb(0x5b2)]())return;if(!this[_0x21cafb(0x643)])return;if(this[_0x21cafb(0x2d1)]===_0x50955c)return;this[_0x21cafb(0x2d1)]=_0x50955c,this[_0x21cafb(0x11d)]=_0x35455e,this['_angleWholeDuration']=_0x35455e,this['_angleEasing']=_0x363001||'Linear',this[_0x21cafb(0x4ce)]=_0x195393,this[_0x21cafb(0x4ce)]===undefined&&(this[_0x21cafb(0x4ce)]=!![]),_0x35455e<=0x0&&(this[_0x21cafb(0x551)]=_0x50955c,this[_0x21cafb(0x4ce)]&&(this[_0x21cafb(0x2d1)]=0x0,this[_0x21cafb(0x551)]=0x0));},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x7f5)]=function(){const _0x5f2b59=_0x46ffcc;this[_0x5f2b59(0x2fa)](),this[_0x5f2b59(0x240)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x2fa)]=function(){const _0x16aa84=_0x46ffcc;if(this[_0x16aa84(0x11d)]<=0x0)return;const _0x52fbe7=this[_0x16aa84(0x11d)],_0x3395d0=this[_0x16aa84(0x90a)],_0x2a31fd=this[_0x16aa84(0x255)];Imported[_0x16aa84(0xbaf)]?this['_currentAngle']=this[_0x16aa84(0x325)](this[_0x16aa84(0x551)],this[_0x16aa84(0x2d1)],_0x52fbe7,_0x3395d0,_0x2a31fd):this[_0x16aa84(0x551)]=(this[_0x16aa84(0x551)]*(_0x52fbe7-0x1)+this[_0x16aa84(0x2d1)])/_0x52fbe7;this['_angleDuration']--;if(this[_0x16aa84(0x11d)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x696)]=function(){const _0xd1d277=_0x46ffcc;this[_0xd1d277(0x551)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this[_0xd1d277(0x2d1)]=0x0,this[_0xd1d277(0x551)]=0x0);},Sprite_Battler[_0x46ffcc(0x9c1)]['isSpinning']=function(){const _0x170968=_0x46ffcc;return this[_0x170968(0x11d)]>0x0;},Sprite_Battler[_0x46ffcc(0x9c1)]['applyAngleChange']=function(){const _0x2e93b6=_0x46ffcc;if(!this[_0x2e93b6(0x643)])return;const _0x2f070c=this[_0x2e93b6(0x551)],_0x29d24b=this[_0x2e93b6(0x3be)]['x'],_0x3f226c=this[_0x2e93b6(0x50c)][_0x2e93b6(0x738)]()?-0x1:0x1;this['_distortionSprite'][_0x2e93b6(0x74a)]=_0x2f070c*_0x29d24b*_0x3f226c;const _0x301afe=this[_0x2e93b6(0x643)][_0x2e93b6(0x3be)]['y'];this[_0x2e93b6(0x643)]['y']=this[_0x2e93b6(0x212)]*-0.5*(0x2-_0x301afe),this[_0x2e93b6(0x643)]['y']=Math[_0x2e93b6(0xa14)](this['_distortionSprite']['y']);const _0x50b19d=[this[_0x2e93b6(0x41c)],this[_0x2e93b6(0xa47)],this[_0x2e93b6(0xaaf)]];for(const _0x1f1080 of _0x50b19d){if(!_0x1f1080)continue;_0x1f1080['y']=this['height']*0.5;}this[_0x2e93b6(0x41e)]&&(this[_0x2e93b6(0x6a1)]=this[_0x2e93b6(0x6a1)]??0x1,this[_0x2e93b6(0x5f3)]=this[_0x2e93b6(0x5f3)]??0x1,this['_shadowSprite'][_0x2e93b6(0x3be)]['x']=this[_0x2e93b6(0x643)]['scale']['x']*this[_0x2e93b6(0x6a1)],this[_0x2e93b6(0x41e)][_0x2e93b6(0x3be)]['y']=this['_distortionSprite'][_0x2e93b6(0x3be)]['y']*this[_0x2e93b6(0x5f3)]);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xdd)]=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x25e)],Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x25e)]=function(){const _0x42d4df=_0x46ffcc;VisuMZ[_0x42d4df(0x354)][_0x42d4df(0xdd)][_0x42d4df(0x2e0)](this),VisuMZ[_0x42d4df(0x354)][_0x42d4df(0x59e)][_0x42d4df(0xa97)]['ShowActorGauge']&&this[_0x42d4df(0x440)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb5a)]=Sprite_Enemy['prototype'][_0x46ffcc(0x66d)],Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x66d)]=function(){const _0x259135=_0x46ffcc;VisuMZ[_0x259135(0x354)][_0x259135(0x59e)][_0x259135(0xa97)][_0x259135(0x95f)]&&this[_0x259135(0x440)](),VisuMZ[_0x259135(0x354)][_0x259135(0xb5a)][_0x259135(0x2e0)](this);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x440)]=function(){const _0x4ff741=_0x46ffcc;if(!ConfigManager[_0x4ff741(0x8b5)])return;if(this[_0x4ff741(0x42f)]===Sprite_SvEnemy)return;const _0x1bcf8f=VisuMZ['BattleCore'][_0x4ff741(0x59e)][_0x4ff741(0xa97)],_0x3af028=new Sprite_HpGauge();_0x3af028[_0x4ff741(0x404)]['x']=_0x1bcf8f[_0x4ff741(0x9a7)],_0x3af028[_0x4ff741(0x404)]['y']=_0x1bcf8f[_0x4ff741(0xbd2)],_0x3af028[_0x4ff741(0x3be)]['x']=_0x3af028['scale']['y']=_0x1bcf8f[_0x4ff741(0x1c7)],this[_0x4ff741(0xb60)]=_0x3af028,this[_0x4ff741(0xb15)](this['_hpGaugeSprite']),Spriteset_Battle[_0x4ff741(0xa6c)]&&BattleManager['addChildToUiContainer'](this['_hpGaugeSprite']);},VisuMZ[_0x46ffcc(0x354)]['Sprite_Battler_setBattler']=Sprite_Battler['prototype'][_0x46ffcc(0x1d1)],Sprite_Battler['prototype'][_0x46ffcc(0x1d1)]=function(_0x4c3bdb){const _0x4561f8=_0x46ffcc,_0x1a1777=this[_0x4561f8(0x50c)];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x4561f8(0x2e0)](this,_0x4c3bdb),this[_0x4561f8(0x2fb)](_0x4c3bdb);if(_0x1a1777!==_0x4c3bdb)this[_0x4561f8(0x338)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x2fb)]=function(_0x2e6434){const _0x5724eb=_0x46ffcc;if(!_0x2e6434)return;if(!this[_0x5724eb(0xb60)])return;if(_0x2e6434['isActor']()){}else{if(_0x2e6434[_0x5724eb(0x656)]()){if(this[_0x5724eb(0x42f)]===Sprite_SvEnemy&&!_0x2e6434[_0x5724eb(0x978)]())return;}}this[_0x5724eb(0xb60)][_0x5724eb(0xb64)](_0x2e6434,'hp');},Sprite_Battler[_0x46ffcc(0x9c1)]['hasStaticSvBattler']=function(){const _0xc7a68f=_0x46ffcc;return this[_0xc7a68f(0x50c)]&&this[_0xc7a68f(0x50c)][_0xc7a68f(0xec)]();},Sprite_Battler['prototype']['updateStaticSvBattlerFrames']=function(){const _0x4a1358=_0x46ffcc,_0x1a7632=this[_0x4a1358(0x41c)][_0x4a1358(0x267)];if(!_0x1a7632)return;const _0x28f11a=_0x1a7632[_0x4a1358(0x448)];let _0x347d72=_0x1a7632['height'];if(this[_0x4a1358(0x50c)][_0x4a1358(0xb76)]()){if(this[_0x4a1358(0x767)])_0x347d72=Math[_0x4a1358(0x148)](0x0,this[_0x4a1358(0x767)][_0x4a1358(0x212)]-0x4);}this['_mainSprite'][_0x4a1358(0x13f)](0x0,0x0,_0x28f11a,_0x347d72),this[_0x4a1358(0x13f)](0x0,0x0,_0x28f11a,_0x347d72);},Sprite_Battler['prototype']['updateHpGaugePosition']=function(){const _0x19fc71=_0x46ffcc;if(!this['_battler'])return;if(!this[_0x19fc71(0xb60)])return;const _0x23328b=VisuMZ[_0x19fc71(0x354)]['Settings'][_0x19fc71(0xa97)],_0x20c011=this[_0x19fc71(0xb60)];_0x20c011[_0x19fc71(0xa23)]=this['isVisualHpGaugeDisplayed']();const _0x36bf39=_0x23328b[_0x19fc71(0x815)],_0x58ce9c=_0x23328b['OffsetY'];_0x20c011['x']=_0x36bf39,_0x20c011['x']+=this[_0x19fc71(0x50c)][_0x19fc71(0x472)](),_0x20c011['y']=-this['height']+_0x58ce9c,_0x20c011['y']+=this[_0x19fc71(0x50c)][_0x19fc71(0x5f4)](),Spriteset_Battle[_0x19fc71(0xa6c)]&&SceneManager[_0x19fc71(0x5e4)]['_spriteset']&&(_0x20c011['x']+=this['x'],_0x20c011['y']+=this['y']);},Sprite_Battler['prototype']['isVisualHpGaugeDisplayed']=function(){const _0x46962c=_0x46ffcc;if(!this['_battler'])return![];if(this['_battler'][_0x46962c(0x738)]())return!![];if(this['_battler'][_0x46962c(0x283)]())return![];if(this[_0x46962c(0x2a4)]<=0x0)return![];const _0x31fa5c=this[_0x46962c(0x50c)][_0x46962c(0xa55)]()[_0x46962c(0x8fd)];if(_0x31fa5c[_0x46962c(0xe0)](/<SHOW HP GAUGE>/i))return!![];if(_0x31fa5c[_0x46962c(0xe0)](/<HIDE HP GAUGE>/i))return![];const _0x1585fb=VisuMZ[_0x46962c(0x354)][_0x46962c(0x59e)]['HpGauge'];if(_0x1585fb[_0x46962c(0x43d)]){if(_0x1585fb[_0x46962c(0x6ec)]&&BattleManager[_0x46962c(0xa6a)]())return!![];if(this[_0x46962c(0x50c)][_0x46962c(0x50f)])return![];return this[_0x46962c(0x50c)][_0x46962c(0xb19)]();}return!![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x726)]=Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x285)],Sprite_Battler[_0x46ffcc(0x9c1)]['isMoving']=function(){const _0x2e5e45=_0x46ffcc;if(!this[_0x2e5e45(0x50c)])return![];if(this[_0x2e5e45(0xa93)]>0x0)return!![];return VisuMZ[_0x2e5e45(0x354)][_0x2e5e45(0x726)]['call'](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x57f)]=Sprite_Battler['prototype'][_0x46ffcc(0x966)],Sprite_Battler['prototype']['startMove']=function(_0x3cd349,_0x3dfe44,_0x213e04){const _0x1bc679=_0x46ffcc;this[_0x1bc679(0x5b2)]()&&VisuMZ['BattleCore'][_0x1bc679(0x57f)][_0x1bc679(0x2e0)](this,_0x3cd349,_0x3dfe44,_0x213e04);},Sprite_Battler[_0x46ffcc(0x9c1)]['canMove']=function(){const _0xb84771=_0x46ffcc;if(this[_0xb84771(0x50c)]&&this[_0xb84771(0x50c)][_0xb84771(0xb76)]())return![];if(this[_0xb84771(0x50c)]&&!this[_0xb84771(0x50c)][_0xb84771(0x350)]())return![];return $gameSystem[_0xb84771(0x5c0)]();},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x573)]=function(){},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x189)]=function(){const _0x10523e=_0x46ffcc;this[_0x10523e(0x966)](0x0,0x0,0xc);},Sprite_Battler[_0x46ffcc(0x9c1)]['retreat']=function(){},Sprite_Battler['prototype'][_0x46ffcc(0x99d)]=function(){const _0x15b8a4=_0x46ffcc,_0xb61aa7=VisuMZ[_0x15b8a4(0x354)][_0x15b8a4(0x59e)][_0x15b8a4(0x64a)],_0x2627ea=this[_0x15b8a4(0x50c)]&&this[_0x15b8a4(0x50c)]['isActor']()?0x1:-0x1,_0x559192=this[_0x15b8a4(0x72f)]-this[_0x15b8a4(0x2bd)]+_0x2627ea*_0xb61aa7[_0x15b8a4(0x760)],_0x3687b3=this['_baseY']-this[_0x15b8a4(0x611)]+_0x2627ea*_0xb61aa7[_0x15b8a4(0x596)],_0x58c5c7=_0xb61aa7[_0x15b8a4(0x111)];this[_0x15b8a4(0x966)](_0x559192,_0x3687b3,_0x58c5c7);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x84a)]=function(_0xe9a605,_0x3762fe){const _0x441106=_0x46ffcc,_0x51302d=VisuMZ[_0x441106(0x354)]['Settings'][_0x441106(0x64a)];this['_shakeFlinchDuration']=Math[_0x441106(0xa14)]((_0x51302d[_0x441106(0xbda)]??0x18)*_0x3762fe),this['_shakeFlinchPower']=Math[_0x441106(0x148)](this[_0x441106(0x60e)],_0xe9a605);},Sprite_Battler[_0x46ffcc(0x9c1)][_0x46ffcc(0x457)]=function(){const _0x14d0ea=_0x46ffcc,_0x1d7a86=VisuMZ[_0x14d0ea(0x354)]['Settings'][_0x14d0ea(0x64a)];if(!(_0x1d7a86[_0x14d0ea(0x344)]??![]))return;if(this[_0x14d0ea(0x4db)]>0x0){const _0x5aaab0=this[_0x14d0ea(0x4db)];this[_0x14d0ea(0x60e)]=this['_shakeFlinchPower']*(_0x5aaab0-0x1)/_0x5aaab0,this[_0x14d0ea(0x4db)]--,this[_0x14d0ea(0x4db)]<=0x0&&(this[_0x14d0ea(0x60e)]=0x0);}let _0x48c1a5=this[_0x14d0ea(0x41c)];this[_0x14d0ea(0x50c)]&&this[_0x14d0ea(0x50c)][_0x14d0ea(0x656)]()&&(this['_battler'][_0x14d0ea(0x978)]()&&this[_0x14d0ea(0xa47)]&&(_0x48c1a5=this[_0x14d0ea(0xa47)])),this['_shakeFlinchPower']>0x0?(_0x48c1a5['x']=Math[_0x14d0ea(0xcd)](this['_shakeFlinchPower'])*(Math[_0x14d0ea(0x7a6)]()<0.5?-0x1:0x1),this[_0x14d0ea(0x97f)]!==this['y']&&(_0x48c1a5['y']=this[_0x14d0ea(0x212)]*0.5,_0x48c1a5['y']+=Math[_0x14d0ea(0xcd)](this[_0x14d0ea(0x60e)])*(Math[_0x14d0ea(0x7a6)]()<0.5?-0x1:0x1))):(_0x48c1a5['x']=0x0,_0x48c1a5['y']=this[_0x14d0ea(0x212)]*0.5);},VisuMZ[_0x46ffcc(0x354)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d8)],Sprite_Actor['prototype'][_0x46ffcc(0x1d8)]=function(){const _0x45f225=_0x46ffcc;VisuMZ[_0x45f225(0x354)]['Sprite_Actor_initMembers'][_0x45f225(0x2e0)](this),this[_0x45f225(0xa16)]();},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x3d0)]=function(){const _0x40cb8a=_0x46ffcc;return this[_0x40cb8a(0x643)]||this[_0x40cb8a(0x41c)]||this;},VisuMZ['BattleCore'][_0x46ffcc(0x938)]=Sprite_Actor['prototype'][_0x46ffcc(0x21f)],Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x21f)]=function(){},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x46d)]=function(_0x33302d){const _0x317461=_0x46ffcc;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x33302d)return;if(!_0x33302d[_0x317461(0x5b2)]())return;VisuMZ[_0x317461(0x354)][_0x317461(0x938)]['call'](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x976)]=Sprite_Actor[_0x46ffcc(0x9c1)]['setActorHome'],Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x855)]=function(_0x5b42dd){const _0x30e658=_0x46ffcc;VisuMZ[_0x30e658(0x354)][_0x30e658(0x59e)][_0x30e658(0x64a)]['HomePosJS']?VisuMZ[_0x30e658(0x354)][_0x30e658(0x59e)][_0x30e658(0x64a)]['HomePosJS'][_0x30e658(0x2e0)](this,_0x5b42dd):VisuMZ[_0x30e658(0x354)][_0x30e658(0x976)][_0x30e658(0x2e0)](this,_0x5b42dd);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2a8)]=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d1)],Sprite_Actor['prototype'][_0x46ffcc(0x1d1)]=function(_0x236f70){const _0x11afda=_0x46ffcc;VisuMZ[_0x11afda(0x354)][_0x11afda(0x2a8)]['call'](this,_0x236f70),this[_0x11afda(0xb09)](_0x236f70);},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0xb09)]=function(_0x4e99fe){const _0x4e8f6c=_0x46ffcc;if(!_0x4e99fe)return;if(!this[_0x4e8f6c(0x41c)])return;this['_mainSprite']['anchor']['x']=this[_0x4e8f6c(0x449)]['svBattlerAnchorX'](),this[_0x4e8f6c(0x41c)][_0x4e8f6c(0x404)]['y']=this[_0x4e8f6c(0x449)][_0x4e8f6c(0x69b)](),this[_0x4e8f6c(0x87d)]();},VisuMZ[_0x46ffcc(0x354)]['Sprite_Actor_update']=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Sprite_Actor['prototype'][_0x46ffcc(0x881)]=function(){const _0x260c0d=_0x46ffcc;VisuMZ['BattleCore']['Sprite_Actor_update'][_0x260c0d(0x2e0)](this),this[_0x260c0d(0x449)]&&(this[_0x260c0d(0xb0a)](),this[_0x260c0d(0x813)]());},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xed)]=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x461)],Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x461)]=function(){const _0x295019=_0x46ffcc;VisuMZ['BattleCore'][_0x295019(0xed)]['call'](this),this[_0x295019(0x41c)]&&this['_mainSprite']['bitmap']&&this[_0x295019(0x50c)]&&(this[_0x295019(0x41c)][_0x295019(0x267)][_0x295019(0xbc3)]!==this[_0x295019(0x50c)][_0x295019(0x633)]()&&(this['_mainSprite'][_0x295019(0x267)][_0x295019(0xbc3)]=this[_0x295019(0x50c)]['battlerSmoothImage']()));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x716)]=Sprite_Actor[_0x46ffcc(0x9c1)]['updateShadow'],Sprite_Actor[_0x46ffcc(0x9c1)]['updateShadow']=function(){const _0x5d412f=_0x46ffcc;VisuMZ[_0x5d412f(0x354)][_0x5d412f(0x716)][_0x5d412f(0x2e0)](this),this[_0x5d412f(0x9e3)]();},Sprite_Actor[_0x46ffcc(0x9c1)]['updateShadowBattleCore']=function(){const _0x25fe7f=_0x46ffcc;if(!this[_0x25fe7f(0x41c)])return;if(!this[_0x25fe7f(0x41e)])return;this[_0x25fe7f(0x87d)](),this[_0x25fe7f(0x126)]();},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0a)]=function(){const _0x53d27b=_0x46ffcc;{this[_0x53d27b(0x7e8)]['scale']['x']=0x1/(this[_0x53d27b(0x3be)]['x']||0.001),this[_0x53d27b(0x7e8)]['scale']['y']=0x1/(this[_0x53d27b(0x3be)]['y']||0.001);}{this[_0x53d27b(0x7e8)]['x']=0x0,this['_stateSprite']['y']=-this[_0x53d27b(0x212)]-0x20+0x60;const _0x5dc44b=VisuMZ['BattleCore'][_0x53d27b(0x59e)][_0x53d27b(0x64a)];this[_0x53d27b(0x7e8)]['x']+=_0x5dc44b[_0x53d27b(0x994)]??0x0,this['_stateSprite']['y']+=_0x5dc44b[_0x53d27b(0x822)]??0x0;}},Sprite_Actor['prototype'][_0x46ffcc(0x813)]=function(){const _0x3656a2=_0x46ffcc;if(!$gameSystem[_0x3656a2(0x5c0)]()&&this[_0x3656a2(0x42f)]===Sprite_Actor){const _0xb54088=Scene_Battle[_0x3656a2(0x9c1)][_0x3656a2(0x154)]();[_0x3656a2(0x728),_0x3656a2(0x497),_0x3656a2(0x1cd),_0x3656a2(0x245)][_0x3656a2(0x6a2)](_0xb54088)&&(this['opacity']=0x0);}},Sprite_Actor['prototype']['refreshMotion']=function(){const _0x5557a7=_0x46ffcc,_0xc3fe25=this[_0x5557a7(0x449)];if(_0xc3fe25){if(_0xc3fe25[_0x5557a7(0xa74)])return;const _0x255b32=_0xc3fe25['stateMotionIndex']();if(_0xc3fe25[_0x5557a7(0x5c6)]()||_0xc3fe25['isActing']())this[_0x5557a7(0x45e)]('walk');else{if(_0x255b32===0x3)this[_0x5557a7(0x45e)](_0x5557a7(0x2be));else{if(_0x255b32===0x2)this[_0x5557a7(0x45e)](_0x5557a7(0x521));else{if(this[_0x5557a7(0x3f9)])this['startMotion'](_0x5557a7(0x4c9));else{if(_0xc3fe25[_0x5557a7(0xb16)]())this[_0x5557a7(0x45e)]('wait');else{if(_0xc3fe25['isChanting']())this[_0x5557a7(0x45e)]('chant');else{if(_0xc3fe25[_0x5557a7(0x406)]()||_0xc3fe25[_0x5557a7(0x4d6)]())this[_0x5557a7(0x45e)](_0x5557a7(0x644));else{if(_0x255b32===0x1)this[_0x5557a7(0x45e)](_0x5557a7(0x1f5));else{if(_0xc3fe25[_0x5557a7(0xafb)]())this[_0x5557a7(0x45e)](_0x5557a7(0x44b));else{if(_0xc3fe25[_0x5557a7(0x7fa)]())this[_0x5557a7(0x45e)]('walk');else _0xc3fe25['currentAction']()?this[_0x5557a7(0x45e)](_0x5557a7(0xa3f)):this[_0x5557a7(0x45e)](_0x5557a7(0x5c4));}}}}}}}}}}},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x602)]=function(){const _0x147367=0xa,_0x29322b=0x12c*_0x147367,_0x47fe16=0x1e*_0x147367;this['startMove'](_0x29322b,0x0,_0x47fe16);},Sprite_Actor['prototype'][_0x46ffcc(0x57e)]=function(){const _0x3b1c14=_0x46ffcc;Sprite_Battler[_0x3b1c14(0x9c1)][_0x3b1c14(0x57e)]['call'](this);},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x7f2)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x46ffcc(0x9c1)][_0x46ffcc(0xb8a)]=function(){const _0x1884e8=_0x46ffcc;return Sprite_Battler[_0x1884e8(0xa02)];},Sprite_Actor[_0x46ffcc(0x9c1)]['setupMotion']=function(){},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x86c)]=function(){},Sprite_Actor['prototype'][_0x46ffcc(0x54f)]=function(){const _0x307acc=_0x46ffcc;if(this[_0x307acc(0x2a0)]&&++this[_0x307acc(0x691)]>=this[_0x307acc(0x7f2)]()){if(this[_0x307acc(0x2a0)][_0x307acc(0x3f2)])this[_0x307acc(0x359)]=(this[_0x307acc(0x359)]+0x1)%0x4;else{if(this[_0x307acc(0x359)]<0x2)this[_0x307acc(0x359)]++;else{const _0x3b86ab=this[_0x307acc(0x449)];if(_0x3b86ab)_0x3b86ab[_0x307acc(0xa74)]=undefined;this[_0x307acc(0x358)]();}}this[_0x307acc(0x691)]=0x0;}},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0xbe6)]=function(_0x9cf1db){const _0x4303d6=_0x46ffcc;if(this['_battler']&&this[_0x4303d6(0x50c)]['isDead']()){this[_0x4303d6(0x2a0)]=Sprite_Actor[_0x4303d6(0x624)][_0x4303d6(0x2be)];return;}const _0x42ce41=Sprite_Actor[_0x4303d6(0x624)][_0x9cf1db];this[_0x4303d6(0x2a0)]=_0x42ce41,this['_motionCount']=0x0,this[_0x4303d6(0x359)]=0x0;},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x158)]=function(_0xfac589){const _0x331d9f=_0x46ffcc;if(this[_0x331d9f(0xec)]())return;this[_0x331d9f(0x518)](),this[_0x331d9f(0x553)][_0x331d9f(0xb64)](_0xfac589),this['_actor'][_0x331d9f(0x41b)]();},Sprite_Actor['prototype'][_0x46ffcc(0x518)]=function(){const _0x52baad=_0x46ffcc;let _0x1ee710=-0x10,_0x150fe2=this[_0x52baad(0x212)]*0.5;const _0x5102f2=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4bd489=this[_0x52baad(0x50c)][_0x52baad(0x105)]()[_0x52baad(0x6cd)](_0x56e96d=>_0x56e96d&&_0x56e96d[_0x52baad(0x8fd)]['match'](_0x5102f2)?Number(RegExp['$1']):0x0),_0x2ef7da=this[_0x52baad(0x50c)]['traitObjects']()['map'](_0x3d5689=>_0x3d5689&&_0x3d5689[_0x52baad(0x8fd)]['match'](_0x5102f2)?Number(RegExp['$2']):0x0);_0x1ee710=_0x4bd489[_0x52baad(0x790)]((_0x1db7d2,_0x5de30f)=>_0x1db7d2+_0x5de30f,_0x1ee710),_0x150fe2=_0x2ef7da[_0x52baad(0x790)]((_0x197247,_0x23705d)=>_0x197247+_0x23705d,_0x150fe2),this[_0x52baad(0x553)]['x']=_0x1ee710,this[_0x52baad(0x553)]['y']=_0x150fe2,this[_0x52baad(0x553)][_0x52baad(0x881)]();},Sprite_Weapon[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)]=function(_0x17e346){const _0x252e1b=_0x46ffcc;this['_weaponImageId']=_0x17e346,this[_0x252e1b(0x8ee)]=-0x1,this[_0x252e1b(0x359)]=0x0,this[_0x252e1b(0x57b)](),this[_0x252e1b(0x832)]();},Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x540)]=function(){},Sprite_Actor[_0x46ffcc(0x9c1)]['stepForward']=function(){const _0x10c741=_0x46ffcc,_0x53d645=VisuMZ[_0x10c741(0x354)]['Settings'][_0x10c741(0x721)],_0x398c62=_0x53d645['StepDistanceX'],_0x2f86b5=_0x53d645['StepDistanceY'],_0x43a09f=_0x53d645['StepDuration'];this['startMove'](-_0x398c62,-_0x2f86b5,_0x43a09f);},VisuMZ['BattleCore'][_0x46ffcc(0x3c6)]=Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x832)],Sprite_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x832)]=function(){const _0x171f80=_0x46ffcc;this[_0x171f80(0xec)]()?this[_0x171f80(0x458)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x171f80(0x354)]['Sprite_Actor_updateFrame'][_0x171f80(0x2e0)](this));},Sprite_Actor[_0x46ffcc(0x9c1)]['applyFreezeMotionFrames']=function(){const _0x6961c8=_0x46ffcc;if(this[_0x6961c8(0x50c)]&&this['_battler'][_0x6961c8(0x94a)]){const _0x13a733=this[_0x6961c8(0x50c)][_0x6961c8(0x94a)];this[_0x6961c8(0x2a0)]=Sprite_Actor[_0x6961c8(0x624)][_0x13a733[_0x6961c8(0x554)]],this['_pattern']=_0x13a733[_0x6961c8(0x383)];const _0xeb36e3=this[_0x6961c8(0x553)];_0xeb36e3['freezeFrame'](_0x13a733['weaponImageId'],_0x13a733['pattern']),this[_0x6961c8(0x518)]();}},Sprite_Weapon[_0x46ffcc(0x9c1)][_0x46ffcc(0xaae)]=function(_0x16439e,_0x19aa20){const _0x464531=_0x46ffcc;this[_0x464531(0xfc)]=_0x16439e,this['_animationCount']=-Infinity,this[_0x464531(0x359)]=_0x19aa20,this[_0x464531(0x57b)](),this[_0x464531(0x832)]();},Sprite_Enemy['prototype'][_0x46ffcc(0x1d8)]=function(){const _0x41aebf=_0x46ffcc;Sprite_Battler[_0x41aebf(0x9c1)]['initMembers'][_0x41aebf(0x2e0)](this),this[_0x41aebf(0xb18)]=null,this[_0x41aebf(0x670)]=![],this[_0x41aebf(0xb3c)]='',this['_battlerHue']=0x0,this[_0x41aebf(0x5db)]=null,this[_0x41aebf(0x372)]=0x0,this['_shake']=0x0,this[_0x41aebf(0x21e)](),this['createStateIconSprite']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x5d8)]=Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Sprite_Enemy[_0x46ffcc(0x9c1)]['update']=function(){const _0x985908=_0x46ffcc;VisuMZ[_0x985908(0x354)][_0x985908(0x5d8)]['call'](this),this[_0x985908(0x87d)](),this[_0x985908(0x817)]();},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x21e)]=function(){const _0x584c8f=_0x46ffcc;this[_0x584c8f(0x41c)]=new Sprite(),this[_0x584c8f(0x41c)][_0x584c8f(0x404)]['x']=0.5,this['_mainSprite'][_0x584c8f(0x404)]['y']=0x1,this[_0x584c8f(0xb15)](this[_0x584c8f(0x41c)]),this[_0x584c8f(0xa16)]();},Sprite_Enemy[_0x46ffcc(0x9c1)]['mainSprite']=function(){const _0x18c259=_0x46ffcc;return this[_0x18c259(0x643)]||this[_0x18c259(0x41c)]||this;},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x57b)]=function(_0x58f26f){const _0x1b69ee=_0x46ffcc;this[_0x1b69ee(0x267)]=new Bitmap(0x1,0x1);if(this[_0x1b69ee(0x978)]()){const _0x8437e2=this[_0x1b69ee(0xb18)][_0x1b69ee(0x915)]();this['bitmap']=new Bitmap(_0x8437e2[_0x1b69ee(0x448)],_0x8437e2[_0x1b69ee(0x212)]),this['_mainSprite'][_0x1b69ee(0x267)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x1b69ee(0x5c0)]()){const _0x4550dc=ImageManager['loadSvEnemy'](_0x58f26f);_0x4550dc[_0x1b69ee(0xbf3)](this[_0x1b69ee(0x4bd)]['bind'](this,_0x4550dc));}else{const _0x3ef2bb=ImageManager[_0x1b69ee(0xb97)](_0x58f26f);_0x3ef2bb['addLoadListener'](this[_0x1b69ee(0x4bd)][_0x1b69ee(0x479)](this,_0x3ef2bb));}}},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x4bd)]=function(_0x5c8502){const _0x24abc2=_0x46ffcc;this['_mainSprite'][_0x24abc2(0x267)]=_0x5c8502,this[_0x24abc2(0x267)]=new Bitmap(_0x5c8502[_0x24abc2(0x448)],_0x5c8502['height']);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb43)]=Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x576)],Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x576)]=function(_0x48d908){const _0x13b2ab=_0x46ffcc;this[_0x13b2ab(0x41c)]&&this['_mainSprite']['setHue'](_0x48d908);},VisuMZ['BattleCore']['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x46ffcc(0x9c1)]['initVisibility'],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x27f07f=_0x46ffcc;this['allowCollapse']()?VisuMZ[_0x27f07f(0x354)][_0x27f07f(0x5a6)][_0x27f07f(0x2e0)](this):(this['_appeared']=!this['_enemy'][_0x27f07f(0x283)](),!this['_appeared']&&(this['opacity']=0x0));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x8a4)]=Sprite_Enemy['prototype'][_0x46ffcc(0x5ae)],Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x5ae)]=function(){const _0x5b9fce=_0x46ffcc;if(this[_0x5b9fce(0x2d6)]())VisuMZ[_0x5b9fce(0x354)][_0x5b9fce(0x8a4)][_0x5b9fce(0x2e0)](this);},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x832)]=function(){const _0x4ae75f=_0x46ffcc;Sprite_Battler[_0x4ae75f(0x9c1)][_0x4ae75f(0x832)][_0x4ae75f(0x2e0)](this);const _0x21a5a8=this[_0x4ae75f(0x3d0)]()||this;if(!_0x21a5a8)return;!_0x21a5a8[_0x4ae75f(0x267)]&&(_0x21a5a8[_0x4ae75f(0x267)]=new Bitmap(this[_0x4ae75f(0x448)]||0x1,this['height']||0x1));if(this[_0x4ae75f(0x5db)]===_0x4ae75f(0x18b))this['_mainSprite']['setFrame'](0x0,0x0,this['_mainSprite'][_0x4ae75f(0x448)]||0x1,this[_0x4ae75f(0x372)]);else{let _0x2d3d75=0x1;if(_0x21a5a8&&_0x21a5a8[_0x4ae75f(0x267)])_0x2d3d75=_0x21a5a8[_0x4ae75f(0x267)][_0x4ae75f(0x448)];let _0x146f70=0x1;if(this[_0x4ae75f(0x267)])_0x146f70=this['bitmap'][_0x4ae75f(0x212)];_0x21a5a8[_0x4ae75f(0x13f)](0x0,0x0,_0x2d3d75,_0x146f70);}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x3a8)]=Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x5b5)],Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x5b5)]=function(){const _0x326007=_0x46ffcc;if(this['allowCollapse']())VisuMZ[_0x326007(0x354)][_0x326007(0x3a8)]['call'](this);},Sprite_Enemy[_0x46ffcc(0x9c1)]['isMoving']=function(){const _0x3debc7=_0x46ffcc;return Sprite_Battler[_0x3debc7(0x9c1)][_0x3debc7(0x285)][_0x3debc7(0x2e0)](this);},VisuMZ['BattleCore'][_0x46ffcc(0x761)]=Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0a)],Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0a)]=function(){const _0x21729f=_0x46ffcc;VisuMZ['BattleCore'][_0x21729f(0x761)]['call'](this),this[_0x21729f(0x11c)]();},Sprite_Enemy[_0x46ffcc(0x9c1)]['updateStateSpriteBattleCore']=function(){const _0x3ccda1=_0x46ffcc,_0x1415a0=VisuMZ['BattleCore'][_0x3ccda1(0x59e)]['Enemy'];if(_0x1415a0[_0x3ccda1(0xa60)]&&!_0x1415a0[_0x3ccda1(0x30b)]){this[_0x3ccda1(0x946)][_0x3ccda1(0x2a4)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x3ccda1(0x946)]['x']+=this[_0x3ccda1(0x50c)][_0x3ccda1(0x472)]();let _0x5bfb04=0x1;if(this['bitmap'])_0x5bfb04=this['bitmap']['height'];this[_0x3ccda1(0x946)]['y']=-_0x5bfb04-this[_0x3ccda1(0x946)][_0x3ccda1(0x212)]-0x4,this[_0x3ccda1(0x946)]['y']+=this['_battler'][_0x3ccda1(0x5f4)](),this['_stateIconSprite'][_0x3ccda1(0x3be)]['x']=0x1/(this['scale']['x']||0.001),this[_0x3ccda1(0x946)][_0x3ccda1(0x3be)]['y']=0x1/(this[_0x3ccda1(0x3be)]['y']||0.001),this[_0x3ccda1(0x978)]()&&(this[_0x3ccda1(0xa47)][_0x3ccda1(0x7e8)]['scale']['x']=-0x1/(this[_0x3ccda1(0x3be)]['x']||0.001),this[_0x3ccda1(0xa47)][_0x3ccda1(0x7e8)][_0x3ccda1(0x3be)]['y']=0x1/(this[_0x3ccda1(0x3be)]['y']||0.001));},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x817)]=function(){const _0x4a3649=_0x46ffcc;this[_0x4a3649(0x50c)]&&this[_0x4a3649(0x50c)]['updateNameTempVisibility']();},VisuMZ['BattleCore'][_0x46ffcc(0x64b)]=Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d1)],Sprite_Enemy['prototype']['setBattler']=function(_0x309214){const _0x55bd6e=_0x46ffcc;VisuMZ[_0x55bd6e(0x354)][_0x55bd6e(0x64b)]['call'](this,_0x309214),this[_0x55bd6e(0x96a)](_0x309214);},Sprite_Enemy[_0x46ffcc(0x9c1)]['setSvBattlerSprite']=function(_0x32caa6){const _0x251e3a=_0x46ffcc;!this['_svBattlerSprite']&&(this[_0x251e3a(0xa47)]=new Sprite_SvEnemy(_0x32caa6),this[_0x251e3a(0xa16)]()),this['_svBattlerSprite'][_0x251e3a(0x1d1)](_0x32caa6);},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x978)]=function(){const _0x4bb524=_0x46ffcc;return this[_0x4bb524(0xb18)]&&this[_0x4bb524(0xb18)][_0x4bb524(0x978)]();},Sprite_Enemy[_0x46ffcc(0x9c1)]['allowCollapse']=function(){const _0x42fcc2=_0x46ffcc;return this['hasSvBattler']()?this[_0x42fcc2(0xb18)]['allowCollapse']():!![];},Sprite_Enemy[_0x46ffcc(0x9c1)]['refreshMotion']=function(){const _0xaa13bf=_0x46ffcc;this[_0xaa13bf(0x978)]()&&this[_0xaa13bf(0xa47)]['refreshMotion']();},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xbe6)]=function(_0x11cf8d){const _0xd2e632=_0x46ffcc;if(this['hasSvBattler']())this[_0xd2e632(0xa47)][_0xd2e632(0xbe6)](_0x11cf8d);},Sprite_Enemy['prototype'][_0x46ffcc(0x158)]=function(_0x44dd8f){const _0x311835=_0x46ffcc;if(this[_0x311835(0x978)]())this['_svBattlerSprite'][_0x311835(0x158)](_0x44dd8f);},Sprite_Enemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x573)]=function(){const _0x559df7=_0x46ffcc,_0x24b004=VisuMZ[_0x559df7(0x354)][_0x559df7(0x59e)]['ActionSequence'],_0x425fb2=_0x24b004[_0x559df7(0x6b5)],_0x3f52a7=_0x24b004[_0x559df7(0x991)],_0xac1164=_0x24b004[_0x559df7(0x26e)];this[_0x559df7(0x966)](_0x425fb2,_0x3f52a7,_0xac1164);};function _0xfd00(_0x43b65a,_0x106a29){const _0x20d120=_0x20d1();return _0xfd00=function(_0xfd0094,_0x3251ce){_0xfd0094=_0xfd0094-0xc3;let _0x299512=_0x20d120[_0xfd0094];return _0x299512;},_0xfd00(_0x43b65a,_0x106a29);}function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor[_0x46ffcc(0x9c1)]),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x526b1f){const _0xe6fef1=_0x46ffcc;Sprite_Actor[_0xe6fef1(0x9c1)][_0xe6fef1(0x3e3)]['call'](this,_0x526b1f),this['scale']['x']=-0x1,this[_0xe6fef1(0x7e8)]['scale']['x']=-0x1;},Sprite_SvEnemy['prototype']['createShadowSprite']=function(){},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x21f)]=function(){},Sprite_SvEnemy[_0x46ffcc(0x9c1)]['setActorHome']=function(_0x3ccd1c){},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x84d)]=function(){},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x126)]=function(){},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0a)]=function(){const _0xf226da=_0x46ffcc;this['_stateSprite'][_0xf226da(0xa23)]=![];},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x461)]=function(){const _0x1ae5e2=_0x46ffcc;Sprite_Battler[_0x1ae5e2(0x9c1)][_0x1ae5e2(0x461)][_0x1ae5e2(0x2e0)](this);const _0x17f965=this[_0x1ae5e2(0x449)][_0x1ae5e2(0x396)]();this[_0x1ae5e2(0xb3c)]!==_0x17f965&&(this[_0x1ae5e2(0xb3c)]=_0x17f965,this['_mainSprite'][_0x1ae5e2(0x267)]=ImageManager['loadSvActor'](_0x17f965)),this[_0x1ae5e2(0x41c)]&&this['_mainSprite'][_0x1ae5e2(0x267)]&&this[_0x1ae5e2(0x50c)]&&(this['_mainSprite'][_0x1ae5e2(0x267)][_0x1ae5e2(0xbc3)]!==this['_battler'][_0x1ae5e2(0x633)]()&&(this[_0x1ae5e2(0x41c)]['bitmap']['smooth']=this[_0x1ae5e2(0x50c)][_0x1ae5e2(0x633)]()));},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x602)]=function(){},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x966)]=function(_0x5c0698,_0xbf1939,_0x98b7b9){const _0x5c04b9=_0x46ffcc;if(this[_0x5c04b9(0x7b6)])this['parent'][_0x5c04b9(0x966)](_0x5c0698,_0xbf1939,_0x98b7b9);},Sprite_SvEnemy['prototype'][_0x46ffcc(0x358)]=function(){const _0x401c02=_0x46ffcc,_0x396d24=this['_actor'];if(_0x396d24){const _0x2a0378=_0x396d24['stateMotionIndex']();if(_0x396d24[_0x401c02(0x5c6)]()||_0x396d24[_0x401c02(0xaa7)]())this[_0x401c02(0x45e)](_0x401c02(0x5c4));else{if(_0x2a0378===0x3)this['startMotion'](_0x401c02(0x2be));else{if(_0x2a0378===0x2)this[_0x401c02(0x45e)]('sleep');else{if(_0x396d24['isChanting']())this[_0x401c02(0x45e)]('chant');else{if(_0x396d24['isGuard']()||_0x396d24[_0x401c02(0x4d6)]())this[_0x401c02(0x45e)](_0x401c02(0x644));else{if(_0x2a0378===0x1)this[_0x401c02(0x45e)](_0x401c02(0x1f5));else{if(_0x396d24[_0x401c02(0xafb)]())this[_0x401c02(0x45e)](_0x401c02(0x44b));else _0x396d24[_0x401c02(0x7fa)]()?this[_0x401c02(0x45e)](_0x396d24[_0x401c02(0x915)]()['motionIdle']||_0x401c02(0x5c4)):this[_0x401c02(0x45e)](_0x396d24[_0x401c02(0x915)]()[_0x401c02(0xbc2)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x8e0)]=function(){const _0x1a43dc=_0x46ffcc;return this['parent']?this[_0x1a43dc(0x7b6)]['_offsetX']===0x0&&this[_0x1a43dc(0x7b6)][_0x1a43dc(0x1e2)]===0x0:!![];},Sprite_SvEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x1e8)]=function(){},VisuMZ[_0x46ffcc(0x354)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation['prototype']['targetSpritePosition'],Sprite_Animation[_0x46ffcc(0x9c1)]['targetSpritePosition']=function(_0x5925c2){const _0x13fd43=_0x46ffcc;return _0x5925c2[_0x13fd43(0x643)]?this[_0x13fd43(0x4cd)](_0x5925c2):VisuMZ[_0x13fd43(0x354)][_0x13fd43(0x8fa)][_0x13fd43(0x2e0)](this,_0x5925c2);},Sprite_Animation['prototype'][_0x46ffcc(0x4cd)]=function(_0x1f68f8){const _0xf683f7=_0x46ffcc;let _0x4a6b9d=_0x1f68f8['x'],_0x229d61=_0x1f68f8['y'],_0x13653a=_0x1f68f8[_0xf683f7(0x212)],_0xd8d4c0=_0x1f68f8[_0xf683f7(0x643)][_0xf683f7(0x3be)]['y'];_0x1f68f8['x']=_0x1f68f8[_0xf683f7(0x72f)]+_0x1f68f8[_0xf683f7(0x4ef)](),_0x1f68f8['y']=_0x1f68f8[_0xf683f7(0x97f)]+_0x1f68f8['extraPositionY'](),_0x1f68f8[_0xf683f7(0x212)]*=_0xd8d4c0;let _0x1588c2=VisuMZ[_0xf683f7(0x354)]['Sprite_Animation_targetSpritePosition'][_0xf683f7(0x2e0)](this,_0x1f68f8);return _0x1f68f8['x']=_0x4a6b9d,_0x1f68f8['y']=_0x229d61,_0x1f68f8['height']=_0x13653a,_0x1588c2;},Sprite_Animation[_0x46ffcc(0x9c1)][_0x46ffcc(0xa2f)]=function(){const _0x62c76=_0x46ffcc;if(this[_0x62c76(0x1ec)])return![];return this[_0x62c76(0xa75)]&&this[_0x62c76(0xa75)][_0x62c76(0x1a8)]&&this[_0x62c76(0xa75)][_0x62c76(0x1a8)][_0x62c76(0xe0)](/<UNDER>/gi);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x967)]=Sprite_AnimationMV[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a3)],Sprite_AnimationMV[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a3)]=function(){const _0x4631de=_0x46ffcc;VisuMZ['BattleCore'][_0x4631de(0x967)][_0x4631de(0x2e0)](this);if(!SceneManager[_0x4631de(0xaf2)]())return;if(this[_0x4631de(0xa75)][_0x4631de(0x324)]===0x3)this['x']=Math[_0x4631de(0x6da)](Graphics['boxWidth']/0x2),this['y']=Math[_0x4631de(0x6da)](Graphics[_0x4631de(0x78c)]/0x2);else{if(this[_0x4631de(0x149)])return;}},Sprite_AnimationMV[_0x46ffcc(0x9c1)][_0x46ffcc(0xa2f)]=function(){const _0x43773c=_0x46ffcc;if(this[_0x43773c(0x1ec)])return![];return this[_0x43773c(0xa75)]&&this['_animation'][_0x43773c(0x1a8)]&&this[_0x43773c(0xa75)][_0x43773c(0x1a8)]['match'](/<UNDER>/gi);},Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x2d5)]=function(_0x458cea){const _0x51b123=_0x46ffcc,_0x5ec355=_0x458cea[_0x51b123(0x5e8)]()||_0x458cea['result']();if(_0x5ec355[_0x51b123(0x850)]||_0x5ec355[_0x51b123(0x7eb)])this[_0x51b123(0x717)]=0x0,this['createMiss']();else{if(_0x5ec355[_0x51b123(0x2bc)])this['_colorType']=_0x5ec355[_0x51b123(0x77c)]>=0x0?0x0:0x1,this[_0x51b123(0x145)](_0x5ec355['hpDamage']);else _0x458cea[_0x51b123(0x615)]()&&_0x5ec355['mpDamage']!==0x0&&(this['_colorType']=_0x5ec355['mpDamage']>=0x0?0x2:0x3,this[_0x51b123(0x145)](_0x5ec355[_0x51b123(0x27e)]));}_0x5ec355[_0x51b123(0x3c7)]&&this[_0x51b123(0x510)]();},Sprite_Damage['prototype'][_0x46ffcc(0xb64)]=function(_0x1ccf14){},Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x145)]=function(_0x736ae2){const _0x43c416=_0x46ffcc;let _0x4d6c95=this[_0x43c416(0x5b0)](_0x736ae2);const _0x3cc873=this[_0x43c416(0x2ec)](),_0x2cc329=Math[_0x43c416(0x27a)](_0x3cc873*0.75);for(let _0x2d2b7a=0x0;_0x2d2b7a<_0x4d6c95[_0x43c416(0x9bf)];_0x2d2b7a++){const _0x5a0378=this['createChildSprite'](_0x2cc329,_0x3cc873);_0x5a0378[_0x43c416(0x267)]['drawText'](_0x4d6c95[_0x2d2b7a],0x0,0x0,_0x2cc329,_0x3cc873,_0x43c416(0x7bf)),_0x5a0378['x']=(_0x2d2b7a-(_0x4d6c95[_0x43c416(0x9bf)]-0x1)/0x2)*_0x2cc329,_0x5a0378['dy']=-_0x2d2b7a;}},Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x5b0)]=function(_0x3811c4){const _0x5d3092=_0x46ffcc;let _0x47798e=Math[_0x5d3092(0x4d3)](_0x3811c4)[_0x5d3092(0x789)]();this['useDigitGrouping']()&&(_0x47798e=VisuMZ[_0x5d3092(0x486)](_0x47798e));const _0x374d56=VisuMZ[_0x5d3092(0x354)]['Settings'][_0x5d3092(0x896)];let _0x4c15f3='',_0x160732='';switch(this[_0x5d3092(0x717)]){case 0x0:_0x4c15f3=_0x374d56[_0x5d3092(0x844)]||_0x5d3092(0x5d7),_0x160732=TextManager['hp'];if(_0x3811c4===0x0)_0x4c15f3='%1';break;case 0x1:_0x4c15f3=_0x374d56[_0x5d3092(0x4e9)]||_0x5d3092(0xf6),_0x160732=TextManager['hp'];break;case 0x2:_0x4c15f3=_0x374d56['mpDamageFmt']||_0x5d3092(0x464),_0x160732=TextManager['mp'];break;case 0x3:_0x4c15f3=_0x374d56[_0x5d3092(0xa31)]||'+%1\x20MP',_0x160732=TextManager['mp'];break;}return _0x4c15f3['format'](_0x47798e,_0x160732)[_0x5d3092(0xafd)]();},Sprite_Damage['prototype'][_0x46ffcc(0x61a)]=function(){const _0x1604fb=_0x46ffcc;return Imported[_0x1604fb(0xbaf)]?VisuMZ[_0x1604fb(0x574)][_0x1604fb(0x59e)][_0x1604fb(0x9ac)][_0x1604fb(0x181)]:![];},Sprite_Damage[_0x46ffcc(0x9c1)]['setupCriticalEffect']=function(){const _0x186ed2=_0x46ffcc,_0x90f882=VisuMZ[_0x186ed2(0x354)][_0x186ed2(0x59e)][_0x186ed2(0x896)];_0x90f882[_0x186ed2(0x397)]=_0x90f882[_0x186ed2(0x397)]||[0x0,0x0,0x0,0x0],this[_0x186ed2(0x732)]=_0x90f882[_0x186ed2(0x397)][_0x186ed2(0x62f)](0x0),this[_0x186ed2(0x3a5)]=_0x90f882[_0x186ed2(0xb87)]||0x1;},Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x61d)]=function(_0x3e8877,_0x25a95d){const _0x31ea39=_0x46ffcc;this[_0x31ea39(0x732)]=_0x25a95d['flashColor']||[0x0,0x0,0x0,0x0],this[_0x31ea39(0x732)]=JsonEx[_0x31ea39(0x494)](this['_flashColor']),this[_0x31ea39(0x3a5)]=_0x25a95d[_0x31ea39(0x897)]||0x0;const _0x42b2bf=this[_0x31ea39(0x2ec)](),_0xbc8535=Math['floor'](_0x42b2bf*0x1e),_0x451e6e=this[_0x31ea39(0x55b)](_0xbc8535,_0x42b2bf);_0x451e6e[_0x31ea39(0x267)][_0x31ea39(0x156)]=ColorManager['getColor'](_0x25a95d[_0x31ea39(0x156)]),_0x451e6e['bitmap'][_0x31ea39(0x8fc)](_0x3e8877,0x0,0x0,_0xbc8535,_0x42b2bf,'center'),_0x451e6e['dy']=0x0;},Sprite_Damage['prototype']['setupIconTextPopup']=function(_0x1f19d8,_0x11c37e,_0xb1e917){const _0x2caf00=_0x46ffcc,_0x5c1de1=Math[_0x2caf00(0x148)](this[_0x2caf00(0x2ec)](),ImageManager['iconHeight']),_0x1a38e3=Math[_0x2caf00(0x27a)](_0x5c1de1*0x1e),_0x4e0269=this['createChildSprite'](_0x1a38e3,_0x5c1de1),_0x48c18f=ImageManager[_0x2caf00(0x911)]/0x2,_0x3c796d=_0x4e0269[_0x2caf00(0x267)][_0x2caf00(0xb49)](_0x11c37e+'\x20');_0x4e0269[_0x2caf00(0x267)][_0x2caf00(0x156)]=ColorManager[_0x2caf00(0x11e)](_0xb1e917[_0x2caf00(0x156)]),_0x4e0269[_0x2caf00(0x267)][_0x2caf00(0x8fc)](_0x11c37e,_0x48c18f,0x0,_0x1a38e3-_0x48c18f,_0x5c1de1,_0x2caf00(0x7bf));const _0xa71ea5=Math['round']((_0x5c1de1-ImageManager['iconHeight'])/0x2),_0x3ef9f2=_0x1a38e3/0x2-ImageManager[_0x2caf00(0x911)]-_0x3c796d/0x2+_0x48c18f/0x2,_0x349716=ImageManager[_0x2caf00(0x8c4)](_0x2caf00(0x522)),_0x462c52=ImageManager['iconWidth'],_0xc6bb08=ImageManager[_0x2caf00(0x96b)],_0x1e043f=_0x1f19d8%0x10*_0x462c52,_0x52a7ce=Math['floor'](_0x1f19d8/0x10)*_0xc6bb08;_0x4e0269['bitmap'][_0x2caf00(0x1e5)](_0x349716,_0x1e043f,_0x52a7ce,_0x462c52,_0xc6bb08,_0x3ef9f2,_0xa71ea5),this[_0x2caf00(0x732)]=_0xb1e917[_0x2caf00(0x515)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x2caf00(0x494)](this[_0x2caf00(0x732)]),this[_0x2caf00(0x3a5)]=_0xb1e917[_0x2caf00(0x897)]||0x0,_0x4e0269['dy']=0x0,_0xb1e917[_0x2caf00(0x880)]&&(_0x4e0269['x']+=_0xb1e917['offsetX']),_0xb1e917['offsetY']&&(_0x4e0269['dy']+=_0xb1e917['offsetY']);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x1e1)]=Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x55b)],Sprite_Damage[_0x46ffcc(0x9c1)][_0x46ffcc(0x55b)]=function(_0x50ff39,_0x51b749){const _0x394028=_0x46ffcc;return _0x51b749=Math[_0x394028(0x6da)](_0x51b749*1.2),VisuMZ[_0x394028(0x354)][_0x394028(0x1e1)][_0x394028(0x2e0)](this,_0x50ff39,_0x51b749);},VisuMZ[_0x46ffcc(0x354)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x46ffcc(0x9c1)][_0x46ffcc(0x832)],Sprite_StateIcon['prototype'][_0x46ffcc(0x832)]=function(){const _0x42b641=_0x46ffcc;VisuMZ[_0x42b641(0x354)][_0x42b641(0x4fe)][_0x42b641(0x2e0)](this),this[_0x42b641(0x2a4)]=this[_0x42b641(0x5d5)]>0x0?0xff:0x0;},VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x46ffcc(0x9c1)][_0x46ffcc(0x57b)],Sprite_Weapon[_0x46ffcc(0x9c1)]['loadBitmap']=function(){const _0xb53dd2=_0x46ffcc;VisuMZ['BattleCore'][_0xb53dd2(0x336)][_0xb53dd2(0x2e0)](this),this['bitmap']&&(this[_0xb53dd2(0x267)][_0xb53dd2(0xbc3)]=VisuMZ[_0xb53dd2(0x354)][_0xb53dd2(0x59e)][_0xb53dd2(0x64a)]['SmoothImage']);},VisuMZ[_0x46ffcc(0x354)]['Sprite_Gauge_smoothness']=Sprite_Gauge['prototype'][_0x46ffcc(0x876)],Sprite_Gauge[_0x46ffcc(0x9c1)][_0x46ffcc(0x876)]=function(){const _0x657be0=_0x46ffcc;return this[_0x657be0(0xab0)]!==_0x657be0(0x6b3)?VisuMZ[_0x657be0(0x354)][_0x657be0(0x59e)][_0x657be0(0xa97)]['AniDuration']??0x14:VisuMZ[_0x657be0(0x354)][_0x657be0(0xb54)][_0x657be0(0x2e0)](this);};function Sprite_GaugeRate(){const _0x217921=_0x46ffcc;this[_0x217921(0x3e3)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x46ffcc(0x411)](Sprite_Gauge[_0x46ffcc(0x9c1)]),Sprite_GaugeRate['prototype'][_0x46ffcc(0x42f)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x4cec4a=_0x46ffcc;Sprite_Gauge[_0x4cec4a(0x9c1)]['initialize']['call'](this),this[_0x4cec4a(0x2c9)]=![];},Sprite_GaugeRate[_0x46ffcc(0x9c1)][_0x46ffcc(0x215)]=function(_0x388c89,_0x1ab004){const _0x584a13=_0x46ffcc;this[_0x584a13(0x2c9)]=!![],Sprite_Gauge[_0x584a13(0x9c1)][_0x584a13(0x215)][_0x584a13(0x2e0)](this,_0x388c89,_0x1ab004),this[_0x584a13(0x2c9)]=![];},Sprite_GaugeRate[_0x46ffcc(0x9c1)][_0x46ffcc(0x7f4)]=function(){const _0xa86110=_0x46ffcc;if(this[_0xa86110(0x2c9)]){const _0x377d97=Sprite_Gauge[_0xa86110(0x9c1)]['currentValue']['call'](this),_0x1b7145=this[_0xa86110(0x7ed)]();if(_0x1b7145<=0x0)return _0xa86110(0x9ba);return Math[_0xa86110(0x27a)](_0x377d97/_0x1b7145*0x64)+'%';}else return Sprite_Gauge[_0xa86110(0x9c1)][_0xa86110(0x7f4)]['call'](this);},Sprite_GaugeRate[_0x46ffcc(0x9c1)][_0x46ffcc(0xf0)]=function(){const _0x1d47c0=_0x46ffcc,_0x4c2272=Sprite_Gauge[_0x1d47c0(0x9c1)][_0x1d47c0(0x7f4)][_0x1d47c0(0x2e0)](this),_0x439e04=this[_0x1d47c0(0x7ed)]();if(_0x439e04<=0x0)return _0x1d47c0(0x9ba);return Math['floor'](_0x4c2272/_0x439e04*0x64)+'%';},Sprite_GaugeRate['prototype'][_0x46ffcc(0x343)]=function(){const _0x2066fc=_0x46ffcc;if(this[_0x2066fc(0x7ed)]()<=0x0)return 0x1;return Sprite_Gauge[_0x2066fc(0x9c1)][_0x2066fc(0x343)]['call'](this);},Sprite_GaugeRate[_0x46ffcc(0x9c1)][_0x46ffcc(0x71d)]=function(){const _0x792366=_0x46ffcc;if(this['currentMaxValue']()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge[_0x792366(0x9c1)][_0x792366(0x71d)][_0x792366(0x2e0)](this);},Sprite_GaugeRate[_0x46ffcc(0x9c1)]['redraw']=function(){const _0xeaa32=_0x46ffcc;this['_statusType']==='mp'&&this['currentMaxValue']()<=0x0&&($gameTemp[_0xeaa32(0x1fa)]=!![]),Sprite_Gauge[_0xeaa32(0x9c1)]['redraw'][_0xeaa32(0x2e0)](this),$gameTemp[_0xeaa32(0x1fa)]=undefined;},VisuMZ['BattleCore']['ColorManager_mpColor']=ColorManager[_0x46ffcc(0x475)],ColorManager['mpColor']=function(_0x4812d4){const _0x5b7f19=_0x46ffcc;if($gameTemp['redrawForGaugeRate'])return ColorManager[_0x5b7f19(0xa6e)]();return VisuMZ['BattleCore']['ColorManager_mpColor'][_0x5b7f19(0x2e0)](this,_0x4812d4);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x46ffcc(0x9c1)]=Object['create'](Sprite_Gauge[_0x46ffcc(0x9c1)]),Sprite_HpGauge[_0x46ffcc(0x9c1)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x46ffcc(0x3e3)]=function(){const _0x145fd8=_0x46ffcc;Sprite_Gauge[_0x145fd8(0x9c1)][_0x145fd8(0x3e3)][_0x145fd8(0x2e0)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x46ffcc(0x9c1)]['redraw']=function(){const _0x1bbcec=_0x46ffcc;this[_0x1bbcec(0x267)][_0x1bbcec(0x91f)]();const _0x5fe03d=this[_0x1bbcec(0x7f4)]();!isNaN(_0x5fe03d)&&this[_0x1bbcec(0x848)]();};function Sprite_EnemyName(){const _0x598bf8=_0x46ffcc;this[_0x598bf8(0x3e3)](...arguments);}Sprite_EnemyName[_0x46ffcc(0x9c1)]=Object[_0x46ffcc(0x411)](Sprite_Name[_0x46ffcc(0x9c1)]),Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x42f)]=Sprite_EnemyName,Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(){const _0x4fc6f5=_0x46ffcc;Sprite_Name[_0x4fc6f5(0x9c1)][_0x4fc6f5(0x3e3)][_0x4fc6f5(0x2e0)](this),this[_0x4fc6f5(0x340)]();},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d8)]=function(){const _0x3a253f=_0x46ffcc;Sprite_Name[_0x3a253f(0x9c1)][_0x3a253f(0x1d8)][_0x3a253f(0x2e0)](this),this['opacity']=0x0,this[_0x3a253f(0x709)]=null,this[_0x3a253f(0x404)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x46ffcc(0x9c1)]['createAttachedSprites']=function(){const _0x2218ab=_0x46ffcc;VisuMZ[_0x2218ab(0x354)]['Settings'][_0x2218ab(0xb8b)]['NameAttachStateIcon']&&(this[_0x2218ab(0x946)]=new Sprite_StateIcon(),this[_0x2218ab(0xb15)](this['_stateIconSprite']));},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x5e0)]=function(){const _0x3f09e5=_0x46ffcc;return Graphics[_0x3f09e5(0xab3)];},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0xb0f)]=function(){const _0x2dcd30=_0x46ffcc;return this[_0x2dcd30(0xaee)]=this[_0x2dcd30(0xaee)]||Window_Base['prototype'][_0x2dcd30(0x3eb)]()||0x24,this[_0x2dcd30(0xaee)]*0x4;},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x2ec)]=function(){const _0x4ee862=_0x46ffcc;return VisuMZ['BattleCore'][_0x4ee862(0x59e)]['Enemy'][_0x4ee862(0x2e3)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0xcc)]=function(_0x3e0a90){const _0x3116e5=_0x46ffcc;this[_0x3116e5(0x709)]=_0x3e0a90;},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0xa4dd0b=_0x46ffcc;Sprite_Name[_0xa4dd0b(0x9c1)]['update']['call'](this),this['updateLink'](),this['updatePosition'](),this[_0xa4dd0b(0x22f)](),this['updateOpacity']();},Sprite_EnemyName['prototype']['redraw']=function(){const _0xc5a72d=_0x46ffcc;this[_0xc5a72d(0xeb)]=undefined;const _0x509008=this[_0xc5a72d(0x1a8)](),_0x1cef3d=this[_0xc5a72d(0x5e0)](),_0x234f33=Window_Base['prototype']['lineHeight']();this['setupFont'](),this[_0xc5a72d(0x267)][_0xc5a72d(0x91f)](),this[_0xc5a72d(0x267)][_0xc5a72d(0x8fc)](_0x509008,0x0,0x0,_0x1cef3d,_0x234f33,_0xc5a72d(0x7bf));},Sprite_EnemyName['prototype'][_0x46ffcc(0x114)]=function(){const _0x2177eb=_0x46ffcc;if(!this['_linkedSprite'])return;this[_0x2177eb(0x50c)]!==this[_0x2177eb(0x709)]['_battler']&&this['setup'](this[_0x2177eb(0x709)]['_battler']);},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a3)]=function(){const _0x41da73=_0x46ffcc;if(!this[_0x41da73(0x709)])return;this[_0x41da73(0xaee)]=this[_0x41da73(0xaee)]||Window_Base['prototype'][_0x41da73(0x3eb)](),this['x']=Math[_0x41da73(0x6da)](this[_0x41da73(0x709)]['_baseX']),this['y']=Math['round'](this[_0x41da73(0x709)][_0x41da73(0x97f)]-this[_0x41da73(0xaee)]*0.5);const _0x2be463=VisuMZ[_0x41da73(0x354)][_0x41da73(0x59e)][_0x41da73(0xb8b)];this['x']+=Math[_0x41da73(0x6da)](_0x2be463[_0x41da73(0x38c)]||0x0),this['y']+=Math[_0x41da73(0x6da)](_0x2be463[_0x41da73(0x400)]||0x0);},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x22f)]=function(){const _0x5a4056=_0x46ffcc;this[_0x5a4056(0x258)]();},Sprite_EnemyName['prototype']['updateStateIconSprite']=function(){const _0x4b4fd4=_0x46ffcc;if(!this[_0x4b4fd4(0x946)])return;this['_battler']!==this[_0x4b4fd4(0x946)][_0x4b4fd4(0x50c)]&&this['_stateIconSprite'][_0x4b4fd4(0xb64)](this[_0x4b4fd4(0x50c)]);const _0x1317c5=this[_0x4b4fd4(0x4d5)]();this['_lineHeight']=this[_0x4b4fd4(0xaee)]||Window_Base[_0x4b4fd4(0x9c1)][_0x4b4fd4(0x3eb)](),this[_0x4b4fd4(0x946)]['x']=Math[_0x4b4fd4(0x6da)]((_0x1317c5+ImageManager[_0x4b4fd4(0x911)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x4b4fd4(0xaee)]/0x2;const _0x405477=VisuMZ[_0x4b4fd4(0x354)]['Settings'][_0x4b4fd4(0xb8b)];this['_stateIconSprite']['x']+=_0x405477['AttachStateOffsetX']||0x0,this[_0x4b4fd4(0x946)]['y']+=_0x405477[_0x4b4fd4(0x45b)]||0x0;},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x3aa)]=function(){const _0x43727b=_0x46ffcc,_0x494a59=this[_0x43727b(0x8fe)]();if(_0x494a59&&this['opacity']<0xff)this[_0x43727b(0x2a4)]+=0x10;else!_0x494a59&&this[_0x43727b(0x2a4)]>0x0&&(this[_0x43727b(0x2a4)]-=0x10);},Sprite_EnemyName['prototype']['visibilityState']=function(){const _0x428dfe=_0x46ffcc;if(this['isAlwaysHidden']())return![];else{if(!this[_0x428dfe(0x50c)])return![];else{if(!this[_0x428dfe(0x50c)][_0x428dfe(0x241)]())return![];else{if(this[_0x428dfe(0x328)]())return!![];else{if(this[_0x428dfe(0x50c)][_0x428dfe(0xb76)]())return![];else{if(this[_0x428dfe(0xb38)]())return!![];else{if(this[_0x428dfe(0xa5e)]())return!![];else{if(this[_0x428dfe(0x415)]())return!![];else{if(this[_0x428dfe(0xd1)]())return!![];else{if(this[_0x428dfe(0x2a4)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName['prototype'][_0x46ffcc(0x328)]=function(){const _0x11c76a=_0x46ffcc;return this[_0x11c76a(0x50c)]&&this[_0x11c76a(0x50c)][_0x11c76a(0x636)]();},Sprite_EnemyName[_0x46ffcc(0x9c1)]['isAlwaysHidden']=function(){const _0x2e3250=_0x46ffcc;return VisuMZ[_0x2e3250(0x354)][_0x2e3250(0x59e)][_0x2e3250(0xb8b)][_0x2e3250(0x48d)];},Sprite_EnemyName[_0x46ffcc(0x9c1)]['isBattlerTargeted']=function(){const _0x26fdc3=_0x46ffcc;if(!VisuMZ['BattleCore'][_0x26fdc3(0x59e)][_0x26fdc3(0xb8b)]['NameAsTarget'])return![];if(BattleManager[_0x26fdc3(0x5c6)]()&&!BattleManager[_0x26fdc3(0x7c4)]())return![];return this[_0x26fdc3(0x50c)]&&BattleManager[_0x26fdc3(0x30f)]&&BattleManager[_0x26fdc3(0x2ab)][_0x26fdc3(0x6a2)](this['_battler']);},Sprite_EnemyName[_0x46ffcc(0x9c1)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x46ffcc(0x9c1)]['isAlwaysVisible']=function(){const _0x48ccd8=_0x46ffcc;return VisuMZ[_0x48ccd8(0x354)][_0x48ccd8(0x59e)]['Enemy']['NameAlwaysVisible'];},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0xd1)]=function(){const _0xd66e02=_0x46ffcc;return VisuMZ['BattleCore'][_0xd66e02(0x59e)][_0xd66e02(0xb8b)][_0xd66e02(0x985)]?this[_0xd66e02(0x50c)][_0xd66e02(0x3a6)]():SceneManager[_0xd66e02(0x5e4)][_0xd66e02(0x1eb)]&&SceneManager[_0xd66e02(0x5e4)][_0xd66e02(0x1eb)]['active']&&SceneManager[_0xd66e02(0x5e4)][_0xd66e02(0x1eb)]['_enemies'][_0xd66e02(0x6a2)](this[_0xd66e02(0x50c)]);},Sprite_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x4d5)]=function(){const _0x1f3a94=_0x46ffcc;if(!this[_0x1f3a94(0x50c)])return 0x0;if(this[_0x1f3a94(0xeb)])return this[_0x1f3a94(0xeb)];let _0x290594=this[_0x1f3a94(0x1a8)]();return this['setupFont'](),Imported['VisuMZ_1_MessageCore']&&TextManager[_0x1f3a94(0x222)]&&(_0x290594=TextManager['parseLocalizedText'](_0x290594)),this[_0x1f3a94(0xeb)]=this['bitmap']['measureTextWidth'](_0x290594)||0x1,this[_0x1f3a94(0xeb)];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x107)]=Sprite_Battleback[_0x46ffcc(0x9c1)][_0x46ffcc(0x4b3)],Sprite_Battleback['prototype'][_0x46ffcc(0x4b3)]=function(){const _0x17bfb5=_0x46ffcc,_0x32b59e=VisuMZ[_0x17bfb5(0x354)][_0x17bfb5(0x59e)]['BattlebackScale'];if(!_0x32b59e)return VisuMZ[_0x17bfb5(0x354)][_0x17bfb5(0x107)][_0x17bfb5(0x2e0)](this);const _0x26b91a=String(_0x32b59e[_0x17bfb5(0x246)])||'MZ';switch(_0x26b91a){case'MZ':VisuMZ[_0x17bfb5(0x354)][_0x17bfb5(0x107)][_0x17bfb5(0x2e0)](this);break;case _0x17bfb5(0xf3):this[_0x17bfb5(0xad6)]();break;case _0x17bfb5(0xac8):this['adjustPosition_ScaleToFit']();break;case'ScaleDown':this[_0x17bfb5(0x51d)]();break;case _0x17bfb5(0x2ea):this[_0x17bfb5(0x65a)]();break;}},Sprite_Battleback[_0x46ffcc(0x9c1)][_0x46ffcc(0xad6)]=function(){const _0x138013=_0x46ffcc,_0x1744f5=VisuMZ['BattleCore'][_0x138013(0x59e)][_0x138013(0x8d8)];if(_0x1744f5&&_0x1744f5['jsOneForOne'])return _0x1744f5['jsOneForOne'][_0x138013(0x2e0)](this);this[_0x138013(0x448)]=Graphics[_0x138013(0x448)],this[_0x138013(0x212)]=Graphics[_0x138013(0x212)];const _0x1b1a88=0x1;this[_0x138013(0x3be)]['x']=_0x1b1a88,this[_0x138013(0x3be)]['y']=_0x1b1a88,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x46ffcc(0x9c1)]['adjustPosition_ScaleToFit']=function(){const _0x23e1ee=_0x46ffcc,_0x18197a=VisuMZ[_0x23e1ee(0x354)][_0x23e1ee(0x59e)][_0x23e1ee(0x8d8)];if(_0x18197a&&_0x18197a[_0x23e1ee(0x681)])return _0x18197a[_0x23e1ee(0x681)][_0x23e1ee(0x2e0)](this);this[_0x23e1ee(0x448)]=Graphics[_0x23e1ee(0x448)],this['height']=Graphics[_0x23e1ee(0x212)];const _0x1d6d91=this[_0x23e1ee(0x448)]/this[_0x23e1ee(0x267)][_0x23e1ee(0x448)],_0x32513b=this[_0x23e1ee(0x212)]/this['bitmap'][_0x23e1ee(0x212)],_0x49e527=Math[_0x23e1ee(0x148)](_0x1d6d91,_0x32513b);this[_0x23e1ee(0x3be)]['x']=_0x49e527,this[_0x23e1ee(0x3be)]['y']=_0x49e527,this['x']=(Graphics[_0x23e1ee(0x448)]-this[_0x23e1ee(0x448)])/0x2,this['y']=Graphics[_0x23e1ee(0x212)]-this[_0x23e1ee(0x212)];},Sprite_Battleback[_0x46ffcc(0x9c1)][_0x46ffcc(0x51d)]=function(){const _0x561344=_0x46ffcc,_0x5acb62=VisuMZ[_0x561344(0x354)][_0x561344(0x59e)]['BattlebackScale'];if(_0x5acb62&&_0x5acb62[_0x561344(0x603)])return _0x5acb62[_0x561344(0x603)][_0x561344(0x2e0)](this);this['width']=Graphics[_0x561344(0x448)],this['height']=Graphics[_0x561344(0x212)];const _0x214657=Math['min'](0x1,this[_0x561344(0x448)]/this['bitmap'][_0x561344(0x448)]),_0x4c3291=Math[_0x561344(0x4d8)](0x1,this['height']/this[_0x561344(0x267)][_0x561344(0x212)]),_0x2532d2=Math[_0x561344(0x148)](_0x214657,_0x4c3291);this['scale']['x']=_0x2532d2,this['scale']['y']=_0x2532d2,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x561344(0x212)]-this['height'];},Sprite_Battleback[_0x46ffcc(0x9c1)][_0x46ffcc(0x65a)]=function(){const _0x1e6522=_0x46ffcc,_0x368c82=VisuMZ[_0x1e6522(0x354)][_0x1e6522(0x59e)][_0x1e6522(0x8d8)];if(_0x368c82&&_0x368c82[_0x1e6522(0xb20)])return _0x368c82[_0x1e6522(0xb20)][_0x1e6522(0x2e0)](this);this[_0x1e6522(0x448)]=Graphics[_0x1e6522(0x448)],this[_0x1e6522(0x212)]=Graphics['height'];const _0x2837a7=Math[_0x1e6522(0x148)](0x1,this[_0x1e6522(0x448)]/this['bitmap'][_0x1e6522(0x448)]),_0x13f076=Math[_0x1e6522(0x148)](0x1,this[_0x1e6522(0x212)]/this[_0x1e6522(0x267)][_0x1e6522(0x212)]),_0x14c83f=Math[_0x1e6522(0x148)](_0x2837a7,_0x13f076);this[_0x1e6522(0x3be)]['x']=_0x14c83f,this[_0x1e6522(0x3be)]['y']=_0x14c83f,this['x']=(Graphics['width']-this[_0x1e6522(0x448)])/0x2,this['y']=Graphics['height']-this[_0x1e6522(0x212)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ['BattleCore']['Settings'][_0x46ffcc(0x31c)][_0x46ffcc(0x7e0)]??!![],Spriteset_Battle['prototype']['isFlipped']=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2a6)]=function(){return 0x0;},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x9a2)]=function(){return 0x0;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x989)]=Spriteset_Battle[_0x46ffcc(0x9c1)]['createLowerLayer'],Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xb29)]=function(){const _0x45a20a=_0x46ffcc;VisuMZ[_0x45a20a(0x354)]['Spriteset_Battle_createLowerLayer'][_0x45a20a(0x2e0)](this),this[_0x45a20a(0x52a)](),this[_0x45a20a(0x3df)]();},VisuMZ['BattleCore'][_0x46ffcc(0x17e)]=Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x2569a6=_0x46ffcc;VisuMZ[_0x2569a6(0x354)]['Spriteset_Battle_update'][_0x2569a6(0x2e0)](this),this[_0x2569a6(0x9ee)](),this['updateUiContainerPosition'](),this[_0x2569a6(0x6cb)](),this[_0x2569a6(0x71b)]();},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x52a)]=function(){const _0xea676f=_0x46ffcc;this[_0xea676f(0x266)]=new Weather(),this[_0xea676f(0x17a)]['addChild'](this['_weather']);},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x6cb)]=function(){const _0x4380a5=_0x46ffcc;this[_0x4380a5(0x266)][_0x4380a5(0x56c)]=$gameScreen[_0x4380a5(0x956)](),this['_weather'][_0x4380a5(0x8d9)]=$gameScreen[_0x4380a5(0x7c1)]();},Game_Interpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0xb7a)]=function(_0x246a9b){const _0x480ed=_0x46ffcc;$gameScreen[_0x480ed(0x196)](_0x246a9b[0x0],_0x246a9b[0x1],_0x246a9b[0x2]);if(_0x246a9b[0x3])this['wait'](_0x246a9b[0x2]);return!![];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x751)]=Game_Interpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0xb1b)],Game_Interpreter[_0x46ffcc(0x9c1)][_0x46ffcc(0xb1b)]=function(_0x10c1b3){const _0x2756b1=_0x46ffcc;return VisuMZ[_0x2756b1(0x354)][_0x2756b1(0x751)][_0x2756b1(0x2e0)](this,_0x10c1b3),SceneManager[_0x2756b1(0xaf2)]()&&SceneManager['_scene'][_0x2756b1(0x787)][_0x2756b1(0x778)](_0x10c1b3[0x0],_0x10c1b3[0x1]),!![];},Sprite_Battleback[_0x46ffcc(0x9c1)]['battleback1Name']=function(){const _0x2152ba=_0x46ffcc;if($gameMap[_0x2152ba(0x9d4)]()!==null)return $gameMap[_0x2152ba(0x9d4)]();else{if(BattleManager[_0x2152ba(0xa6a)]())return $dataSystem[_0x2152ba(0x9d4)];else return $gameMap['isOverworld']()?this[_0x2152ba(0x7e7)]():'';}},Sprite_Battleback[_0x46ffcc(0x9c1)]['battleback2Name']=function(){const _0x309ab0=_0x46ffcc;if($gameMap[_0x309ab0(0x75d)]()!==null)return $gameMap[_0x309ab0(0x75d)]();else{if(BattleManager[_0x309ab0(0xa6a)]())return $dataSystem['battleback2Name'];else return $gameMap[_0x309ab0(0xad2)]()?this['overworldBattleback2Name']():'';}},Spriteset_Battle['prototype'][_0x46ffcc(0x9a5)]=function(_0x26ac0d,_0x480fe9){const _0x3c8f79=_0x46ffcc;_0x26ac0d[_0x3c8f79(0x267)]=_0x480fe9;},Spriteset_Battle[_0x46ffcc(0x9c1)]['changeBattlebacks']=function(_0x4a85a9,_0x20d025){const _0x188ed7=_0x46ffcc;_0x4a85a9=_0x4a85a9||'',_0x20d025=_0x20d025||'';_0x4a85a9===''&&_0x20d025===''&&(_0x4a85a9=this[_0x188ed7(0x654)][_0x188ed7(0x9d4)](),_0x20d025=this[_0x188ed7(0xbc7)]['battleback2Name']());const _0x53aa60=ImageManager[_0x188ed7(0x37c)](_0x4a85a9),_0xb67c00=ImageManager['loadBattleback2'](_0x20d025);_0x53aa60[_0x188ed7(0xbf3)](this[_0x188ed7(0xa99)][_0x188ed7(0x479)](this,this['_back1Sprite'],this[_0x188ed7(0xbc7)],_0x53aa60,_0xb67c00));},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa99)]=function(_0x50d1ec,_0x2dde35,_0x48d746,_0x56f42c){const _0x5ce251=_0x46ffcc;_0x56f42c[_0x5ce251(0xbf3)](this[_0x5ce251(0x58e)][_0x5ce251(0x479)](this,_0x50d1ec,_0x2dde35,_0x48d746,_0x56f42c));},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x58e)]=function(_0x2749b0,_0x25b491,_0x15f460,_0x1bfee8){const _0x894692=_0x46ffcc;_0x2749b0[_0x894692(0x267)]=_0x15f460,_0x25b491[_0x894692(0x267)]=_0x1bfee8,_0x2749b0[_0x894692(0x4b3)](),_0x25b491['adjustPosition']();},VisuMZ[_0x46ffcc(0x354)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa82)],Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xa82)]=function(){const _0x2fbccd=_0x46ffcc;VisuMZ[_0x2fbccd(0x354)][_0x2fbccd(0x30d)][_0x2fbccd(0x2e0)](this),this[_0x2fbccd(0xb80)]();},Spriteset_Battle['prototype']['createBattleFieldBattleCore']=function(){const _0x3f287d=_0x46ffcc;this[_0x3f287d(0xbbf)](),this[_0x3f287d(0x176)](),this[_0x3f287d(0x742)](),this[_0x3f287d(0x4b1)](),this[_0x3f287d(0x82a)]();},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xbbf)]=function(){const _0xcaf37=_0x46ffcc;this['_underAnimationContainer']=new Sprite(),this[_0xcaf37(0x17a)][_0xcaf37(0xb15)](this['_underAnimationContainer']),this[_0xcaf37(0x715)]=new Sprite(),this[_0xcaf37(0x17a)][_0xcaf37(0xb15)](this[_0xcaf37(0x715)]);},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x742)]=function(){const _0x1c7e10=_0x46ffcc;this[_0x1c7e10(0x15e)]=new Sprite(),Spriteset_Battle[_0x1c7e10(0xa6c)]?this[_0x1c7e10(0xb15)](this[_0x1c7e10(0x15e)]):this['_battleField'][_0x1c7e10(0xb15)](this['_animationContainer']);},Spriteset_Battle['prototype'][_0x46ffcc(0x4b1)]=function(){const _0x12d4b9=_0x46ffcc;this[_0x12d4b9(0x161)]=new Sprite(),this['_damageContainer']['x']=this[_0x12d4b9(0x17a)]['x'],this[_0x12d4b9(0x161)]['y']=this[_0x12d4b9(0x17a)]['y'],this[_0x12d4b9(0xb15)](this[_0x12d4b9(0x161)]);},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x82a)]=function(){const _0x30654e=_0x46ffcc;if(!this['isFlipped']())return;this[_0x30654e(0x715)][_0x30654e(0x3be)]['x']=-0x1,this[_0x30654e(0x715)]['x']=this['_battleField'][_0x30654e(0x448)],this[_0x30654e(0x39a)][_0x30654e(0x3be)]['x']=-0x1,this[_0x30654e(0x39a)]['x']=this[_0x30654e(0x17a)][_0x30654e(0x448)],this[_0x30654e(0x15e)][_0x30654e(0x3be)]['x']=-0x1,this[_0x30654e(0x15e)]['x']=this['_battleField'][_0x30654e(0x448)],this[_0x30654e(0x161)][_0x30654e(0x3be)]['x']=-0x1,this['_damageContainer']['x']=this[_0x30654e(0x17a)]['x']+this[_0x30654e(0x17a)][_0x30654e(0x448)];},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x391)]=function(){const _0x5421fa=_0x46ffcc;Imported[_0x5421fa(0xbaf)]&&this[_0x5421fa(0x405)]()&&this['repositionEnemiesByResolution']();const _0x2d485c=$gameTroop[_0x5421fa(0x3b2)](),_0x36506f=[];for(const _0x19cc88 of _0x2d485c){_0x36506f[_0x5421fa(0x40a)](new Sprite_Enemy(_0x19cc88));}_0x36506f[_0x5421fa(0xbae)](this[_0x5421fa(0x2b4)]['bind'](this));for(const _0x3bf5bb of _0x36506f){this[_0x5421fa(0x715)]['addChild'](_0x3bf5bb);}this[_0x5421fa(0x6e8)]=_0x36506f;},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x5b1)]=function(){const _0x205f34=_0x46ffcc;this[_0x205f34(0x511)]=[];for(let _0x373a6a=0x0;_0x373a6a<$gameParty[_0x205f34(0x2ae)]();_0x373a6a++){const _0x297534=$gameParty[_0x205f34(0xbdb)]()[_0x373a6a],_0xe574d5=new Sprite_Actor();_0xe574d5[_0x205f34(0x46d)](_0x297534),_0xe574d5[_0x205f34(0x1d1)](_0x297534),_0xe574d5[_0x205f34(0x881)](),this[_0x205f34(0x511)]['push'](_0xe574d5),this[_0x205f34(0x715)][_0x205f34(0xb15)](_0xe574d5);}},Spriteset_Battle[_0x46ffcc(0x9c1)]['createAnimationSprite']=function(_0x474a64,_0x385230,_0x1beba4,_0x5dc475){const _0x4bb628=_0x46ffcc,_0x56ea7f=this[_0x4bb628(0x81f)](_0x385230),_0x198ea1=new(_0x56ea7f?Sprite_AnimationMV:Sprite_Animation)(),_0x44267b=this[_0x4bb628(0x6c0)](_0x474a64);this[_0x4bb628(0x243)](_0x474a64[0x0])&&(_0x1beba4=!_0x1beba4),_0x198ea1[_0x4bb628(0x193)]=_0x474a64,_0x198ea1[_0x4bb628(0xb64)](_0x44267b,_0x385230,_0x1beba4,_0x5dc475),this[_0x4bb628(0x57c)](_0x198ea1);},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x57c)]=function(_0x3e8700){const _0xf35706=_0x46ffcc;this[_0xf35706(0x993)](_0x3e8700)?(this['battleStatusWindowAnimationContainer']()[_0xf35706(0xb15)](_0x3e8700),_0x3e8700[_0xf35706(0x149)]=!![]):(Spriteset_Battle['ANTI_TINT_UI']&&(this['_animationContainer']['x']=this[_0xf35706(0x8eb)]['x'],this[_0xf35706(0x15e)]['y']=this[_0xf35706(0x8eb)]['y']),this[_0xf35706(0x191)]&&_0x3e8700[_0xf35706(0xa2f)]&&_0x3e8700[_0xf35706(0xa2f)]()?(this[_0xf35706(0x191)][_0xf35706(0xb15)](_0x3e8700),this[_0xf35706(0x191)]['x']=this[_0xf35706(0x15e)]['x'],this[_0xf35706(0x191)]['y']=this[_0xf35706(0x15e)]['y']):this[_0xf35706(0x15e)]['addChild'](_0x3e8700)),this[_0xf35706(0x36e)][_0xf35706(0x40a)](_0x3e8700);},Spriteset_Battle[_0x46ffcc(0x9c1)]['isAnimationShownOnBattlePortrait']=function(_0x472277){const _0x389ae8=_0x46ffcc;if(!_0x472277)return![];if(!_0x472277[_0x389ae8(0xa75)])return![];if(!_0x472277[_0x389ae8(0x193)][0x0])return![];if(_0x472277[_0x389ae8(0x193)][0x0]['isActor']&&!_0x472277['targetObjects'][0x0][_0x389ae8(0x738)]())return![];if($gameSystem[_0x389ae8(0x5c0)]())return![];if(!this[_0x389ae8(0x96c)]())return![];if(_0x472277[_0x389ae8(0x42f)]===Sprite_Animation){const _0x5a5084=VisuMZ[_0x389ae8(0x354)]['Settings'][_0x389ae8(0x64a)];_0x5a5084[_0x389ae8(0x218)]=_0x5a5084[_0x389ae8(0x218)]??!![];if(_0x472277[_0x389ae8(0xa75)][_0x389ae8(0x5c5)]===0x0&&!_0x5a5084[_0x389ae8(0x218)])return![];_0x5a5084[_0x389ae8(0xac5)]=_0x5a5084['FvAniCenterAll']??!![];if(_0x472277['_animation']['displayType']===0x1&&!_0x5a5084[_0x389ae8(0xac5)])return![];_0x5a5084[_0x389ae8(0x51a)]=_0x5a5084[_0x389ae8(0x51a)]??![];if(_0x472277[_0x389ae8(0xa75)][_0x389ae8(0x5c5)]===0x2&&!_0x5a5084[_0x389ae8(0x51a)])return![];}else{if(_0x472277[_0x389ae8(0x42f)]===Sprite_AnimationMV){if(_0x472277[_0x389ae8(0xa75)][_0x389ae8(0x324)]===0x3)return![];}}return!![];const _0x686480=Window_BattleStatus[_0x389ae8(0x9c1)][_0x389ae8(0x154)]();return['xp',_0x389ae8(0x1cd)]['contains'](_0x686480);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x22a82f=_0x46ffcc;if(!SceneManager['_scene'])return null;if(!SceneManager['_scene'][_0x22a82f(0x7d9)])return null;if(!SceneManager['_scene']['_statusWindow'][_0x22a82f(0x8eb)])return null;return SceneManager[_0x22a82f(0x5e4)][_0x22a82f(0x7d9)][_0x22a82f(0x8eb)];},Spriteset_Battle['prototype'][_0x46ffcc(0xb2c)]=function(_0xf4fb64){const _0x111714=_0x46ffcc;this[_0x111714(0x89a)](_0xf4fb64);for(const _0x594347 of _0xf4fb64[_0x111714(0x193)]){_0x594347[_0x111714(0x9f0)]&&_0x594347[_0x111714(0x9f0)]();}_0xf4fb64['destroy']();},Spriteset_Battle['prototype']['removeAnimationFromContainer']=function(_0x32c86a){const _0x2ad98d=_0x46ffcc;this[_0x2ad98d(0x993)](_0x32c86a)?this[_0x2ad98d(0x96c)]()[_0x2ad98d(0x7e3)](_0x32c86a):this[_0x2ad98d(0x15e)][_0x2ad98d(0x7e3)](_0x32c86a);this[_0x2ad98d(0x191)]&&this[_0x2ad98d(0x191)][_0x2ad98d(0x7e3)](_0x32c86a);this[_0x2ad98d(0x8eb)]['removeChild'](_0x32c86a),this[_0x2ad98d(0x15e)][_0x2ad98d(0x7e3)](_0x32c86a),this[_0x2ad98d(0x36e)][_0x2ad98d(0x112)](_0x32c86a);if(this['_fauxAnimationSprites'])this['_fauxAnimationSprites'][_0x2ad98d(0x112)](_0x32c86a);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x6dd)]=Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2b1)],Spriteset_Battle['prototype']['updateActors']=function(){const _0x2a2cdc=_0x46ffcc;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x2a2cdc(0x2e0)](this),this[_0x2a2cdc(0x9ee)]();},Spriteset_Battle['prototype'][_0x46ffcc(0x9ee)]=function(){const _0x56ab04=_0x46ffcc;this[_0x56ab04(0x715)][_0x56ab04(0x88a)][_0x56ab04(0xbae)](this['compareBattlerSprites']['bind'](this)),this[_0x56ab04(0x541)]();if(!this[_0x56ab04(0x715)])return;this[_0x56ab04(0x715)][_0x56ab04(0x2a4)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x13b)]=function(_0x21e95a,_0x242601){const _0x3d52be=_0x46ffcc;if(VisuMZ[_0x3d52be(0x354)][_0x3d52be(0x59e)][_0x3d52be(0x64a)][_0x3d52be(0x607)]){if(_0x21e95a[_0x3d52be(0x50c)]&&_0x242601['_battler']){if(_0x21e95a[_0x3d52be(0x50c)]['isActor']()&&_0x242601[_0x3d52be(0x50c)]['isEnemy']())return 0x1;else{if(_0x242601['_battler']['isActor']()&&_0x21e95a[_0x3d52be(0x50c)][_0x3d52be(0x656)]())return-0x1;}}}return _0x21e95a['_baseY']!==_0x242601[_0x3d52be(0x97f)]?_0x21e95a[_0x3d52be(0x97f)]-_0x242601[_0x3d52be(0x97f)]:_0x242601[_0x3d52be(0x6fa)]-_0x21e95a['spriteId'];},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x541)]=function(){const _0x3930a0=_0x46ffcc;if(!VisuMZ['BattleCore'][_0x3930a0(0x59e)][_0x3930a0(0x64a)][_0x3930a0(0x648)])return;const _0x394bd2=BattleManager[_0x3930a0(0x30f)];if(_0x394bd2){if(_0x394bd2[_0x3930a0(0x738)]()&&!$gameSystem[_0x3930a0(0x5c0)]())return;if(_0x394bd2===BattleManager[_0x3930a0(0xb81)]())return;const _0xb231f3=_0x394bd2[_0x3930a0(0x430)]();if(_0xb231f3&&_0x394bd2[_0x3930a0(0x738)]())this[_0x3930a0(0x715)][_0x3930a0(0xb15)](_0xb231f3);}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x57247a=_0x46ffcc;for(const _0x957f65 of $gameParty[_0x57247a(0x312)]()){if(!_0x957f65)continue;if(!_0x957f65[_0x57247a(0x430)]())continue;_0x957f65[_0x57247a(0x430)]()[_0x57247a(0x3f9)]=!![],_0x957f65[_0x57247a(0x430)]()['retreat']();}},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x176)]=function(){const _0x11402b=_0x46ffcc;this[_0x11402b(0x39a)]=new Sprite(),Spriteset_Battle[_0x11402b(0xa6c)]?this[_0x11402b(0xb15)](this[_0x11402b(0x39a)]):this[_0x11402b(0x17a)][_0x11402b(0xb15)](this['_uiContainer']),SceneManager[_0x11402b(0x5e4)][_0x11402b(0x39a)]=this[_0x11402b(0x39a)];},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x3df)]=function(){const _0x1a4677=_0x46ffcc;if(VisuMZ['BattleCore'][_0x1a4677(0x59e)]['Enemy'][_0x1a4677(0x30b)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x1a4677(0x445)](this[_0x1a4677(0x432)]);for(const _0x4aecc8 of this['_enemySprites']){const _0x5c0012=new Sprite_EnemyName();this[_0x1a4677(0x432)][_0x1a4677(0xb15)](_0x5c0012),_0x5c0012[_0x1a4677(0xcc)](_0x4aecc8);}},Spriteset_Battle['prototype'][_0x46ffcc(0x143)]=function(){const _0x534eeb=_0x46ffcc;if(!this[_0x534eeb(0x161)])return;if(!this[_0x534eeb(0x39a)])return;const _0x3b9e2e=Spriteset_Battle['ANTI_TINT_UI']?this[_0x534eeb(0x161)]['x']:0x0,_0x44737e=Spriteset_Battle[_0x534eeb(0xa6c)]?this[_0x534eeb(0x161)]['y']:0x0,_0x3db0c8=Imported[_0x534eeb(0x1f8)]?this[_0x534eeb(0x17a)]['x']:0x0,_0x2177ae=Imported['VisuMZ_3_ActSeqCamera']?this[_0x534eeb(0x17a)]['y']:0x0;this[_0x534eeb(0x39a)]['x']=_0x3b9e2e+_0x3db0c8,this[_0x534eeb(0x39a)]['y']=_0x44737e+_0x2177ae;},BattleManager['addChildToUiContainer']=function(_0x2b4cf7){const _0x99d2ab=_0x46ffcc;if(!SceneManager[_0x99d2ab(0x5e4)][_0x99d2ab(0x39a)])return;SceneManager[_0x99d2ab(0x5e4)][_0x99d2ab(0x39a)][_0x99d2ab(0xb15)](_0x2b4cf7);},BattleManager[_0x46ffcc(0xb82)]=function(_0x3d0a84){const _0x326b7f=_0x46ffcc;if(!SceneManager[_0x326b7f(0x5e4)][_0x326b7f(0x39a)])return;SceneManager[_0x326b7f(0x5e4)][_0x326b7f(0x39a)][_0x326b7f(0x7e3)](_0x3d0a84);},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x133)]=function(){return 0xff;},Spriteset_Battle[_0x46ffcc(0x9c1)]['isBusy']=function(){return![];},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0xb13)]=function(){const _0x32400c=_0x46ffcc;return this[_0x32400c(0x889)]()['some'](_0x17cefd=>_0x17cefd[_0x32400c(0xa9a)]());},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x409)]=function(){const _0x52b85c=_0x46ffcc;return this['battlerSprites']()[_0x52b85c(0x67d)](_0x322bae=>_0x322bae[_0x52b85c(0x141)]());},Spriteset_Battle[_0x46ffcc(0x9c1)]['isAnyoneGrowing']=function(){const _0x1d7228=_0x46ffcc;return this[_0x1d7228(0x889)]()[_0x1d7228(0x67d)](_0x551bbb=>_0x551bbb[_0x1d7228(0x83e)]());},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x774)]=function(){const _0x5ef859=_0x46ffcc;return this[_0x5ef859(0x889)]()['some'](_0x25ae17=>_0x25ae17[_0x5ef859(0x6c6)]());},Spriteset_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x5a2)]=function(){const _0x4c7c1e=_0x46ffcc;return this[_0x4c7c1e(0x889)]()[_0x4c7c1e(0x67d)](_0x28894b=>_0x28894b['isSpinning']());},Spriteset_Battle[_0x46ffcc(0x9c1)]['isAnyoneChangingOpacity']=function(){const _0x42978a=_0x46ffcc;return this[_0x42978a(0x889)]()[_0x42978a(0x67d)](_0x1f28f2=>_0x1f28f2[_0x42978a(0x9a1)]());},VisuMZ[_0x46ffcc(0x354)]['Window_ItemList_maxCols']=Window_ItemList[_0x46ffcc(0x9c1)][_0x46ffcc(0x7a4)],Window_ItemList[_0x46ffcc(0x9c1)][_0x46ffcc(0x7a4)]=function(){const _0x4427c9=_0x46ffcc;return SceneManager['isSceneBattle']()?SceneManager[_0x4427c9(0x5e4)][_0x4427c9(0x154)]()===_0x4427c9(0x245)?VisuMZ['BattleCore'][_0x4427c9(0x59e)][_0x4427c9(0x31c)][_0x4427c9(0x3ea)]:VisuMZ[_0x4427c9(0x354)][_0x4427c9(0x59e)][_0x4427c9(0x31c)][_0x4427c9(0xaaa)]:VisuMZ['BattleCore'][_0x4427c9(0x8a2)][_0x4427c9(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x908)]=Window_SkillList[_0x46ffcc(0x9c1)][_0x46ffcc(0x7a4)],Window_SkillList[_0x46ffcc(0x9c1)][_0x46ffcc(0x7a4)]=function(){const _0x4bf4=_0x46ffcc;return SceneManager[_0x4bf4(0xaf2)]()?SceneManager['_scene']['battleLayoutStyle']()===_0x4bf4(0x245)?VisuMZ[_0x4bf4(0x354)][_0x4bf4(0x59e)][_0x4bf4(0x31c)][_0x4bf4(0x3ea)]:VisuMZ[_0x4bf4(0x354)][_0x4bf4(0x59e)][_0x4bf4(0x31c)][_0x4bf4(0xaaa)]:VisuMZ[_0x4bf4(0x354)][_0x4bf4(0x908)][_0x4bf4(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)]['Window_Options_addGeneralOptions']=Window_Options[_0x46ffcc(0x9c1)]['addGeneralOptions'],Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x9fb)]=function(){const _0x1afcff=_0x46ffcc;VisuMZ[_0x1afcff(0x354)][_0x1afcff(0x416)][_0x1afcff(0x2e0)](this),this['addAutoBattleCommands'](),this[_0x1afcff(0x808)]();},Window_Options['prototype'][_0x46ffcc(0xb65)]=function(){const _0x1f0bb9=_0x46ffcc;VisuMZ[_0x1f0bb9(0x354)][_0x1f0bb9(0x59e)][_0x1f0bb9(0x6c1)][_0x1f0bb9(0xb83)]&&(this[_0x1f0bb9(0x4c6)](),this[_0x1f0bb9(0x167)]());},Window_Options['prototype']['addShowHpGaugeCommand']=function(){const _0x33e291=_0x46ffcc;if(!VisuMZ[_0x33e291(0x354)][_0x33e291(0x59e)][_0x33e291(0xa97)]['AddHpGaugeOption'])return;const _0x4632f6=TextManager[_0x33e291(0x8b5)],_0x86c218=_0x33e291(0x8b5);this[_0x33e291(0x17c)](_0x4632f6,_0x86c218);},Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x4c6)]=function(){const _0x3ca2c9=_0x46ffcc,_0x3ae5c2=TextManager[_0x3ca2c9(0x501)],_0x4c3bc1=_0x3ca2c9(0xa12);this[_0x3ca2c9(0x17c)](_0x3ae5c2,_0x4c3bc1);},Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x167)]=function(){const _0x482421=_0x46ffcc,_0x102d94=TextManager[_0x482421(0x36d)],_0x5177bd=_0x482421(0x9d5);this[_0x482421(0x17c)](_0x102d94,_0x5177bd);},VisuMZ['BattleCore'][_0x46ffcc(0x1e7)]=Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x265)],Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x265)]=function(_0x23ddf1){const _0x5ec75b=_0x46ffcc,_0x62eabc=this[_0x5ec75b(0x912)](_0x23ddf1);return _0x62eabc===_0x5ec75b(0x9d5)?this[_0x5ec75b(0x78d)]():VisuMZ[_0x5ec75b(0x354)][_0x5ec75b(0x1e7)][_0x5ec75b(0x2e0)](this,_0x23ddf1);},Window_Options[_0x46ffcc(0x9c1)][_0x46ffcc(0x78d)]=function(){const _0x186568=_0x46ffcc,_0x16bfe1=VisuMZ[_0x186568(0x354)][_0x186568(0x59e)][_0x186568(0x6c1)],_0x9fcf2f=this[_0x186568(0x1c6)]('autoBattleUseSkills');return _0x9fcf2f?_0x16bfe1[_0x186568(0xa9b)]:_0x16bfe1[_0x186568(0x768)];},Window_ShopStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x4df)]=function(){const _0x4dde6c=_0x46ffcc,_0x5cfdbc=DataManager[_0x4dde6c(0x168)](this[_0x4dde6c(0xace)]),_0x4d3591=VisuMZ[_0x4dde6c(0x4fa)][_0x5cfdbc];if(!_0x4d3591)return this[_0x4dde6c(0x971)]();const _0x56f805=_0x4dde6c(0x93b)[_0x4dde6c(0x498)](this['_item'][_0x4dde6c(0x6be)]['type']),_0x21a0cf=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x4dde6c(0x6be)]['type']];return _0x4d3591[_0x56f805][_0x4dde6c(0x498)](_0x21a0cf);},Window_ShopStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x9af)]=function(){const _0xa7e92a=_0x46ffcc,_0x15aaa8=DataManager[_0xa7e92a(0x168)](this[_0xa7e92a(0xace)]),_0x20ea28=VisuMZ[_0xa7e92a(0x4fa)][_0x15aaa8];if(!_0x20ea28)return this[_0xa7e92a(0x60c)]();return _0x20ea28[_0xa7e92a(0xa68)][_0xa7e92a(0x2e0)](this);},VisuMZ[_0x46ffcc(0x354)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x46ffcc(0x9c1)]['initialize'],Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x2f24b9){const _0x470d9c=_0x46ffcc;VisuMZ[_0x470d9c(0x354)]['Window_PartyCommand_initialize'][_0x470d9c(0x2e0)](this,_0x2f24b9),this[_0x470d9c(0x5d1)](_0x2f24b9);},Window_PartyCommand['prototype']['createCommandNameWindow']=function(_0x51dbcc){const _0x453ddb=_0x46ffcc,_0x2f3234=new Rectangle(0x0,0x0,_0x51dbcc[_0x453ddb(0x448)],_0x51dbcc['height']);this[_0x453ddb(0x302)]=new Window_Base(_0x2f3234),this[_0x453ddb(0x302)][_0x453ddb(0x2a4)]=0x0,this[_0x453ddb(0xb15)](this[_0x453ddb(0x302)]),this[_0x453ddb(0x30e)]();},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x5e5)]=function(){const _0x508ea1=_0x46ffcc;Window_Command['prototype']['callUpdateHelp'][_0x508ea1(0x2e0)](this);if(this[_0x508ea1(0x302)])this[_0x508ea1(0x30e)]();},Window_PartyCommand['prototype'][_0x46ffcc(0x30e)]=function(){const _0x469e2f=_0x46ffcc,_0x37d8d9=this[_0x469e2f(0x302)];_0x37d8d9[_0x469e2f(0xab6)][_0x469e2f(0x91f)]();const _0x351e3a=this['commandStyleCheck'](this[_0x469e2f(0x29e)]());if(_0x351e3a==='icon'&&this[_0x469e2f(0xa26)]()>0x0){const _0xb0f44=this[_0x469e2f(0xb73)](this[_0x469e2f(0x29e)]());let _0x7478dd=this['commandName'](this[_0x469e2f(0x29e)]());_0x7478dd=_0x7478dd[_0x469e2f(0x5c1)](/\\I\[(\d+)\]/gi,''),_0x37d8d9[_0x469e2f(0x2cd)](),this[_0x469e2f(0x10a)](_0x7478dd,_0xb0f44),this['commandNameWindowDrawText'](_0x7478dd,_0xb0f44),this[_0x469e2f(0x72c)](_0x7478dd,_0xb0f44);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x5a191c,_0x1c42de){},Window_PartyCommand['prototype'][_0x46ffcc(0x13c)]=function(_0x4e457b,_0x5bfaa1){const _0x37c5d5=_0x46ffcc,_0x20fd78=this[_0x37c5d5(0x302)];_0x20fd78[_0x37c5d5(0x8fc)](_0x4e457b,0x0,_0x5bfaa1['y'],_0x20fd78['innerWidth'],'center');},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x72c)]=function(_0x5edf5f,_0x5c46d8){const _0xd481dc=_0x46ffcc,_0x30d4c5=this[_0xd481dc(0x302)],_0xea4c19=$gameSystem[_0xd481dc(0x781)](),_0x307ba4=_0x5c46d8['x']+Math[_0xd481dc(0x27a)](_0x5c46d8[_0xd481dc(0x448)]/0x2)+_0xea4c19;_0x30d4c5['x']=_0x30d4c5[_0xd481dc(0x448)]/-0x2+_0x307ba4,_0x30d4c5['y']=Math['floor'](_0x5c46d8['height']/0x2);},Window_PartyCommand['prototype'][_0x46ffcc(0x73e)]=function(){const _0x36ce25=_0x46ffcc;this[_0x36ce25(0x650)](),this['addAutoBattleCommand'](),this['addCustomCommands'](),this[_0x36ce25(0x190)](),this[_0x36ce25(0x581)](),this['addEscapeCommand']();},Window_PartyCommand['prototype']['addFightCommand']=function(){const _0x2ef6be=_0x46ffcc,_0x4f3a9c=this['commandStyle'](),_0x44bfc2=VisuMZ[_0x2ef6be(0x354)][_0x2ef6be(0x59e)][_0x2ef6be(0x4eb)][_0x2ef6be(0x135)],_0x231cdd=_0x4f3a9c===_0x2ef6be(0x7c2)?TextManager[_0x2ef6be(0x4b8)]:_0x2ef6be(0x2de)[_0x2ef6be(0x498)](_0x44bfc2,TextManager[_0x2ef6be(0x4b8)]),_0x5307ae=this['isFightCommandEnabled']();this['addCommand'](_0x231cdd,_0x2ef6be(0x4b8),_0x5307ae);},Window_PartyCommand[_0x46ffcc(0x9c1)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x46ffcc(0x614)]=function(){const _0x968f75=_0x46ffcc;if(!this['isAutoBattleCommandAdded']())return;const _0x1b448d=this['commandStyle'](),_0x54e852=VisuMZ[_0x968f75(0x354)][_0x968f75(0x59e)][_0x968f75(0x4eb)][_0x968f75(0x98f)],_0x5b3f06=_0x1b448d===_0x968f75(0x7c2)?TextManager['autoBattle']:'\x5cI[%1]%2'['format'](_0x54e852,TextManager[_0x968f75(0x381)]),_0x5739f2=this[_0x968f75(0x6ed)]();this[_0x968f75(0x17c)](_0x5b3f06,_0x968f75(0x381),_0x5739f2);},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x99e)]=function(){const _0x311ca6=_0x46ffcc;return VisuMZ[_0x311ca6(0x354)]['Settings'][_0x311ca6(0x4eb)][_0x311ca6(0x997)];},Window_PartyCommand[_0x46ffcc(0x9c1)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x1b4)]=function(){},Window_PartyCommand['prototype'][_0x46ffcc(0x190)]=function(){const _0x494641=_0x46ffcc,_0x3f155d=VisuMZ[_0x494641(0x354)]['Settings'][_0x494641(0x4eb)][_0x494641(0x3a0)]??!![];if(!_0x3f155d)return;const _0x3333e1=this['commandStyle'](),_0xcad6f3=VisuMZ[_0x494641(0x354)]['Settings']['InBattleStatus'][_0x494641(0x625)]??0x57,_0x149bb4=_0x3333e1===_0x494641(0x7c2)?TextManager[_0x494641(0xa7d)]:'\x5cI[%1]%2'[_0x494641(0x498)](_0xcad6f3,TextManager[_0x494641(0xa7d)]),_0x41af99=!![];this['addCommand'](_0x149bb4,'status',_0x41af99);},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x581)]=function(){const _0x11a502=_0x46ffcc;if(!this[_0x11a502(0xad1)]())return;const _0x1afb8e=this[_0x11a502(0x91e)](),_0x28400d=VisuMZ['BattleCore'][_0x11a502(0x59e)][_0x11a502(0x4eb)][_0x11a502(0x571)],_0x3eba96=_0x1afb8e===_0x11a502(0x7c2)?TextManager[_0x11a502(0x66f)]:'\x5cI[%1]%2'[_0x11a502(0x498)](_0x28400d,TextManager[_0x11a502(0x66f)]),_0x2bdfe5=this[_0x11a502(0x162)]();this['addCommand'](_0x3eba96,'options',_0x2bdfe5);},Window_PartyCommand[_0x46ffcc(0x9c1)]['isOptionsCommandAdded']=function(){const _0x52a290=_0x46ffcc;return VisuMZ[_0x52a290(0x354)]['Settings'][_0x52a290(0x4eb)]['CommandAddOptions'];},Window_PartyCommand[_0x46ffcc(0x9c1)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x46ffcc(0x9c1)]['addEscapeCommand']=function(){const _0x1b0e27=_0x46ffcc,_0x3ade9b=this[_0x1b0e27(0x91e)](),_0x222142=VisuMZ[_0x1b0e27(0x354)][_0x1b0e27(0x59e)][_0x1b0e27(0x4eb)]['CmdIconEscape'],_0x58973b=_0x3ade9b===_0x1b0e27(0x7c2)?TextManager[_0x1b0e27(0x4c9)]:_0x1b0e27(0x2de)[_0x1b0e27(0x498)](_0x222142,TextManager[_0x1b0e27(0x4c9)]),_0x32589e=this[_0x1b0e27(0xb11)]();this[_0x1b0e27(0x17c)](_0x58973b,_0x1b0e27(0x4c9),_0x32589e);},Window_PartyCommand[_0x46ffcc(0x9c1)]['isEscapeCommandEnabled']=function(){const _0x48e31b=_0x46ffcc;return BattleManager[_0x48e31b(0x27b)]();},Window_PartyCommand['prototype'][_0x46ffcc(0x38b)]=function(){const _0x121f08=_0x46ffcc;return VisuMZ[_0x121f08(0x354)][_0x121f08(0x59e)][_0x121f08(0x4eb)]['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x46ffcc(0x37f)]=function(_0x2fe8f){const _0x3f2c8c=_0x46ffcc,_0x36528e=this[_0x3f2c8c(0xa1e)](_0x2fe8f);if(_0x36528e===_0x3f2c8c(0x2f9))this['drawItemStyleIconText'](_0x2fe8f);else _0x36528e===_0x3f2c8c(0x468)?this['drawItemStyleIcon'](_0x2fe8f):Window_Command[_0x3f2c8c(0x9c1)]['drawItem'][_0x3f2c8c(0x2e0)](this,_0x2fe8f);},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x91e)]=function(){const _0xdcbb0d=_0x46ffcc;return VisuMZ[_0xdcbb0d(0x354)][_0xdcbb0d(0x59e)][_0xdcbb0d(0x4eb)]['CmdStyle'];},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xa1e)]=function(_0x35d285){const _0xca6119=_0x46ffcc;if(_0x35d285<0x0)return _0xca6119(0x7c2);const _0x2c49cd=this['commandStyle']();if(_0x2c49cd!==_0xca6119(0x82b))return _0x2c49cd;else{if(this[_0xca6119(0xa26)]()>0x0){const _0xa91ad4=this[_0xca6119(0x750)](_0x35d285);if(_0xa91ad4[_0xca6119(0xe0)](/\\I\[(\d+)\]/i)){const _0x337bad=this[_0xca6119(0xb73)](_0x35d285),_0x8039aa=this[_0xca6119(0x520)](_0xa91ad4)[_0xca6119(0x448)];return _0x8039aa<=_0x337bad[_0xca6119(0x448)]?_0xca6119(0x2f9):_0xca6119(0x468);}}}return _0xca6119(0x7c2);},Window_PartyCommand['prototype'][_0x46ffcc(0x292)]=function(_0x2281ba){const _0x37c645=_0x46ffcc,_0x437bf8=this[_0x37c645(0xb73)](_0x2281ba),_0x290cae=this['commandName'](_0x2281ba),_0x189ef6=this[_0x37c645(0x520)](_0x290cae)['width'];this[_0x37c645(0x12b)](this[_0x37c645(0x1b2)](_0x2281ba));const _0x1faf12=this[_0x37c645(0x38b)]();if(_0x1faf12===_0x37c645(0xa36))this[_0x37c645(0x4b9)](_0x290cae,_0x437bf8['x']+_0x437bf8[_0x37c645(0x448)]-_0x189ef6,_0x437bf8['y'],_0x189ef6);else{if(_0x1faf12===_0x37c645(0x7bf)){const _0x2f63a3=_0x437bf8['x']+Math[_0x37c645(0x27a)]((_0x437bf8[_0x37c645(0x448)]-_0x189ef6)/0x2);this[_0x37c645(0x4b9)](_0x290cae,_0x2f63a3,_0x437bf8['y'],_0x189ef6);}else this[_0x37c645(0x4b9)](_0x290cae,_0x437bf8['x'],_0x437bf8['y'],_0x189ef6);}},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xb90)]=function(_0x4cc237){const _0x1dc17d=_0x46ffcc;this[_0x1dc17d(0x750)](_0x4cc237)[_0x1dc17d(0xe0)](/\\I\[(\d+)\]/i);const _0x558a6b=Number(RegExp['$1'])||0x0,_0x391d4e=this['itemLineRect'](_0x4cc237),_0x2f66df=_0x391d4e['x']+Math[_0x1dc17d(0x27a)]((_0x391d4e[_0x1dc17d(0x448)]-ImageManager[_0x1dc17d(0x911)])/0x2),_0x55bcea=_0x391d4e['y']+(_0x391d4e['height']-ImageManager['iconHeight'])/0x2;this[_0x1dc17d(0x509)](_0x558a6b,_0x2f66df,_0x55bcea);},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x369)]=function(){},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xaf5)]=function(){const _0x22d2af=_0x46ffcc;Window_Command[_0x22d2af(0x9c1)][_0x22d2af(0xaf5)][_0x22d2af(0x2e0)](this);const _0x54872c=this['battleLayoutStyle']();_0x54872c===_0x22d2af(0x245)&&this[_0x22d2af(0x386)]();},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x154)]=function(){const _0x5abd77=_0x46ffcc;if(this[_0x5abd77(0x853)])return this[_0x5abd77(0x853)];return this[_0x5abd77(0x853)]=SceneManager['_scene'][_0x5abd77(0x154)](),this[_0x5abd77(0x853)];},Window_PartyCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x885)]=function(){const _0x1ce82f=_0x46ffcc,_0x180c06=VisuMZ[_0x1ce82f(0x354)][_0x1ce82f(0x59e)]['PartyCmd'],_0x3f1032=this['currentSymbol']();switch(_0x3f1032){case _0x1ce82f(0x4b8):this[_0x1ce82f(0x76e)]['setText'](_0x180c06[_0x1ce82f(0xa29)]);break;case _0x1ce82f(0x381):this['_helpWindow'][_0x1ce82f(0xa8d)](_0x180c06['HelpAutoBattle']);break;case'options':this[_0x1ce82f(0x76e)][_0x1ce82f(0xa8d)](_0x180c06[_0x1ce82f(0xb44)]);break;case'escape':this['_helpWindow']['setText'](_0x180c06[_0x1ce82f(0x43c)]);break;case'status':this[_0x1ce82f(0x76e)][_0x1ce82f(0xa8d)](Window_InBattleStatus[_0x1ce82f(0x9b9)]['statusHelpDesc']);break;default:this[_0x1ce82f(0x76e)][_0x1ce82f(0xa8d)]('');break;}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x724)]=Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x4a5aba){const _0x5e99a8=_0x46ffcc;VisuMZ[_0x5e99a8(0x354)][_0x5e99a8(0x724)][_0x5e99a8(0x2e0)](this,_0x4a5aba),this['createCommandNameWindow'](_0x4a5aba);},Window_ActorCommand[_0x46ffcc(0x9c1)]['createCommandNameWindow']=function(_0x3c154d){const _0x6e2c09=_0x46ffcc,_0x4a4445=new Rectangle(0x0,0x0,_0x3c154d[_0x6e2c09(0x448)],_0x3c154d[_0x6e2c09(0x212)]);this[_0x6e2c09(0x302)]=new Window_Base(_0x4a4445),this['_commandNameWindow']['opacity']=0x0,this[_0x6e2c09(0xb15)](this[_0x6e2c09(0x302)]),this['updateCommandNameWindow']();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x4b5673=_0x46ffcc;Window_Command[_0x4b5673(0x9c1)][_0x4b5673(0x5e5)]['call'](this);if(this[_0x4b5673(0x302)])this[_0x4b5673(0x30e)]();},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x30e)]=function(){const _0x204c35=_0x46ffcc,_0x489257=this['_commandNameWindow'];_0x489257[_0x204c35(0xab6)][_0x204c35(0x91f)]();const _0x3b16ff=this['commandStyleCheck'](this['index']());if(_0x3b16ff===_0x204c35(0x468)&&this[_0x204c35(0xa26)]()>0x0){const _0x13f8a0=this[_0x204c35(0xb73)](this['index']());let _0xb86c08=this[_0x204c35(0x750)](this[_0x204c35(0x29e)]());_0xb86c08=_0xb86c08['replace'](/\\I\[(\d+)\]/gi,''),_0x489257[_0x204c35(0x2cd)](),this[_0x204c35(0x10a)](_0xb86c08,_0x13f8a0),this[_0x204c35(0x13c)](_0xb86c08,_0x13f8a0),this[_0x204c35(0x72c)](_0xb86c08,_0x13f8a0);}},Window_ActorCommand['prototype'][_0x46ffcc(0x10a)]=function(_0x3f62e5,_0x4bf766){},Window_ActorCommand[_0x46ffcc(0x9c1)]['commandNameWindowDrawText']=function(_0x702784,_0xd61a44){const _0x58d078=_0x46ffcc,_0x5264b4=this[_0x58d078(0x302)];_0x5264b4[_0x58d078(0x8fc)](_0x702784,0x0,_0xd61a44['y'],_0x5264b4['innerWidth'],_0x58d078(0x7bf));},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x72c)]=function(_0x2a536e,_0x362a0e){const _0x16f9f9=_0x46ffcc,_0x25222b=this['_commandNameWindow'],_0x29e1f4=$gameSystem[_0x16f9f9(0x781)](),_0xf71347=_0x362a0e['x']+Math['floor'](_0x362a0e[_0x16f9f9(0x448)]/0x2)+_0x29e1f4;_0x25222b['x']=_0x25222b['width']/-0x2+_0xf71347,_0x25222b['y']=Math[_0x16f9f9(0x27a)](_0x362a0e[_0x16f9f9(0x212)]/0x2);},Window_ActorCommand[_0x46ffcc(0x9c1)]['makeCommandList']=function(){const _0x4322a5=_0x46ffcc;if(!this[_0x4322a5(0x449)])return;const _0x520f5b=this[_0x4322a5(0x449)][_0x4322a5(0x422)]();for(const _0x2ee42a of _0x520f5b){this[_0x4322a5(0x3dc)](_0x2ee42a[_0x4322a5(0x7b1)]()['trim']());}},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3dc)]=function(_0x1aea0){const _0xf36b81=_0x46ffcc;_0x1aea0===_0xf36b81(0x5b7)&&this[_0xf36b81(0xa20)]();[_0xf36b81(0x930),_0xf36b81(0x794)][_0xf36b81(0x6a2)](_0x1aea0)&&this['addSkillCommands']();_0x1aea0===_0xf36b81(0x934)&&this[_0xf36b81(0x3d6)]();_0x1aea0===_0xf36b81(0xa46)&&this['addItemCommand']();_0x1aea0==='STATUS'&&this[_0xf36b81(0x190)]();_0x1aea0===_0xf36b81(0x23d)&&this[_0xf36b81(0x5fd)]();_0x1aea0===_0xf36b81(0x101)&&this[_0xf36b81(0x614)]();if(_0x1aea0[_0xf36b81(0xe0)](/STYPE: (\d+)/i)){const _0x46d901=Number(RegExp['$1']);this[_0xf36b81(0xaba)](_0x46d901);}else{if(_0x1aea0[_0xf36b81(0xe0)](/STYPE: (.*)/i)){const _0x2aa108=DataManager[_0xf36b81(0x59b)](RegExp['$1']);this['addSkillTypeCommand'](_0x2aa108);}}_0x1aea0==='ALL\x20SKILLS'&&this[_0xf36b81(0x61e)]();if(_0x1aea0[_0xf36b81(0xe0)](/SKILL: (\d+)/i)){const _0x4e6743=Number(RegExp['$1']);this[_0xf36b81(0x555)]($dataSkills[_0x4e6743]);}else{if(_0x1aea0[_0xf36b81(0xe0)](/SKILL: (.*)/i)){const _0x3b7947=DataManager[_0xf36b81(0xb59)](RegExp['$1']);this[_0xf36b81(0x555)]($dataSkills[_0x3b7947]);}}_0x1aea0==='PARTY'&&Imported[_0xf36b81(0x83d)]&&this[_0xf36b81(0x22a)](),_0x1aea0===_0xf36b81(0xbc5)&&Imported[_0xf36b81(0x59c)]&&this[_0xf36b81(0x931)](),['COMBATLOG','COMBAT\x20LOG'][_0xf36b81(0x6a2)](_0x1aea0)&&Imported[_0xf36b81(0x293)]&&this[_0xf36b81(0x73a)](),_0x1aea0===_0xf36b81(0xca)&&Imported[_0xf36b81(0x825)]&&this['addWeaponSwapCommand'](!![]),_0x1aea0==='GRID\x20MOVE'&&Imported[_0xf36b81(0x264)]&&this[_0xf36b81(0x6b1)]();},Window_ActorCommand['prototype'][_0x46ffcc(0xa20)]=function(){const _0x16a559=_0x46ffcc,_0x585cd1=$dataSkills[this[_0x16a559(0x449)][_0x16a559(0x722)]()];if(!_0x585cd1)return;if(!this[_0x16a559(0x3cd)](_0x585cd1))return;const _0x2fca58=this[_0x16a559(0x91e)](),_0x2e669e=DataManager['battleCommandName'](_0x585cd1),_0x490efa=DataManager[_0x16a559(0x9cf)](_0x585cd1),_0x397ea7=_0x2fca58===_0x16a559(0x7c2)?_0x2e669e:_0x16a559(0x2de)[_0x16a559(0x498)](_0x490efa,_0x2e669e);this[_0x16a559(0x17c)](_0x397ea7,'attack',this[_0x16a559(0x449)]['canAttack']());},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3d6)]=function(){const _0x21dac1=_0x46ffcc,_0x38b1be=$dataSkills[this[_0x21dac1(0x449)]['guardSkillId']()];if(!_0x38b1be)return;if(!this['canAddSkillCommand'](_0x38b1be))return;const _0xff0d48=this['commandStyle'](),_0x99d039=DataManager['battleCommandName'](_0x38b1be),_0x2c1032=DataManager[_0x21dac1(0x9cf)](_0x38b1be),_0x19e13d=_0xff0d48==='text'?_0x99d039:_0x21dac1(0x2de)['format'](_0x2c1032,_0x99d039);this[_0x21dac1(0x17c)](_0x19e13d,_0x21dac1(0x644),this[_0x21dac1(0x449)][_0x21dac1(0x1df)]());},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x339)]=function(){const _0x56f824=_0x46ffcc,_0x2f45c0=this[_0x56f824(0x91e)](),_0x2ce4ed=VisuMZ[_0x56f824(0x354)][_0x56f824(0x59e)][_0x56f824(0x8a1)][_0x56f824(0x79d)],_0x504eb2=_0x2f45c0===_0x56f824(0x7c2)?TextManager['item']:_0x56f824(0x2de)['format'](_0x2ce4ed,TextManager[_0x56f824(0x50d)]),_0x518ddd=this[_0x56f824(0xb3a)]();this[_0x56f824(0x17c)](_0x504eb2,_0x56f824(0x50d),_0x518ddd);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xb3a)]=function(){const _0x140e63=_0x46ffcc;return this[_0x140e63(0x449)]&&this[_0x140e63(0x449)][_0x140e63(0x237)]();},Window_ActorCommand[_0x46ffcc(0x9c1)]['addSkillCommands']=function(){const _0x3e9274=_0x46ffcc,_0x3c6dcb=this['_actor'][_0x3e9274(0xad8)]();for(const _0x3ff46d of _0x3c6dcb){this['addSkillTypeCommand'](_0x3ff46d);}},Window_ActorCommand[_0x46ffcc(0x9c1)]['addSkillTypeCommand']=function(_0x173987){const _0x12c438=_0x46ffcc;let _0x7d9ca1=$dataSystem[_0x12c438(0xad8)][_0x173987];if(!_0x7d9ca1)return;let _0x268ee6=_0x7d9ca1;const _0x319050=this[_0x12c438(0x91e)]();if(_0x319050===_0x12c438(0x7c2))_0x268ee6=_0x268ee6['replace'](/\x1I\[(\d+)\]/gi,''),_0x268ee6=_0x268ee6[_0x12c438(0x5c1)](/\\I\[(\d+)\]/gi,'');else{if(!_0x7d9ca1['match'](/\\I\[(\d+)\]/i)){const _0x1fc403=Imported[_0x12c438(0x179)]?VisuMZ['SkillsStatesCore']['Settings'][_0x12c438(0x4b4)]:VisuMZ[_0x12c438(0x354)][_0x12c438(0x59e)][_0x12c438(0x8a1)],_0x318258=$dataSystem[_0x12c438(0x353)][_0x12c438(0x6a2)](_0x173987),_0x4b7750=_0x318258?_0x1fc403[_0x12c438(0x869)]:_0x1fc403[_0x12c438(0x3e8)];_0x268ee6=_0x12c438(0x2de)[_0x12c438(0x498)](_0x4b7750,_0x7d9ca1);}}this[_0x12c438(0x17c)](_0x268ee6,_0x12c438(0x8ad),!![],_0x173987);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x61e)]=function(){const _0x432f44=_0x46ffcc,_0x31f0b4=this[_0x432f44(0x449)][_0x432f44(0xad8)](),_0x3cb531=this[_0x432f44(0x449)][_0x432f44(0x945)]();for(const _0x3665d3 of _0x3cb531){if(!_0x3665d3)continue;if(Imported[_0x432f44(0x179)]){if(this['noSimilarSTypes'](_0x3665d3))continue;if(this[_0x432f44(0xa43)](_0x3665d3))continue;}else{if(!_0x31f0b4[_0x432f44(0x6a2)](_0x3665d3[_0x432f44(0xae7)]))continue;}this[_0x432f44(0x555)](_0x3665d3);}},Window_ActorCommand['prototype'][_0x46ffcc(0xb30)]=function(_0x3c8176){const _0x102850=_0x46ffcc,_0x26c128=this[_0x102850(0x449)][_0x102850(0xad8)](),_0xcb3c1a=_0x26c128['filter'](_0x5b8062=>DataManager['getSkillTypes'](_0x3c8176)[_0x102850(0x6a2)](_0x5b8062));return _0xcb3c1a[_0x102850(0x9bf)]<=0x0;},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xa43)]=function(_0x8a3b5f){const _0x4e5b7d=_0x46ffcc;if(Imported[_0x4e5b7d(0x179)]){if(VisuMZ['SkillsStatesCore'][_0x4e5b7d(0x613)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x4e5b7d(0x8df)][_0x4e5b7d(0x6d7)](this['_actor'],_0x8a3b5f))return!![];if(!VisuMZ[_0x4e5b7d(0x8df)][_0x4e5b7d(0x201)](this['_actor'],_0x8a3b5f))return!![];if(!VisuMZ[_0x4e5b7d(0x8df)][_0x4e5b7d(0x77a)](this[_0x4e5b7d(0x449)],_0x8a3b5f))return!![];}}else{if(!Window_SkillList[_0x4e5b7d(0x9c1)]['checkShowHideBattleNotetags'][_0x4e5b7d(0x2e0)](this,_0x8a3b5f))return!![];if(!Window_SkillList[_0x4e5b7d(0x9c1)][_0x4e5b7d(0x6aa)][_0x4e5b7d(0x2e0)](this,_0x8a3b5f))return!![];if(!Window_SkillList['prototype']['checkShowHideSkillNotetags'][_0x4e5b7d(0x2e0)](this,_0x8a3b5f))return!![];}}return![];},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x555)]=function(_0x2b011c){const _0x529f76=_0x46ffcc;if(!_0x2b011c)return;if(!this[_0x529f76(0x3cd)](_0x2b011c))return;const _0x226c95=this[_0x529f76(0x91e)](),_0x39fe7d=DataManager[_0x529f76(0xa0d)](_0x2b011c),_0x1688c5=DataManager[_0x529f76(0x9cf)](_0x2b011c),_0x314275=_0x226c95===_0x529f76(0x7c2)?_0x39fe7d:_0x529f76(0x2de)[_0x529f76(0x498)](_0x1688c5,_0x39fe7d),_0x12219d=this[_0x529f76(0x449)][_0x529f76(0x2d3)](_0x2b011c);this[_0x529f76(0x17c)](_0x314275,_0x529f76(0x4c3),_0x12219d,_0x2b011c['id']);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x3cd)]=function(_0x1978ad){const _0x14353c=_0x46ffcc,_0x138b45=_0x1978ad[_0x14353c(0x8fd)];if(_0x138b45[_0x14353c(0xe0)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x14353c(0x1d5)](_0x1978ad['id']))return![];}if(_0x138b45['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x14353c(0x449)][_0x14353c(0x775)](_0x1978ad['id']))return![];}const _0x47adbf=VisuMZ[_0x14353c(0x354)][_0x14353c(0x4be)](_0x1978ad,_0x14353c(0x9d3));if(VisuMZ[_0x14353c(0x354)]['JS'][_0x47adbf]){if(!VisuMZ[_0x14353c(0x354)]['JS'][_0x47adbf][_0x14353c(0x2e0)](this,this['_actor'],_0x1978ad))return![];}return VisuMZ[_0x14353c(0x354)][_0x14353c(0x984)](_0x1978ad);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x984)]=function(_0x50d600){const _0x501bb4=_0x46ffcc,_0x442879=_0x50d600[_0x501bb4(0x8fd)];if(_0x442879[_0x501bb4(0xe0)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x42e57d=JSON[_0x501bb4(0xb21)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x313fd0 of _0x42e57d){if(!$gameSwitches[_0x501bb4(0x944)](_0x313fd0))return![];}return!![];}if(_0x442879['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x383044=JSON[_0x501bb4(0xb21)]('['+RegExp['$1'][_0x501bb4(0xe0)](/\d+/g)+']');for(const _0x4d0e65 of _0x383044){if(!$gameSwitches[_0x501bb4(0x944)](_0x4d0e65))return![];}return!![];}if(_0x442879[_0x501bb4(0xe0)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x10e673=JSON[_0x501bb4(0xb21)]('['+RegExp['$1'][_0x501bb4(0xe0)](/\d+/g)+']');for(const _0x48774d of _0x10e673){if($gameSwitches[_0x501bb4(0x944)](_0x48774d))return!![];}return![];}if(_0x442879['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1171ae=JSON[_0x501bb4(0xb21)]('['+RegExp['$1'][_0x501bb4(0xe0)](/\d+/g)+']');for(const _0x3b690b of _0x1171ae){if(!$gameSwitches[_0x501bb4(0x944)](_0x3b690b))return!![];}return![];}if(_0x442879['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x886418=JSON[_0x501bb4(0xb21)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x54b173 of _0x886418){if(!$gameSwitches[_0x501bb4(0x944)](_0x54b173))return!![];}return![];}if(_0x442879[_0x501bb4(0xe0)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x41c1e7=JSON['parse']('['+RegExp['$1'][_0x501bb4(0xe0)](/\d+/g)+']');for(const _0x27d747 of _0x41c1e7){if($gameSwitches[_0x501bb4(0x944)](_0x27d747))return![];}return!![];}return!![];},Window_ActorCommand[_0x46ffcc(0x9c1)]['addStatusCommand']=function(){const _0x152307=_0x46ffcc,_0x1d3c00=this[_0x152307(0x91e)](),_0x7f9c82=VisuMZ['BattleCore'][_0x152307(0x59e)]['InBattleStatus'][_0x152307(0x625)]??0x57,_0x4a5073=_0x1d3c00===_0x152307(0x7c2)?TextManager[_0x152307(0xa7d)]:_0x152307(0x2de)['format'](_0x7f9c82,TextManager[_0x152307(0xa7d)]),_0x354fb3=!![];this[_0x152307(0x17c)](_0x4a5073,'status',_0x354fb3);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x5fd)]=function(){const _0x288d7c=_0x46ffcc,_0x4a99a0=this[_0x288d7c(0x91e)](),_0x3de78c=VisuMZ[_0x288d7c(0x354)][_0x288d7c(0x59e)][_0x288d7c(0x4eb)][_0x288d7c(0x1f6)],_0x384693=_0x4a99a0===_0x288d7c(0x7c2)?TextManager[_0x288d7c(0x4c9)]:_0x288d7c(0x2de)['format'](_0x3de78c,TextManager[_0x288d7c(0x4c9)]),_0x4467bc=this['isEscapeCommandEnabled']();this[_0x288d7c(0x17c)](_0x384693,'escape',_0x4467bc);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xb11)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x46ffcc(0x9c1)]['addAutoBattleCommand']=function(){const _0x17afe2=_0x46ffcc,_0x47e736=this['commandStyle'](),_0x473bed=VisuMZ['BattleCore'][_0x17afe2(0x59e)]['PartyCmd'][_0x17afe2(0x98f)],_0x2f0ba4=_0x47e736===_0x17afe2(0x7c2)?TextManager['autoBattle']:'\x5cI[%1]%2'['format'](_0x473bed,TextManager[_0x17afe2(0x381)]),_0x1044bd=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x2f0ba4,'autoBattle',_0x1044bd);},Window_ActorCommand['prototype'][_0x46ffcc(0x6ed)]=function(){return!![];},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x38b)]=function(){const _0x8fe3ee=_0x46ffcc;return VisuMZ['BattleCore'][_0x8fe3ee(0x59e)][_0x8fe3ee(0x8a1)]['CmdTextAlign'];},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x37f)]=function(_0x26f34f){const _0x15f95a=_0x46ffcc,_0x246ec8=this[_0x15f95a(0xa1e)](_0x26f34f);if(_0x246ec8===_0x15f95a(0x2f9))this['drawItemStyleIconText'](_0x26f34f);else _0x246ec8===_0x15f95a(0x468)?this['drawItemStyleIcon'](_0x26f34f):Window_Command[_0x15f95a(0x9c1)]['drawItem'][_0x15f95a(0x2e0)](this,_0x26f34f);this[_0x15f95a(0x8bf)](_0x26f34f);},Window_ActorCommand[_0x46ffcc(0x9c1)]['commandStyle']=function(){const _0x40d79e=_0x46ffcc;return VisuMZ[_0x40d79e(0x354)]['Settings']['ActorCmd'][_0x40d79e(0x2c6)];},Window_ActorCommand[_0x46ffcc(0x9c1)]['commandStyleCheck']=function(_0x4fad43){const _0x3ec8e1=_0x46ffcc;if(_0x4fad43<0x0)return _0x3ec8e1(0x7c2);const _0x147fbb=this[_0x3ec8e1(0x91e)]();if(_0x147fbb!==_0x3ec8e1(0x82b))return _0x147fbb;else{if(this[_0x3ec8e1(0xa26)]()>0x0){const _0x6ed74=this[_0x3ec8e1(0x750)](_0x4fad43);if(_0x6ed74[_0x3ec8e1(0xe0)](/\\I\[(\d+)\]/i)){const _0x5efd84=this[_0x3ec8e1(0xb73)](_0x4fad43),_0x6298fa=this[_0x3ec8e1(0x520)](_0x6ed74)[_0x3ec8e1(0x448)];return _0x6298fa<=_0x5efd84['width']?_0x3ec8e1(0x2f9):_0x3ec8e1(0x468);}}}return _0x3ec8e1(0x7c2);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x292)]=function(_0x18899d){const _0x2381dc=_0x46ffcc,_0x2d677d=this[_0x2381dc(0xb73)](_0x18899d),_0x1f0f23=this[_0x2381dc(0x750)](_0x18899d),_0x25a1ab=this[_0x2381dc(0x520)](_0x1f0f23)[_0x2381dc(0x448)];this[_0x2381dc(0x12b)](this[_0x2381dc(0x1b2)](_0x18899d));const _0x1ea969=this[_0x2381dc(0x38b)]();if(_0x1ea969===_0x2381dc(0xa36))this['drawTextEx'](_0x1f0f23,_0x2d677d['x']+_0x2d677d['width']-_0x25a1ab,_0x2d677d['y'],_0x25a1ab);else{if(_0x1ea969==='center'){const _0x144775=_0x2d677d['x']+Math['floor']((_0x2d677d[_0x2381dc(0x448)]-_0x25a1ab)/0x2);this[_0x2381dc(0x4b9)](_0x1f0f23,_0x144775,_0x2d677d['y'],_0x25a1ab);}else this[_0x2381dc(0x4b9)](_0x1f0f23,_0x2d677d['x'],_0x2d677d['y'],_0x25a1ab);}},Window_ActorCommand['prototype'][_0x46ffcc(0xb90)]=function(_0x4482cc){const _0xa05c2d=_0x46ffcc;this['commandName'](_0x4482cc)[_0xa05c2d(0xe0)](/\\I\[(\d+)\]/i);const _0x563b4e=Number(RegExp['$1'])||0x0,_0x5125c5=this['itemLineRect'](_0x4482cc),_0x2cf075=_0x5125c5['x']+Math[_0xa05c2d(0x27a)]((_0x5125c5[_0xa05c2d(0x448)]-ImageManager['iconWidth'])/0x2),_0x8e3338=_0x5125c5['y']+(_0x5125c5[_0xa05c2d(0x212)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x563b4e,_0x2cf075,_0x8e3338);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x8bf)]=function(_0x15c922){const _0x160440=_0x46ffcc;if(!(VisuMZ[_0x160440(0x354)][_0x160440(0x59e)][_0x160440(0x8a1)][_0x160440(0x3f1)]??!![]))return;const _0x1fe957=this[_0x160440(0x912)](_0x15c922);if(!['attack',_0x160440(0x644),'singleSkill']['includes'](_0x1fe957))return;const _0x840e16=this['itemLineRect'](_0x15c922);let _0x44c7ab=null;if(_0x1fe957===_0x160440(0x68b))_0x44c7ab=$dataSkills[this[_0x160440(0x449)][_0x160440(0x722)]()];else _0x1fe957==='guard'?_0x44c7ab=$dataSkills[this[_0x160440(0x449)]['guardSkillId']()]:_0x44c7ab=$dataSkills[this[_0x160440(0xa7e)][_0x15c922][_0x160440(0xa5d)]];this[_0x160440(0x4c4)](this['_actor'],_0x44c7ab,_0x840e16['x'],_0x840e16['y'],_0x840e16[_0x160440(0x448)]);},Window_ActorCommand['prototype'][_0x46ffcc(0x4c4)]=function(_0x56fb99,_0x4fb5af,_0x19cf84,_0x3386f9,_0xcc15da){const _0x1d190a=_0x46ffcc;if(!_0x4fb5af)return;Imported[_0x1d190a(0x179)]?Window_Command[_0x1d190a(0x9c1)]['drawSkillCost']['call'](this,_0x56fb99,_0x4fb5af,_0x19cf84,_0x3386f9,_0xcc15da):Window_SkillList[_0x1d190a(0x9c1)]['drawSkillCost']['call'](this,_0x4fb5af,_0x19cf84,_0x3386f9,_0xcc15da);},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x369)]=function(){},Window_ActorCommand[_0x46ffcc(0x9c1)]['activate']=function(){const _0x47f79c=_0x46ffcc;Window_Command[_0x47f79c(0x9c1)]['activate'][_0x47f79c(0x2e0)](this);const _0x51081f=this[_0x47f79c(0x154)]();_0x51081f==='border'&&this[_0x47f79c(0x386)]();},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x154)]=function(){const _0xc73be=_0x46ffcc;if(this['_battleLayoutStyle'])return this[_0xc73be(0x853)];return this[_0xc73be(0x853)]=SceneManager[_0xc73be(0x5e4)][_0xc73be(0x154)](),this[_0xc73be(0x853)];},VisuMZ[_0x46ffcc(0x354)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)],Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xb64)]=function(_0x5b61ee){const _0x28ec27=_0x46ffcc,_0x650ac1=this[_0x28ec27(0x154)]();if(_0x5b61ee&&['xp',_0x28ec27(0x1cd)]['includes'](_0x650ac1))this[_0x28ec27(0x29a)](_0x5b61ee);else _0x5b61ee&&['border']['includes'](_0x650ac1)&&(this['resizeWindowBorderStyle'](_0x5b61ee),this[_0x28ec27(0x386)]());VisuMZ['BattleCore']['Window_ActorCommand_setup']['call'](this,_0x5b61ee),_0x5b61ee&&$gameTroop[_0x28ec27(0x312)]()[_0x28ec27(0x9bf)]>0x0&&_0x5b61ee[_0x28ec27(0x430)]()&&_0x5b61ee[_0x28ec27(0x430)]()[_0x28ec27(0x573)]();},Window_ActorCommand['prototype'][_0x46ffcc(0x29a)]=function(_0x50a0ba){const _0x1053d3=_0x46ffcc,_0x36771f=VisuMZ[_0x1053d3(0x354)][_0x1053d3(0x59e)]['BattleLayout'][_0x1053d3(0x5bc)],_0x5e24a6=Math[_0x1053d3(0x6da)](Graphics[_0x1053d3(0xab3)]/0x3),_0x3d2cb7=Math[_0x1053d3(0x6da)](Graphics[_0x1053d3(0xab3)]/$gameParty[_0x1053d3(0xbdb)]()[_0x1053d3(0x9bf)]),_0x4bed47=Math[_0x1053d3(0x148)](Math['min'](_0x5e24a6,_0x3d2cb7),_0x36771f),_0x55b4af=this[_0x1053d3(0x797)](VisuMZ[_0x1053d3(0x354)][_0x1053d3(0x59e)]['BattleLayout']['XPActorCommandLines']),_0x47c9dd=Math[_0x1053d3(0x27a)]((Graphics[_0x1053d3(0xab3)]-Graphics[_0x1053d3(0x448)])/0x2),_0x34268d=Graphics[_0x1053d3(0xab3)]-_0x47c9dd,_0x59a398=(Math[_0x1053d3(0x6da)](_0x3d2cb7*_0x50a0ba[_0x1053d3(0x29e)]())+Math[_0x1053d3(0x6da)]((_0x3d2cb7-_0x4bed47)/0x2))[_0x1053d3(0xae8)](_0x47c9dd,_0x34268d-_0x4bed47),_0x4090df=Math[_0x1053d3(0x6da)](SceneManager[_0x1053d3(0x5e4)][_0x1053d3(0x7d9)]['y']-_0x55b4af);this[_0x1053d3(0x43b)](_0x59a398,_0x4090df,_0x4bed47,_0x55b4af),this[_0x1053d3(0x963)](),this[_0x1053d3(0x9cb)](0x1);},Window_ActorCommand['prototype'][_0x46ffcc(0x687)]=function(_0x5b78e6){const _0x1738eb=_0x46ffcc,_0x766fea=SceneManager[_0x1738eb(0x5e4)][_0x1738eb(0x2df)]();this[_0x1738eb(0x43b)](_0x766fea['x'],_0x766fea['y'],_0x766fea[_0x1738eb(0x448)],_0x766fea[_0x1738eb(0x212)]),this['createContents'](),this[_0x1738eb(0x9cb)](0x0);},Window_ActorCommand[_0x46ffcc(0x9c1)]['refreshDimmerBitmap']=function(){const _0x8379be=_0x46ffcc;if(this[_0x8379be(0x6bd)]){const _0x39c0eb=this[_0x8379be(0x6bd)][_0x8379be(0x267)],_0x4756b1=this['width']-0x8,_0x3f3778=this[_0x8379be(0x212)],_0x4d4f5b=this['padding'],_0x3b751f=ColorManager[_0x8379be(0x229)](),_0xf5900d=ColorManager['dimColor2']();this[_0x8379be(0x6bd)]['x']=0x4,_0x39c0eb[_0x8379be(0x313)](_0x4756b1,_0x3f3778),_0x39c0eb[_0x8379be(0x2c0)](0x0,0x0,_0x4756b1,_0x4d4f5b,_0xf5900d,_0x3b751f,!![]),_0x39c0eb['fillRect'](0x0,_0x4d4f5b,_0x4756b1,_0x3f3778-_0x4d4f5b*0x2,_0x3b751f),_0x39c0eb[_0x8379be(0x2c0)](0x0,_0x3f3778-_0x4d4f5b,_0x4756b1,_0x4d4f5b,_0x3b751f,_0xf5900d,!![]),this[_0x8379be(0x6bd)]['setFrame'](0x0,0x0,_0x4756b1,_0x3f3778);}},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x885)]=function(){const _0x3251f8=_0x46ffcc;if(!this[_0x3251f8(0x449)])return;const _0x154f9e=VisuMZ[_0x3251f8(0x354)][_0x3251f8(0x59e)][_0x3251f8(0x8a1)],_0x58d44a=this[_0x3251f8(0x3f5)]();switch(_0x58d44a){case _0x3251f8(0x68b):this[_0x3251f8(0x6cc)]($dataSkills[this[_0x3251f8(0x449)][_0x3251f8(0x722)]()]);break;case _0x3251f8(0x644):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x3251f8(0x9c5)]()]);break;case _0x3251f8(0x8ad):const _0x32a7ec=_0x154f9e[_0x3251f8(0xb1a)],_0x27ddcb=_0x32a7ec[_0x3251f8(0x498)]($dataSystem[_0x3251f8(0xad8)][this['currentExt']()]);this[_0x3251f8(0x76e)][_0x3251f8(0xa8d)](_0x27ddcb);break;case _0x3251f8(0x4c3):this[_0x3251f8(0x6cc)]($dataSkills[this[_0x3251f8(0x7ec)]()]);break;case _0x3251f8(0x50d):this[_0x3251f8(0x76e)][_0x3251f8(0xa8d)](_0x154f9e[_0x3251f8(0x8af)]);break;case _0x3251f8(0x4c9):this['_helpWindow'][_0x3251f8(0xa8d)](_0x154f9e['HelpEscape']);break;case _0x3251f8(0x381):this[_0x3251f8(0x76e)][_0x3251f8(0xa8d)](_0x154f9e['HelpAutoBattle']);break;case _0x3251f8(0xa7d):this[_0x3251f8(0x76e)][_0x3251f8(0xa8d)](Window_InBattleStatus[_0x3251f8(0x9b9)][_0x3251f8(0x26a)]);break;default:this['_helpWindow'][_0x3251f8(0xa8d)]('');break;}},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0x10d)]=function(){const _0x11c369=_0x46ffcc;this[_0x11c369(0x4a6)](0x0);if(this['_actor']&&ConfigManager['commandRemember']){const _0x4f206a=this[_0x11c369(0x449)][_0x11c369(0x299)]();this['selectSymbol'](_0x4f206a);if(_0x4f206a==='skill'){const _0x37a376=this[_0x11c369(0x449)][_0x11c369(0x194)]();if(_0x37a376){const _0x271a4f=this['findSymbolExt'](_0x11c369(0x8ad),_0x37a376['stypeId']);this[_0x11c369(0x41f)](_0x271a4f||0x0);}}else{if(_0x4f206a===_0x11c369(0x4c3)){const _0x282b7b=this['_actor'][_0x11c369(0x194)]();if(_0x282b7b){const _0x276dd3=this[_0x11c369(0xea)](_0x11c369(0x4c3),_0x282b7b['id']);this[_0x11c369(0x41f)](_0x276dd3||0x0);}}}}},Window_ActorCommand[_0x46ffcc(0x9c1)][_0x46ffcc(0xea)]=function(_0x215ba0,_0x4bb504){const _0x151b4c=_0x46ffcc;return this[_0x151b4c(0xa7e)][_0x151b4c(0x31f)](_0x29e9af=>_0x29e9af['symbol']===_0x215ba0&&_0x29e9af[_0x151b4c(0xa5d)]===_0x4bb504);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x69f)]=Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x53aafc){const _0x49d242=_0x46ffcc;VisuMZ[_0x49d242(0x354)][_0x49d242(0x69f)][_0x49d242(0x2e0)](this,_0x53aafc),this['initBattleCore'](),this[_0x49d242(0x4f5)]();},Window_BattleStatus['prototype'][_0x46ffcc(0x154)]=function(){const _0x7f58cd=_0x46ffcc;if(this[_0x7f58cd(0x853)])return this[_0x7f58cd(0x853)];return this[_0x7f58cd(0x853)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f0)]=function(){const _0x203a5d=_0x46ffcc;this['frameVisible']=this[_0x203a5d(0x3c9)]();const _0x5a9cca=VisuMZ[_0x203a5d(0x354)][_0x203a5d(0x59e)][_0x203a5d(0x31c)];_0x5a9cca[_0x203a5d(0x60a)]&&(this[_0x203a5d(0x2a4)]=0x0);},Window_BattleStatus['prototype'][_0x46ffcc(0x3c9)]=function(){const _0x477798=_0x46ffcc,_0x2c746f=VisuMZ[_0x477798(0x354)]['Settings'][_0x477798(0x31c)];if(_0x2c746f['StatusWindowSkinFilename'])return!![];const _0x5427f6=this[_0x477798(0x154)]();switch(_0x5427f6){case _0x477798(0x497):case'border':return!![];break;case _0x477798(0x728):case'xp':case _0x477798(0x1cd):default:return![];break;}},Window_BattleStatus['prototype'][_0x46ffcc(0xb9f)]=function(){const _0x1743c9=_0x46ffcc;return this[_0x1743c9(0x3c9)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x46ffcc(0x7a4)]=function(){const _0x5ea32d=_0x46ffcc,_0x2d3043=this[_0x5ea32d(0x154)]();switch(_0x2d3043){case _0x5ea32d(0x497):return 0x1;break;case'xp':case _0x5ea32d(0x1cd):return $gameParty[_0x5ea32d(0xbdb)]()[_0x5ea32d(0x9bf)];break;case _0x5ea32d(0x728):default:return $gameParty[_0x5ea32d(0x2ae)]();break;}},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x942)]=function(){const _0x43a290=_0x46ffcc,_0x25e8c1=this[_0x43a290(0x154)]();switch(_0x25e8c1){case'list':return Window_StatusBase[_0x43a290(0x9c1)][_0x43a290(0x942)]['call'](this);break;case _0x43a290(0x728):case'xp':case'portrait':default:return this[_0x43a290(0xb7b)];break;}},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x7ac)]=function(){const _0x5c1190=_0x46ffcc,_0x5afc3c=this['battleLayoutStyle']();switch(_0x5afc3c){case'list':return Window_StatusBase[_0x5c1190(0x9c1)]['rowSpacing'][_0x5c1190(0x2e0)](this);break;case _0x5c1190(0x728):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x46ffcc(0x9c1)]['updatePadding']=function(){const _0x276aa2=_0x46ffcc;this[_0x276aa2(0x3c9)]()?Window_StatusBase[_0x276aa2(0x9c1)][_0x276aa2(0x882)]['call'](this):this[_0x276aa2(0x579)]=0x8;},Window_BattleStatus['prototype'][_0x46ffcc(0x66b)]=function(){const _0x2d4622=_0x46ffcc,_0x5a479b=VisuMZ[_0x2d4622(0x354)][_0x2d4622(0x59e)][_0x2d4622(0x31c)];_0x5a479b[_0x2d4622(0x932)]?this['windowskin']=ImageManager[_0x2d4622(0x8c4)](_0x5a479b[_0x2d4622(0x932)]):Window_StatusBase[_0x2d4622(0x9c1)][_0x2d4622(0x66b)][_0x2d4622(0x2e0)](this);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x9ef)]=function(_0x4856e7){const _0x1c3230=_0x46ffcc,_0x4493a4=VisuMZ[_0x1c3230(0x354)][_0x1c3230(0x59e)]['BattleLayout'];if(_0x4493a4[_0x1c3230(0x227)])return;Window_StatusBase['prototype'][_0x1c3230(0x9ef)]['call'](this,_0x4856e7);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x710)]=function(){const _0x354e21=_0x46ffcc;this[_0x354e21(0xb6d)]=!![];},Window_BattleStatus['prototype'][_0x46ffcc(0x881)]=function(){const _0x25fb4b=_0x46ffcc;Window_StatusBase['prototype'][_0x25fb4b(0x881)][_0x25fb4b(0x2e0)](this),this[_0x25fb4b(0x211)](),this[_0x25fb4b(0x374)]();if(this[_0x25fb4b(0x154)]()===_0x25fb4b(0x245))this[_0x25fb4b(0xbe5)]();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x211)]=function(){const _0x436fc7=_0x46ffcc;if($gameTemp[_0x436fc7(0x279)]())this[_0x436fc7(0x508)](),this['_requestRefresh']=![],$gameTemp[_0x436fc7(0x65b)]();else this[_0x436fc7(0xb6d)]&&(this[_0x436fc7(0xb6d)]=![],this[_0x436fc7(0xb53)](),this[_0x436fc7(0x97b)]());},Window_BattleStatus[_0x46ffcc(0x9c1)]['show']=function(){const _0x2fed9c=_0x46ffcc;Window_StatusBase[_0x2fed9c(0x9c1)][_0x2fed9c(0xbc8)]['call'](this);if(!$gameSystem[_0x2fed9c(0x5c0)]())this[_0x2fed9c(0xb53)]();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x369)]=function(){const _0x76d603=_0x46ffcc;if(this[_0x76d603(0x42f)]===Window_BattleStatus)return;Window_StatusBase['prototype']['hide'][_0x76d603(0x2e0)](this);},Window_BattleStatus[_0x46ffcc(0x9c1)]['drawBackgroundRect']=function(_0x17ac53){const _0x31a4db=_0x46ffcc,_0x961867=this[_0x31a4db(0x154)]();switch(_0x961867){case'xp':case _0x31a4db(0x1cd):break;case _0x31a4db(0x728):case _0x31a4db(0x497):case'border':default:return Window_StatusBase[_0x31a4db(0x9c1)]['drawBackgroundRect'][_0x31a4db(0x2e0)](this,_0x17ac53);break;}},VisuMZ['BattleCore'][_0x46ffcc(0x377)]=Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x2b3)],Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x2b3)]=function(_0x1a773e){const _0x1b5d8d=_0x46ffcc,_0xb33bd7=this[_0x1b5d8d(0x154)]();switch(_0xb33bd7){case'list':this['drawItemImageListStyle'](_0x1a773e);break;case'xp':this[_0x1b5d8d(0x20e)](_0x1a773e);break;case _0x1b5d8d(0x1cd):this[_0x1b5d8d(0x8b4)](_0x1a773e);break;case'default':case _0x1b5d8d(0x245):default:VisuMZ[_0x1b5d8d(0x354)][_0x1b5d8d(0x377)][_0x1b5d8d(0x2e0)](this,_0x1a773e);break;}},Window_BattleStatus[_0x46ffcc(0x9c1)]['drawItemStatus']=function(_0x496acb){const _0x4d59c2=_0x46ffcc,_0x5c9c4a=this[_0x4d59c2(0x154)]();if(!$gameSystem[_0x4d59c2(0x5c0)]())this[_0x4d59c2(0xb42)](_0x496acb);switch(_0x5c9c4a){case _0x4d59c2(0x497):this[_0x4d59c2(0xbcc)](_0x496acb);break;case'xp':case'portrait':case _0x4d59c2(0x728):case _0x4d59c2(0x245):default:this[_0x4d59c2(0xae0)](_0x496acb);break;}},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x163)]=function(){const _0x5e7582=_0x46ffcc,_0x3eabb2=this[_0x5e7582(0x154)]();if(['xp'][_0x5e7582(0x6a2)](_0x3eabb2)&&!$gameSystem[_0x5e7582(0x5c0)]()){this[_0x5e7582(0x3a4)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x5e7582(0x9c1)][_0x5e7582(0x163)]['call'](this);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xb42)]=function(_0x52c323){const _0x5c8a21=_0x46ffcc,_0x2907d5=this['actor'](_0x52c323)[_0x5c8a21(0x430)]();if(!_0x2907d5)return;const _0x28a3c0=this[_0x5c8a21(0x154)](),_0x2e9116=this[_0x5c8a21(0x6ac)](_0x52c323);let _0x1ca4f8=Math[_0x5c8a21(0x6da)](_0x2e9116['x']+_0x2e9116[_0x5c8a21(0x448)]/0x2)+this[_0x5c8a21(0x579)];[_0x5c8a21(0x497)]['includes'](_0x28a3c0)&&(_0x1ca4f8=_0x2e9116[_0x5c8a21(0x448)]/$gameParty[_0x5c8a21(0xbdb)]()['length'],_0x1ca4f8*=_0x52c323,_0x1ca4f8+=_0x2e9116['width']/$gameParty[_0x5c8a21(0xbdb)]()['length']/0x2);let _0xa700fb=Math['round'](this[_0x5c8a21(0x6f5)](_0x52c323,_0x2907d5,_0x2e9116));_0x2907d5[_0x5c8a21(0x49c)](_0x1ca4f8,_0xa700fb),this[_0x5c8a21(0x8c8)](_0x2907d5,0x1),_0x2907d5[_0x5c8a21(0xbc8)](),this['updateEffectsContainer'](),this[_0x5c8a21(0x97b)]();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x6f5)]=function(_0x297b28,_0x838519,_0x5a5705){const _0x27e3dd=_0x46ffcc,_0x4ee54c=VisuMZ['BattleCore'][_0x27e3dd(0x59e)]['BattleLayout'],_0x2adb88=this[_0x27e3dd(0x154)]();if(_0x2adb88==='xp'){const _0x4c7820=_0x4ee54c[_0x27e3dd(0x965)];switch(_0x4c7820['toLowerCase']()[_0x27e3dd(0xafd)]()){case _0x27e3dd(0x271):return _0x5a5705[_0x27e3dd(0x212)]-_0x838519['_shadowSprite'][_0x27e3dd(0x212)]/0x4;break;case _0x27e3dd(0x7bf):const _0x24fd6e=_0x4ee54c[_0x27e3dd(0x9b8)];return(_0x5a5705['height']+(_0x838519[_0x27e3dd(0x212)]||_0x24fd6e))/0x2;break;case _0x27e3dd(0x27c):return 0x0;case _0x27e3dd(0x1a8):default:return this[_0x27e3dd(0x476)](_0x5a5705);break;}}else{if(_0x2adb88===_0x27e3dd(0x1cd)){}}return _0x838519['height'];},Sprite_Name['prototype'][_0x46ffcc(0xb0f)]=function(){return 0x24;},Sprite_Name['prototype'][_0x46ffcc(0x3b7)]=function(){const _0x379d7b=_0x46ffcc,_0x4b7a0a=this[_0x379d7b(0x1a8)](),_0x4c8311=this['bitmapWidth'](),_0x412042=this[_0x379d7b(0xb0f)]();this[_0x379d7b(0x92e)](),this[_0x379d7b(0x267)][_0x379d7b(0x91f)](),this[_0x379d7b(0x267)]['drawTextTopAligned'](_0x4b7a0a,0x4,0x0,_0x4c8311,_0x412042,_0x379d7b(0x9f3));},Bitmap['prototype'][_0x46ffcc(0x65c)]=function(_0x163d13,_0x341139,_0x48c0fb,_0x4b9c44,_0x333ae4,_0x130fcd){const _0x1ea061=_0x46ffcc;TextManager['parseLocalizedText']&&(_0x163d13=TextManager[_0x1ea061(0x222)](_0x163d13));const _0x1c5f3b=this['context'],_0x5eeea2=_0x1c5f3b['globalAlpha'];_0x4b9c44=_0x4b9c44||0xffffffff;let _0x46e709=_0x341139,_0xa80972=Math['round'](_0x48c0fb+0x18/0x2+this['fontSize']*0.35);_0x130fcd===_0x1ea061(0x7bf)&&(_0x46e709+=_0x4b9c44/0x2),_0x130fcd===_0x1ea061(0xa36)&&(_0x46e709+=_0x4b9c44),_0x1c5f3b[_0x1ea061(0x4c7)](),_0x1c5f3b[_0x1ea061(0x39f)]=this[_0x1ea061(0x96e)](),_0x1c5f3b[_0x1ea061(0x94c)]=_0x130fcd,_0x1c5f3b[_0x1ea061(0x2f7)]=_0x1ea061(0x393),_0x1c5f3b[_0x1ea061(0x8ea)]=0x1,this[_0x1ea061(0x9c7)](_0x163d13,_0x46e709,_0xa80972,_0x4b9c44),_0x1c5f3b[_0x1ea061(0x8ea)]=_0x5eeea2,this[_0x1ea061(0xaab)](_0x163d13,_0x46e709,_0xa80972,_0x4b9c44),_0x1c5f3b[_0x1ea061(0x4ea)](),this[_0x1ea061(0x826)][_0x1ea061(0x881)]();},Window_BattleStatus['prototype'][_0x46ffcc(0x476)]=function(_0x162598){const _0x278b2a=_0x46ffcc;return this[_0x278b2a(0xbcd)](_0x162598)-this[_0x278b2a(0x8ff)]();},Window_BattleStatus[_0x46ffcc(0x9c1)]['drawItemImageListStyle']=function(_0x3d814b){const _0x13bcf0=_0x46ffcc;if(!VisuMZ[_0x13bcf0(0x354)][_0x13bcf0(0x59e)][_0x13bcf0(0x31c)]['ShowFacesListStyle'])return;const _0x51ba39=this[_0x13bcf0(0xb81)](_0x3d814b),_0x11a4b8=this[_0x13bcf0(0x6ac)](_0x3d814b);_0x11a4b8[_0x13bcf0(0x448)]=ImageManager[_0x13bcf0(0x35b)],_0x11a4b8[_0x13bcf0(0x212)]-=0x2,this['drawActorFace'](_0x51ba39,_0x11a4b8['x']+0x1,_0x11a4b8['y']+0x1,_0x11a4b8[_0x13bcf0(0x448)],_0x11a4b8[_0x13bcf0(0x212)]);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xbcc)]=function(_0x3760e9){const _0x2ef9fe=_0x46ffcc,_0x420213=VisuMZ[_0x2ef9fe(0x354)][_0x2ef9fe(0x59e)][_0x2ef9fe(0x31c)],_0x348915=$dataSystem[_0x2ef9fe(0xae6)]?0x4:0x3,_0xb280ea=_0x348915*0x80+(_0x348915-0x1)*0x8+0x4,_0x3492ba=this['actor'](_0x3760e9),_0x77780b=this[_0x2ef9fe(0x6ac)](_0x3760e9);let _0x4a948b=_0x77780b['x']+this[_0x2ef9fe(0x579)];_0x420213[_0x2ef9fe(0x50a)]?_0x4a948b=_0x77780b['x']+ImageManager['faceWidth']+0x8:_0x4a948b+=ImageManager[_0x2ef9fe(0x911)];const _0x4efc25=Math[_0x2ef9fe(0x6da)](Math[_0x2ef9fe(0x4d8)](_0x77780b['x']+_0x77780b['width']-_0xb280ea,_0x4a948b)),_0x449514=Math[_0x2ef9fe(0x6da)](_0x77780b['y']+(_0x77780b['height']-Sprite_Name[_0x2ef9fe(0x9c1)][_0x2ef9fe(0xb0f)]())/0x2),_0xf9a8d9=Math[_0x2ef9fe(0x6da)](_0x4efc25-ImageManager['iconWidth']/0x2-0x4),_0x3422a1=Math['round'](_0x77780b['y']+(_0x77780b[_0x2ef9fe(0x212)]-ImageManager[_0x2ef9fe(0x96b)])/0x2+ImageManager[_0x2ef9fe(0x96b)]/0x2);let _0x156f43=_0x4efc25+0x88;const _0x2c650d=_0x449514;this[_0x2ef9fe(0xaa3)](_0x3492ba,_0x4efc25-0x4+(_0x420213['TpbGaugeOffsetX']||0x0),_0x449514+(_0x420213['TpbGaugeOffsetY']||0x0)),this[_0x2ef9fe(0x252)](_0x3492ba,_0x4efc25+(_0x420213[_0x2ef9fe(0x38c)]||0x0),_0x449514+(_0x420213[_0x2ef9fe(0x400)]||0x0)),this[_0x2ef9fe(0xa53)](_0x3492ba,_0xf9a8d9+(_0x420213['StateIconOffsetX']||0x0),_0x3422a1+(_0x420213[_0x2ef9fe(0x9b1)]||0x0)),this[_0x2ef9fe(0xb93)](_0x3492ba,'hp',_0x156f43+0x88*0x0+(_0x420213['HpGaugeOffsetX']||0x0),_0x2c650d+(_0x420213[_0x2ef9fe(0x3f3)]||0x0)),this[_0x2ef9fe(0xb93)](_0x3492ba,'mp',_0x156f43+0x88*0x1+(_0x420213[_0x2ef9fe(0x807)]||0x0),_0x2c650d+(_0x420213['MpGaugeOffsetY']||0x0)),$dataSystem[_0x2ef9fe(0xae6)]&&this[_0x2ef9fe(0xb93)](_0x3492ba,'tp',_0x156f43+0x88*0x2+(_0x420213[_0x2ef9fe(0x995)]||0x0),_0x2c650d+(_0x420213[_0x2ef9fe(0xa3b)]||0x0));},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x20e)]=function(_0x3a2593){const _0xd224eb=_0x46ffcc;if(!$gameSystem[_0xd224eb(0x5c0)]())return;VisuMZ[_0xd224eb(0x354)]['Window_BattleStatus_drawItemImage'][_0xd224eb(0x2e0)](this,_0x3a2593);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xae0)]=function(_0x4ad2b8){const _0x5344c7=_0x46ffcc,_0x5d6dd8=VisuMZ[_0x5344c7(0x354)]['Settings'][_0x5344c7(0x31c)],_0x113e9e=this[_0x5344c7(0xb81)](_0x4ad2b8),_0x35f635=this[_0x5344c7(0x6ac)](_0x4ad2b8),_0x774263=Math[_0x5344c7(0x6da)](_0x35f635['x']+(_0x35f635[_0x5344c7(0x448)]-0x80)/0x2),_0x4112dd=this[_0x5344c7(0x476)](_0x35f635);let _0x19ec2c=_0x774263-ImageManager[_0x5344c7(0x911)]/0x2-0x4,_0xc7e69f=_0x4112dd+ImageManager[_0x5344c7(0x96b)]/0x2;_0x19ec2c-ImageManager[_0x5344c7(0x911)]/0x2<_0x35f635['x']&&(_0x19ec2c=_0x774263+ImageManager[_0x5344c7(0x911)]/0x2-0x4,_0xc7e69f=_0x4112dd-ImageManager[_0x5344c7(0x96b)]/0x2);const _0x36eb29=_0x774263,_0x11368d=this[_0x5344c7(0xbcd)](_0x35f635);this['placeTimeGauge'](_0x113e9e,_0x774263+(_0x5d6dd8['TpbGaugeOffsetX']||0x0),_0x4112dd+(_0x5d6dd8[_0x5344c7(0x55c)]||0x0)),this[_0x5344c7(0x252)](_0x113e9e,_0x774263+(_0x5d6dd8[_0x5344c7(0x38c)]||0x0),_0x4112dd+(_0x5d6dd8['NameOffsetY']||0x0)),this[_0x5344c7(0xa53)](_0x113e9e,_0x19ec2c+(_0x5d6dd8[_0x5344c7(0x127)]||0x0),_0xc7e69f+(_0x5d6dd8['StateIconOffsetY']||0x0)),this[_0x5344c7(0xb93)](_0x113e9e,'hp',_0x36eb29+(_0x5d6dd8[_0x5344c7(0x1b0)]||0x0),_0x11368d+(_0x5d6dd8[_0x5344c7(0x3f3)]||0x0)),this[_0x5344c7(0xb93)](_0x113e9e,'mp',_0x36eb29+(_0x5d6dd8[_0x5344c7(0x807)]||0x0),_0x11368d+this['gaugeLineHeight']()+(_0x5d6dd8['MpGaugeOffsetY']||0x0)),$dataSystem[_0x5344c7(0xae6)]&&this[_0x5344c7(0xb93)](_0x113e9e,'tp',_0x36eb29+(_0x5d6dd8['TpGaugeOffsetX']||0x0),_0x11368d+this[_0x5344c7(0x8ff)]()*0x2+(_0x5d6dd8[_0x5344c7(0xa3b)]||0x0));},Window_BattleStatus['prototype'][_0x46ffcc(0x362)]=function(_0x23f5d5){const _0x12d166=_0x46ffcc;if(!VisuMZ[_0x12d166(0x354)][_0x12d166(0x59e)][_0x12d166(0x31c)][_0x12d166(0xaf7)])return![];if(_0x23f5d5[_0x12d166(0xa34)]())return!![];return Imported[_0x12d166(0x6ff)]&&_0x23f5d5['getMenuImage']();},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x5f6)]=function(){const _0x105e67=_0x46ffcc;if(this['actor']()[_0x105e67(0x8fd)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x105e67(0xb81)]()[_0x105e67(0x8fd)][_0x105e67(0xe0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x46ffcc(0x9c1)][_0x46ffcc(0x78a)]=function(){const _0x2bcc9e=_0x46ffcc;if(this['actor']()[_0x2bcc9e(0x8fd)][_0x2bcc9e(0xe0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2bcc9e(0xb81)]()[_0x2bcc9e(0x8fd)][_0x2bcc9e(0xe0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x8b4)]=function(_0x1e81dd){const _0x3fa02e=_0x46ffcc,_0xb9af71=this[_0x3fa02e(0xb81)](_0x1e81dd);if(this[_0x3fa02e(0x362)](_0xb9af71)){const _0x274983=_0x3fa02e(0x84f)[_0x3fa02e(0x498)](_0xb9af71['actorId']()),_0x4f87c1=this[_0x3fa02e(0x883)](_0x274983,Sprite),_0x1a223d=_0xb9af71[_0x3fa02e(0xb01)]();_0x1a223d!==''?_0x4f87c1[_0x3fa02e(0x267)]=ImageManager[_0x3fa02e(0x907)](_0x1a223d):_0x4f87c1[_0x3fa02e(0x267)]=ImageManager['_emptyBitmap'];const _0xd19ecb=this[_0x3fa02e(0x6ac)](_0x1e81dd);_0x4f87c1['anchor']['x']=0.5,_0x4f87c1[_0x3fa02e(0x404)]['y']=0x1;let _0x32713b=Math[_0x3fa02e(0x6da)](_0xd19ecb['x']+_0xd19ecb[_0x3fa02e(0x448)]/0x2)+this[_0x3fa02e(0x579)];_0x32713b+=_0xb9af71[_0x3fa02e(0x5f6)]();let _0x44d151=Math[_0x3fa02e(0x6da)](this[_0x3fa02e(0x212)]);_0x44d151+=_0xb9af71['getBattlePortraitOffsetY'](),_0x4f87c1['move'](_0x32713b,_0x44d151);const _0x11a804=VisuMZ[_0x3fa02e(0x354)][_0x3fa02e(0x59e)]['BattleLayout']['PortraitScale'];_0x4f87c1[_0x3fa02e(0x3be)]['x']=_0x11a804,_0x4f87c1['scale']['y']=_0x11a804,_0x4f87c1[_0x3fa02e(0xbc8)]();}else{const _0x4b4747=this[_0x3fa02e(0xbde)](_0x1e81dd);this[_0x3fa02e(0x677)](_0xb9af71,_0x4b4747['x'],_0x4b4747['y'],_0x4b4747[_0x3fa02e(0x448)],_0x4b4747[_0x3fa02e(0x212)]);}},Window_BattleStatus['prototype'][_0x46ffcc(0x883)]=function(_0x417a89,_0x37290d){const _0x3579c6=_0x46ffcc,_0x2b137e=this['_additionalSprites'];if(_0x2b137e[_0x417a89])return _0x2b137e[_0x417a89];else{const _0x3e45b9=new _0x37290d();return _0x2b137e[_0x417a89]=_0x3e45b9,this[_0x3579c6(0x5c9)](_0x3e45b9),this[_0x3579c6(0x5c9)](this['_cursorArea']),_0x3e45b9;}},Window_BattleStatus['prototype'][_0x46ffcc(0x76a)]=function(){const _0x2a6e02=_0x46ffcc;this['_createCursorArea'](),this['_createEffectsContainer'](),Window_StatusBase[_0x2a6e02(0x9c1)][_0x2a6e02(0x76a)]['call'](this),this[_0x2a6e02(0x109)]();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xa35)]=function(){const _0x25325a=_0x46ffcc;this[_0x25325a(0x86a)]=new Sprite(),this[_0x25325a(0x86a)][_0x25325a(0x974)]=[new PIXI['filters'][(_0x25325a(0x5c7))]()],this[_0x25325a(0x86a)][_0x25325a(0x19d)]=new Rectangle(),this[_0x25325a(0x86a)][_0x25325a(0x43b)](this[_0x25325a(0xab7)],this[_0x25325a(0xab7)]),this[_0x25325a(0xb15)](this[_0x25325a(0x86a)]);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x7ab)]=function(){const _0x5eb113=_0x46ffcc;this[_0x5eb113(0x8eb)]=new Sprite(),this[_0x5eb113(0xb15)](this['_effectsContainer']);},Window_BattleStatus['prototype'][_0x46ffcc(0x68e)]=function(){const _0x51eb89=_0x46ffcc;this[_0x51eb89(0x8eb)]&&this['addChild'](this[_0x51eb89(0x8eb)]);},Window_BattleStatus['prototype'][_0x46ffcc(0x109)]=function(){const _0x2e8aa1=_0x46ffcc;this['_damageContainer']=new Sprite(),this['addChild'](this[_0x2e8aa1(0x161)]);},Window_BattleStatus[_0x46ffcc(0x9c1)]['_createCursorSprite']=function(){const _0x2bfb22=_0x46ffcc;this[_0x2bfb22(0x872)]=new Sprite();for(let _0x3fcb98=0x0;_0x3fcb98<0x9;_0x3fcb98++){this[_0x2bfb22(0x872)][_0x2bfb22(0xb15)](new Sprite());}this['_cursorArea'][_0x2bfb22(0xb15)](this['_cursorSprite']);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x770)]=function(){const _0x5efa89=_0x46ffcc;Window_StatusBase[_0x5efa89(0x9c1)][_0x5efa89(0x770)][_0x5efa89(0x2e0)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x46ffcc(0x9c1)]['_updateCursorArea']=function(){const _0x8a6fba=_0x46ffcc,_0x3fbf51=this['_padding'];this[_0x8a6fba(0x86a)][_0x8a6fba(0x43b)](_0x3fbf51,_0x3fbf51),this['_cursorArea']['x']=_0x3fbf51-this[_0x8a6fba(0x6a4)]['x'],this[_0x8a6fba(0x86a)]['y']=_0x3fbf51-this[_0x8a6fba(0x6a4)]['y'],this['innerWidth']>0x0&&this[_0x8a6fba(0xb7b)]>0x0?this[_0x8a6fba(0x86a)][_0x8a6fba(0xa23)]=this[_0x8a6fba(0xb39)]():this['_cursorArea']['visible']=![];},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x150)]=function(){const _0x193148=_0x46ffcc;Window_StatusBase['prototype'][_0x193148(0x150)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x1da)]=function(){const _0xf7db4c=_0x46ffcc,_0x10a5fb=this[_0xf7db4c(0x86a)][_0xf7db4c(0x251)][_0xf7db4c(0xa9f)](new Point(0x0,0x0)),_0x29c477=this[_0xf7db4c(0x86a)][_0xf7db4c(0x19d)];_0x29c477['x']=_0x10a5fb['x']+this['origin']['x'],_0x29c477['y']=_0x10a5fb['y']+this[_0xf7db4c(0x6a4)]['y'],_0x29c477[_0xf7db4c(0x448)]=this['innerWidth'],_0x29c477[_0xf7db4c(0x212)]=this[_0xf7db4c(0xb7b)];},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x56f)]=function(_0x69ebc6){const _0x3a6f96=_0x46ffcc;if(this[_0x3a6f96(0x154)]()!=='portrait')return;this[_0x3a6f96(0x8b4)](_0x69ebc6['index']());},Window_BattleStatus['prototype'][_0x46ffcc(0x2ba)]=function(_0x3ccf09,_0x545203){const _0x35f882=_0x46ffcc;if(!this['_damageContainer'])return;if(!_0x3ccf09)return;if(!_0x545203)return;const _0x2b33c8=this[_0x35f882(0x6ac)](_0x545203[_0x35f882(0x29e)]());_0x2b33c8['x']+=_0x2b33c8[_0x35f882(0x448)]/0x2+this[_0x35f882(0x579)],_0x3ccf09['x']=_0x2b33c8['x'],_0x3ccf09['y']=_0x2b33c8['y'],this[_0x35f882(0x161)][_0x35f882(0xb15)](_0x3ccf09);},Window_BattleStatus[_0x46ffcc(0x9c1)]['removeDamageSprite']=function(_0x162095){const _0x262c7f=_0x46ffcc;if(!this[_0x262c7f(0x161)])return;if(!_0x162095)return;this['_damageContainer'][_0x262c7f(0x7e3)](_0x162095);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xbe5)]=function(){const _0xd4819c=_0x46ffcc;if(!this['isBorderStylePortraitShown']())return;if(!this['_borderPortraitSprite'])this['createBorderStylePortraitSprite']();this[_0xd4819c(0xe4)](),this[_0xd4819c(0x5f0)]();},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x7d8)]=function(){const _0x27d4e7=_0x46ffcc;if(this[_0x27d4e7(0x42f)]!==Window_BattleStatus)return![];if(!SceneManager[_0x27d4e7(0xaf2)]())return![];return VisuMZ[_0x27d4e7(0x354)][_0x27d4e7(0x59e)][_0x27d4e7(0x31c)][_0x27d4e7(0x628)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0xc5a2ae=_0x46ffcc;this[_0xc5a2ae(0x46e)]=new Sprite();const _0x5c2342=SceneManager['_scene'],_0x2ea5e3=_0x5c2342['children']['indexOf'](_0x5c2342[_0xc5a2ae(0x6eb)]);_0x5c2342['addChildAt'](this[_0xc5a2ae(0x46e)],_0x2ea5e3),this['_borderPortraitSprite'][_0xc5a2ae(0x404)]['x']=0.5,this[_0xc5a2ae(0x46e)][_0xc5a2ae(0x404)]['y']=0x1;const _0x5b15a8=VisuMZ['BattleCore'][_0xc5a2ae(0x59e)]['BattleLayout'][_0xc5a2ae(0x786)];this[_0xc5a2ae(0x46e)][_0xc5a2ae(0x3be)]['x']=_0x5b15a8,this['_borderPortraitSprite']['scale']['y']=_0x5b15a8,this[_0xc5a2ae(0x46e)]['y']=this['y']+this['height'],this[_0xc5a2ae(0x58c)]=0x0;},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x364)]=function(){const _0x2431c5=_0x46ffcc;return BattleManager[_0x2431c5(0x5c6)]();},Window_BattleStatus['prototype'][_0x46ffcc(0xe4)]=function(){const _0x51eb3c=_0x46ffcc;this['_borderPortraitSprite']['visible']=this['isBorderPortraitSpriteVisible']();const _0x44e09b=BattleManager['actor'](),_0x8f565f=_0x44e09b?_0x44e09b[_0x51eb3c(0xb01)]()||'':'';if(_0x44e09b===this[_0x51eb3c(0x46e)]['actor']&&_0x8f565f===this[_0x51eb3c(0x46e)]['lastFilename'])return;this['_borderPortraitSprite'][_0x51eb3c(0xb81)]=_0x44e09b||this['_borderPortraitSprite'][_0x51eb3c(0xb81)],this[_0x51eb3c(0x46e)][_0x51eb3c(0x79c)]=_0x8f565f;if(!_0x44e09b)return;else{if(_0x8f565f===''){this['_borderPortraitSprite'][_0x51eb3c(0x267)]=ImageManager[_0x51eb3c(0x747)],this[_0x51eb3c(0x46e)][_0x51eb3c(0x79c)]='';return;}else{const _0xd4c104=ImageManager[_0x51eb3c(0x907)](_0x8f565f);this[_0x51eb3c(0x46e)][_0x51eb3c(0x2a4)]=0x0,_0xd4c104[_0x51eb3c(0xbf3)](this[_0x51eb3c(0x24e)][_0x51eb3c(0x479)](this,_0xd4c104));}}},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x24e)]=function(_0x4e7ab5){const _0x4cac50=_0x46ffcc;this[_0x4cac50(0x58c)]=0x14,this[_0x4cac50(0x46e)][_0x4cac50(0x267)]=_0x4e7ab5;SceneManager[_0x4cac50(0x5e4)][_0x4cac50(0x3d9)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0x4cac50(0x152)]=Math[_0x4cac50(0xa14)](_0x4e7ab5[_0x4cac50(0x448)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x4cac50(0x448)],this[_0x4cac50(0x152)]=this[_0x4cac50(0x448)]*0x3/0x4);this[_0x4cac50(0x46e)][_0x4cac50(0x2a4)]=0x0,this[_0x4cac50(0x46e)]['y']=this['y']+this[_0x4cac50(0x212)];const _0x22ab73=BattleManager['actor']();_0x22ab73&&(this[_0x4cac50(0x152)]+=_0x22ab73[_0x4cac50(0x5f6)](),this[_0x4cac50(0x46e)]['y']+=_0x22ab73['getBattlePortraitOffsetY']());},Window_BattleStatus['prototype'][_0x46ffcc(0x5f0)]=function(){const _0x3cc6d1=_0x46ffcc;if(this[_0x3cc6d1(0x58c)]>0x0){const _0x396864=this[_0x3cc6d1(0x58c)],_0x3bdddb=this[_0x3cc6d1(0x46e)];_0x3bdddb['x']=(_0x3bdddb['x']*(_0x396864-0x1)+this[_0x3cc6d1(0x152)])/_0x396864,_0x3bdddb[_0x3cc6d1(0x2a4)]=(_0x3bdddb[_0x3cc6d1(0x2a4)]*(_0x396864-0x1)+0xff)/_0x396864,this[_0x3cc6d1(0x58c)]--;}},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x374)]=function(){const _0x552b4c=_0x46ffcc;return;this[_0x552b4c(0x8eb)]&&(this['_effectsContainer']['x']=this['x'],this[_0x552b4c(0x8eb)]['y']=this['y']),this[_0x552b4c(0x161)]&&(this[_0x552b4c(0x161)]['x']=this['x'],this[_0x552b4c(0x161)]['y']=this['y']);},Window_BattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x4f5)]=function(){const _0xe64804=_0x46ffcc,_0x2b9d2a=VisuMZ[_0xe64804(0x354)][_0xe64804(0x59e)][_0xe64804(0x31c)];if(_0x2b9d2a[_0xe64804(0x232)]){const _0x174448=new Sprite();_0x174448[_0xe64804(0x267)]=ImageManager[_0xe64804(0x8c4)](_0x2b9d2a[_0xe64804(0x232)]),_0x174448['x']=_0x2b9d2a[_0xe64804(0x655)]||0x0,_0x174448['y']=_0x2b9d2a[_0xe64804(0x795)]||0x0,this[_0xe64804(0x5c9)](_0x174448),this[_0xe64804(0x7a2)]=_0x174448;}if(_0x2b9d2a[_0xe64804(0x9f2)]){const _0x448289=new Sprite();_0x448289[_0xe64804(0x267)]=ImageManager['loadSystem'](_0x2b9d2a['StatusWindowAttachmentFront']),_0x448289['x']=_0x2b9d2a[_0xe64804(0x70d)]||0x0,_0x448289['y']=_0x2b9d2a[_0xe64804(0x4cc)]||0x0,this[_0xe64804(0xb15)](_0x448289),this[_0xe64804(0x610)]=_0x448289;}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x54588d=_0x46ffcc;this['_frontAttachmentSprite']&&this[_0x54588d(0xb15)](this['_frontAttachmentSprite']),this['_backAttachmentSprite']&&this['addChildToBack'](this[_0x54588d(0x7a2)]);},Window_BattleActor['prototype'][_0x46ffcc(0x192)]=function(){return this['isActionSelectionValid']();},Window_BattleActor[_0x46ffcc(0x9c1)]['isActionSelectionValid']=function(){const _0x3e878a=_0x46ffcc,_0x4d4c97=BattleManager[_0x3e878a(0x772)]();if(!_0x4d4c97)return!![];if(!_0x4d4c97[_0x3e878a(0x50d)]())return!![];const _0x4b2a2b=this['actor'](this['index']()),_0x4b1bca=_0x4d4c97[_0x3e878a(0x50d)]()[_0x3e878a(0x8fd)];if(_0x4d4c97[_0x3e878a(0x3b3)]()){if(_0x4b2a2b===BattleManager[_0x3e878a(0xb81)]())return![];}if(_0x4d4c97[_0x3e878a(0xa85)]()){if(!_0x4b2a2b[_0x3e878a(0xb76)]())return![];}if(_0x4d4c97[_0x3e878a(0xac2)]()){if(!_0x4b2a2b['isAlive']())return![];}return!![];},Window_BattleActor[_0x46ffcc(0x9c1)]['setEnemyWindowMode']=function(_0x562cee){this['_enemyWindowMode']=_0x562cee;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb57)]=Window_BattleActor[_0x46ffcc(0x9c1)]['processTouch'],Window_BattleActor[_0x46ffcc(0x9c1)][_0x46ffcc(0xb55)]=function(){const _0x3a83ee=_0x46ffcc;Window_BattleStatus['prototype']['processTouch']['call'](this),this[_0x3a83ee(0x9ec)]?this[_0x3a83ee(0xb2a)]():VisuMZ[_0x3a83ee(0x354)][_0x3a83ee(0xb57)][_0x3a83ee(0x2e0)](this);},Window_BattleActor['prototype'][_0x46ffcc(0xb2a)]=function(){const _0x5d3b03=_0x46ffcc,_0x2a806d=SceneManager[_0x5d3b03(0x5e4)][_0x5d3b03(0x1eb)];if(!_0x2a806d)return;this[_0x5d3b03(0x662)]=![];const _0x3764b1=this[_0x5d3b03(0xaad)]();if(_0x3764b1>=0x0){this[_0x5d3b03(0x41f)](_0x3764b1);if(TouchInput[_0x5d3b03(0x7d5)]()){const _0x19f727=$gameParty['members']()[_0x3764b1],_0x4e7a7f=_0x2a806d[_0x5d3b03(0x14a)][_0x5d3b03(0xb8c)](_0x19f727);_0x4e7a7f>=0x0&&(_0x2a806d['select'](_0x4e7a7f),_0x2a806d[_0x5d3b03(0x4a4)]());}}},Window_BattleActor[_0x46ffcc(0x9c1)][_0x46ffcc(0x342)]=function(){const _0x501dc8=_0x46ffcc;this['_enemyWindowMode']&&(this[_0x501dc8(0x8ee)]++,this[_0x501dc8(0x164)]=!![]);const _0x45b140=Window_BattleStatus[_0x501dc8(0x9c1)][_0x501dc8(0x342)][_0x501dc8(0x2e0)](this);return this['_enemyWindowMode']&&(this[_0x501dc8(0x164)]=![]),_0x45b140;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x42d)]=Window_BattleActor['prototype'][_0x46ffcc(0xbc8)],Window_BattleActor[_0x46ffcc(0x9c1)]['show']=function(){const _0xc7d93c=_0x46ffcc;VisuMZ['BattleCore']['Window_BattleActor_show'][_0xc7d93c(0x2e0)](this);const _0x1e405f=BattleManager['inputtingAction']();if(_0x1e405f){const _0x53d39b=$gameParty[_0xc7d93c(0x312)]();_0x1e405f[_0xc7d93c(0x82c)]()&&_0x53d39b['length']>0x1&&this['setHandler']('pagedown',this[_0xc7d93c(0x3dd)][_0xc7d93c(0x479)](this));}},VisuMZ['BattleCore']['Window_BattleActor_hide']=Window_BattleActor['prototype'][_0x46ffcc(0x369)],Window_BattleActor['prototype'][_0x46ffcc(0x369)]=function(){const _0x386eee=_0x46ffcc;VisuMZ[_0x386eee(0x354)][_0x386eee(0xabf)][_0x386eee(0x2e0)](this),delete this[_0x386eee(0xb0b)]['pageup'],delete this[_0x386eee(0xb0b)][_0x386eee(0x918)];},Window_BattleActor[_0x46ffcc(0x9c1)][_0x46ffcc(0x3dd)]=function(){const _0x438e56=_0x46ffcc,_0x2d0a8c=BattleManager[_0x438e56(0x772)]();if(_0x2d0a8c)_0x2d0a8c['setTargetBattlerKey'](_0x438e56(0xaa5));this[_0x438e56(0x4a4)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb77)]=Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)],Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x374834){const _0x46bf72=_0x46ffcc;this[_0x46bf72(0x1ae)]=null,VisuMZ[_0x46bf72(0x354)][_0x46bf72(0xb77)][_0x46bf72(0x2e0)](this,_0x374834);if(Imported[_0x46bf72(0xad5)]){if(VisuMZ[_0x46bf72(0xb32)][_0x46bf72(0x613)]<1.12){let _0x13ad0b='';_0x13ad0b+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x13ad0b+=_0x46bf72(0x18c),_0x13ad0b+=_0x46bf72(0x96f),alert(_0x13ad0b),SceneManager[_0x46bf72(0x462)]();}}},Window_BattleEnemy[_0x46ffcc(0x9c1)]['maxCols']=function(){const _0x37bb04=_0x46ffcc;return this[_0x37bb04(0xa26)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x75e)]=Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xbc8)],Window_BattleEnemy['prototype']['show']=function(){const _0x64e3a9=_0x46ffcc;VisuMZ[_0x64e3a9(0x354)][_0x64e3a9(0x75e)]['call'](this),this['y']=Graphics[_0x64e3a9(0x212)]*0xa,this[_0x64e3a9(0x326)]()&&this[_0x64e3a9(0x481)]();},VisuMZ['BattleCore']['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x369)],Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x369)]=function(){const _0x1f9446=_0x46ffcc;VisuMZ[_0x1f9446(0x354)][_0x1f9446(0x7b4)][_0x1f9446(0x2e0)](this),$gameParty[_0x1f9446(0x41f)](null),delete this[_0x1f9446(0xb0b)][_0x1f9446(0x332)],delete this[_0x1f9446(0xb0b)]['pagedown'];},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x763)]=function(){const _0x10556f=_0x46ffcc;let _0x171d69=$gameTroop[_0x10556f(0x312)]();const _0x5b3f59=BattleManager[_0x10556f(0x772)]();if(_0x5b3f59){_0x5b3f59[_0x10556f(0x82c)]()&&_0x171d69[_0x10556f(0x9bf)]>0x1&&this[_0x10556f(0x59a)]('pageup',this[_0x10556f(0x18e)][_0x10556f(0x479)](this));if(_0x5b3f59[_0x10556f(0x84e)]()){const _0x3fed53=$gameParty[_0x10556f(0x312)]();_0x171d69=_0x171d69[_0x10556f(0x385)](_0x3fed53),_0x5b3f59[_0x10556f(0x82c)]()&&_0x3fed53[_0x10556f(0x9bf)]>0x1&&this[_0x10556f(0x59a)](_0x10556f(0x918),this[_0x10556f(0x3dd)][_0x10556f(0x479)](this));}}return _0x171d69;},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0x3a9656=_0x46ffcc;this[_0x3a9656(0x14a)]=this[_0x3a9656(0x763)](),this[_0x3a9656(0xaa8)](),Window_Selectable[_0x3a9656(0x9c1)][_0x3a9656(0xb53)]['call'](this);},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xaa8)]=function(){const _0x1b2065=_0x46ffcc;this['_enemies'][_0x1b2065(0xbae)]((_0x20093e,_0x6331b6)=>{const _0x73cf91=_0x1b2065;if(_0x20093e['isActor']()!==_0x6331b6[_0x73cf91(0x738)]()){if(_0x20093e['isEnemy']())return-0x1;if(_0x6331b6[_0x73cf91(0x656)]())return 0x1;}if(_0x20093e[_0x73cf91(0x738)]()&&_0x6331b6[_0x73cf91(0x738)]())return _0x20093e[_0x73cf91(0x29e)]()-_0x6331b6[_0x73cf91(0x29e)]();return _0x20093e[_0x73cf91(0x430)]()[_0x73cf91(0x72f)]===_0x6331b6['battler']()[_0x73cf91(0x72f)]?_0x20093e[_0x73cf91(0x430)]()[_0x73cf91(0x97f)]-_0x6331b6[_0x73cf91(0x430)]()[_0x73cf91(0x97f)]:_0x20093e[_0x73cf91(0x430)]()[_0x73cf91(0x72f)]-_0x6331b6['battler']()[_0x73cf91(0x72f)];}),SceneManager['isBattleFlipped']()&&this[_0x1b2065(0x14a)][_0x1b2065(0x5d4)]();},Window_BattleEnemy['prototype'][_0x46ffcc(0x773)]=function(){const _0x45a2b=_0x46ffcc,_0x31a3c3=VisuMZ[_0x45a2b(0x354)][_0x45a2b(0x59e)]['Enemy'];_0x31a3c3[_0x45a2b(0x19f)]?this[_0x45a2b(0x3a9)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3a9)]=function(){const _0x1372fa=_0x46ffcc,_0x2b0a86=BattleManager[_0x1372fa(0x772)]();if(_0x2b0a86&&_0x2b0a86['isForAnyone']()){if(_0x2b0a86[_0x1372fa(0x3ae)]()){if(this[_0x1372fa(0x830)]&&this[_0x1372fa(0x14a)]['includes'](this['_lastActor'])){const _0x44b294=this[_0x1372fa(0x14a)]['indexOf'](this[_0x1372fa(0x830)]);return this['forceSelect'](_0x44b294);}else return this['autoSelectPriority']();}}if(this[_0x1372fa(0x1ae)]&&this[_0x1372fa(0x14a)][_0x1372fa(0x6a2)](this['_lastEnemy'])){const _0x5032fa=this[_0x1372fa(0x14a)][_0x1372fa(0xb8c)](this[_0x1372fa(0x1ae)]);this[_0x1372fa(0x4a6)](_0x5032fa);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x1be)]=function(){const _0x5e5acd=_0x46ffcc,_0x4c2962=BattleManager[_0x5e5acd(0x772)]();if(_0x4c2962&&_0x4c2962['isForAnyone']()){const _0x20e608=$gameParty['aliveMembers']()[0x0];let _0x5b5a58=this[_0x5e5acd(0x14a)][_0x5e5acd(0xb8c)](_0x20e608);const _0x1d8169=_0x4c2962[_0x5e5acd(0x50d)]()[_0x5e5acd(0x64e)];if(_0x1d8169[_0x5e5acd(0xe0)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x5e5acd(0x4a6)](_0x5b5a58);return;}else{if(_0x1d8169[_0x5e5acd(0xe0)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x5e5acd(0x4a6)](_0x5b5a58-0x1);return;}}}const _0x3b9a96=VisuMZ['BattleCore']['Settings'][_0x5e5acd(0xb8b)];let _0x28c448=![];$gameSystem['isSideView']()?_0x28c448=_0x3b9a96[_0x5e5acd(0xb67)]:_0x28c448=_0x3b9a96[_0x5e5acd(0x29c)],this[_0x5e5acd(0x4a6)](_0x28c448?this[_0x5e5acd(0xa26)]()-0x1:0x0);},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0xbeb)]=function(){const _0x26835c=_0x46ffcc;Window_Selectable[_0x26835c(0x9c1)][_0x26835c(0xbeb)][_0x26835c(0x2e0)](this);if(!this[_0x26835c(0xa55)]())return;if(this[_0x26835c(0xa55)]()['isEnemy']())this[_0x26835c(0x1ae)]=this[_0x26835c(0xa55)]();if(this['enemy']()[_0x26835c(0x738)]())this['_lastActor']=this[_0x26835c(0xa55)]();},Window_BattleEnemy['prototype'][_0x46ffcc(0x41f)]=function(_0x457e3b){const _0x49e7a1=_0x46ffcc;Window_Selectable[_0x49e7a1(0x9c1)]['select'][_0x49e7a1(0x2e0)](this,_0x457e3b),$gameTroop['select'](this[_0x49e7a1(0xa55)]()),$gameParty[_0x49e7a1(0x41f)](this[_0x49e7a1(0xa55)]());if(!this['enemy']())return;if(this['meetsSelectFrontviewActorConditions']()){const _0xd3ee11=SceneManager['_scene']['_actorWindow'];this[_0x49e7a1(0xa55)]()[_0x49e7a1(0x738)]()?_0xd3ee11[_0x49e7a1(0x41f)](this['enemy']()[_0x49e7a1(0x29e)]()):_0xd3ee11[_0x49e7a1(0x9f5)]();}},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x326)]=function(){const _0x3bdd7e=_0x46ffcc;if(!this['visible'])return![];if($gameSystem[_0x3bdd7e(0x5c0)]())return![];const _0x2db567=SceneManager[_0x3bdd7e(0x5e4)]['battleLayoutStyle'](),_0x50ccfe=['default',_0x3bdd7e(0x497),'xp',_0x3bdd7e(0x1cd),_0x3bdd7e(0x245)];return _0x50ccfe[_0x3bdd7e(0x6a2)](_0x2db567);},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x481)]=function(){const _0x1313d0=_0x46ffcc,_0x4016de=SceneManager['_scene'][_0x1313d0(0x6e0)];_0x4016de[_0x1313d0(0xbc8)](),_0x4016de[_0x1313d0(0x546)](!![]),_0x4016de[_0x1313d0(0xb53)](),_0x4016de[_0x1313d0(0x9f5)]();const _0x17037b=SceneManager['_scene']['battleLayoutStyle'](),_0xe66f2c=['xp',_0x1313d0(0x1cd),_0x1313d0(0x245)];if(_0xe66f2c[_0x1313d0(0x6a2)](_0x17037b)){const _0xf9df8e=SceneManager['_scene'][_0x1313d0(0x7d9)];_0xf9df8e[_0x1313d0(0x3be)]['y']=0x0;}},Window_BattleEnemy[_0x46ffcc(0x9c1)]['closeBattleActorWindow']=function(){const _0xc5717f=_0x46ffcc,_0x3417dd=SceneManager[_0xc5717f(0x5e4)][_0xc5717f(0x6e0)];_0x3417dd[_0xc5717f(0x369)](),_0x3417dd['setEnemyWindowMode'](![]),_0x3417dd[_0xc5717f(0x9f5)]();const _0x3b72f4=SceneManager[_0xc5717f(0x5e4)][_0xc5717f(0x7d9)];_0x3b72f4[_0xc5717f(0x3be)]['y']=0x1;},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x18e)]=function(){const _0x25db3b=_0x46ffcc,_0x4f41fe=BattleManager[_0x25db3b(0x772)]();if(_0x4f41fe)_0x4f41fe[_0x25db3b(0x884)](_0x25db3b(0xa95));this['processOk']();},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x3dd)]=function(){const _0x31c474=_0x46ffcc,_0x50154d=BattleManager[_0x31c474(0x772)]();if(_0x50154d)_0x50154d[_0x31c474(0x884)](_0x31c474(0xaa5));this[_0x31c474(0x4a4)]();},Window_BattleEnemy[_0x46ffcc(0x9c1)][_0x46ffcc(0x192)]=function(){return this['isActionSelectionValid']();},Window_BattleEnemy['prototype'][_0x46ffcc(0x1ca)]=function(){const _0x4f26c5=_0x46ffcc,_0x4f4600=BattleManager['inputtingAction']();if(!_0x4f4600)return!![];if(!_0x4f4600[_0x4f26c5(0x50d)]())return!![];const _0x2b2d00=this[_0x4f26c5(0xa55)](),_0x32f9e8=_0x4f4600['item']()[_0x4f26c5(0x8fd)];if(_0x4f4600[_0x4f26c5(0x3b3)]()){if(_0x2b2d00===BattleManager['actor']())return![];}return!![];},Window_BattleItem[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a2)]=function(_0xdf45a9){const _0x2ac4a1=_0x46ffcc;if(!_0xdf45a9)return![];return _0xdf45a9[_0x2ac4a1(0x61b)]===0x0||_0xdf45a9[_0x2ac4a1(0x61b)]===0x1;};function Window_AutoBattleCancel(){const _0x207248=_0x46ffcc;this[_0x207248(0x3e3)](...arguments);}Window_AutoBattleCancel['prototype']=Object['create'](Window_Base[_0x46ffcc(0x9c1)]),Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x42f)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x5a4356){const _0x10bd6c=_0x46ffcc;Window_Base[_0x10bd6c(0x9c1)][_0x10bd6c(0x3e3)][_0x10bd6c(0x2e0)](this,_0x5a4356),this[_0x10bd6c(0x9cb)](this[_0x10bd6c(0x27f)]()),this[_0x10bd6c(0xb53)]();},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x27f)]=function(){const _0x20d29c=_0x46ffcc;return VisuMZ[_0x20d29c(0x354)]['Settings'][_0x20d29c(0x6c1)][_0x20d29c(0x6f9)];},Window_AutoBattleCancel['prototype'][_0x46ffcc(0xb53)]=function(){const _0x9336b6=_0x46ffcc;this[_0x9336b6(0xab6)][_0x9336b6(0x91f)]();const _0x500835=VisuMZ[_0x9336b6(0x354)][_0x9336b6(0x59e)]['AutoBattle'][_0x9336b6(0x77b)],_0x4509d8=_0x500835['format'](this[_0x9336b6(0xa7f)](),this[_0x9336b6(0xbdf)]()),_0x587196=this[_0x9336b6(0x520)](_0x4509d8)[_0x9336b6(0x448)],_0x5e71a2=Math[_0x9336b6(0x27a)]((this[_0x9336b6(0x7de)]-_0x587196)/0x2);this[_0x9336b6(0x4b9)](_0x4509d8,_0x5e71a2,0x0,_0x587196);},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0xa7f)]=function(){const _0xf4a11=_0x46ffcc;return Imported[_0xf4a11(0xbaf)]?TextManager[_0xf4a11(0x77f)]('ok'):VisuMZ['BattleCore'][_0xf4a11(0x59e)]['AutoBattle'][_0xf4a11(0x86f)];},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0xbdf)]=function(){const _0x11a063=_0x46ffcc;return Imported[_0x11a063(0xbaf)]?TextManager[_0x11a063(0x77f)](_0x11a063(0x6d5)):VisuMZ[_0x11a063(0x354)]['Settings']['AutoBattle'][_0x11a063(0x1c0)];},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x4f7f7b=_0x46ffcc;Window_Base[_0x4f7f7b(0x9c1)][_0x4f7f7b(0x881)][_0x4f7f7b(0x2e0)](this),this['updateVisibility'](),this[_0x4f7f7b(0x234)]();},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x829)]=function(){const _0x376ce7=_0x46ffcc;this[_0x376ce7(0xa23)]=BattleManager[_0x376ce7(0x4ec)];},Window_AutoBattleCancel[_0x46ffcc(0x9c1)][_0x46ffcc(0x234)]=function(){const _0xa6b712=_0x46ffcc;if(!BattleManager[_0xa6b712(0x4ec)])return;(Input[_0xa6b712(0x477)]('ok')||Input['isTriggered'](_0xa6b712(0x6d5))||TouchInput[_0xa6b712(0x7d5)]()||TouchInput[_0xa6b712(0x120)]())&&(SoundManager[_0xa6b712(0x810)](),BattleManager[_0xa6b712(0x4ec)]=![],Input[_0xa6b712(0x91f)](),TouchInput['clear']());};function Window_EnemyName(){const _0x5a9a32=_0x46ffcc;this[_0x5a9a32(0x3e3)](...arguments);}Window_EnemyName[_0x46ffcc(0x9c1)]=Object[_0x46ffcc(0x411)](Window_StatusBase[_0x46ffcc(0x9c1)]),Window_EnemyName['prototype'][_0x46ffcc(0x42f)]=Window_EnemyName,Window_EnemyName['prototype'][_0x46ffcc(0x3e3)]=function(_0x3e23c8){const _0x1af616=_0x46ffcc;this[_0x1af616(0x6b0)]=_0x3e23c8,this[_0x1af616(0x46a)]='';const _0x4ed43f=new Rectangle(0x0,0x0,Graphics[_0x1af616(0xab3)],this['lineHeight']()*0x4);Window_StatusBase['prototype'][_0x1af616(0x3e3)][_0x1af616(0x2e0)](this,_0x4ed43f),this[_0x1af616(0x9cb)](0x2),this[_0x1af616(0x95e)]=0x0;},Window_EnemyName['prototype'][_0x46ffcc(0x882)]=function(){this['padding']=0x0;},Window_EnemyName[_0x46ffcc(0x9c1)]['enemy']=function(){const _0x367140=_0x46ffcc;return $gameTroop[_0x367140(0x3b2)]()[this[_0x367140(0x6b0)]];},Window_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x198dc4=_0x46ffcc;Window_StatusBase[_0x198dc4(0x9c1)]['update'][_0x198dc4(0x2e0)](this),this[_0x198dc4(0xa55)]()&&this[_0x198dc4(0xa55)]()['name']()!==this[_0x198dc4(0x46a)]&&(this[_0x198dc4(0x46a)]=this[_0x198dc4(0xa55)]()[_0x198dc4(0x1a8)](),this[_0x198dc4(0xb53)]()),this[_0x198dc4(0x3aa)](),this[_0x198dc4(0x6a3)]();},Window_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x3aa)]=function(){const _0x235c38=_0x46ffcc;if(!this[_0x235c38(0xa55)]()){if(this[_0x235c38(0x95e)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x235c38(0xa55)]()[_0x235c38(0xb76)]()){if(this[_0x235c38(0x95e)]>0x0)this[_0x235c38(0x95e)]-=0x10;}else{if(SceneManager['_scene'][_0x235c38(0x1eb)]&&SceneManager[_0x235c38(0x5e4)][_0x235c38(0x1eb)][_0x235c38(0x164)]&&SceneManager[_0x235c38(0x5e4)][_0x235c38(0x1eb)][_0x235c38(0x14a)][_0x235c38(0x6a2)](this[_0x235c38(0xa55)]())){if(this[_0x235c38(0x95e)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x235c38(0x95e)]>0x0&&(this[_0x235c38(0x95e)]-=0x10);}}},Window_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x6a3)]=function(){const _0xd89e08=_0x46ffcc;if(!this[_0xd89e08(0xa55)]())return;SceneManager[_0xd89e08(0x257)]()?this['x']=Graphics[_0xd89e08(0xab3)]-this['enemy']()[_0xd89e08(0x430)]()[_0xd89e08(0x72f)]:this['x']=this[_0xd89e08(0xa55)]()[_0xd89e08(0x430)]()[_0xd89e08(0x72f)];this['x']-=Math[_0xd89e08(0x6da)](this['width']/0x2),this['y']=this[_0xd89e08(0xa55)]()[_0xd89e08(0x430)]()[_0xd89e08(0x97f)]-Math[_0xd89e08(0x6da)](this[_0xd89e08(0x3eb)]()*1.5);const _0x5e2ee2=VisuMZ[_0xd89e08(0x354)][_0xd89e08(0x59e)]['Enemy'];this['x']+=_0x5e2ee2[_0xd89e08(0x38c)]||0x0,this['y']+=_0x5e2ee2['NameOffsetY']||0x0;},Window_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0x2cd)]=function(){const _0x49f4f8=_0x46ffcc;Window_Base['prototype'][_0x49f4f8(0x2cd)][_0x49f4f8(0x2e0)](this),this[_0x49f4f8(0xab6)][_0x49f4f8(0x2ec)]=VisuMZ[_0x49f4f8(0x354)]['Settings']['Enemy'][_0x49f4f8(0x2e3)];},Window_EnemyName[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0x188d67=_0x46ffcc;Window_StatusBase[_0x188d67(0x9c1)][_0x188d67(0xb53)][_0x188d67(0x2e0)](this),this[_0x188d67(0xab6)][_0x188d67(0x91f)]();if(!this[_0x188d67(0xa55)]())return;this[_0x188d67(0xb3d)]();},Window_EnemyName[_0x46ffcc(0x9c1)]['drawEnemyName']=function(){const _0x2613ab=_0x46ffcc;this['_text']=this[_0x2613ab(0xa55)]()[_0x2613ab(0x1a8)]();const _0x1a862c=this[_0x2613ab(0x520)](this[_0x2613ab(0x46a)])[_0x2613ab(0x448)],_0x4591a8=Math[_0x2613ab(0x6da)]((this[_0x2613ab(0x7de)]-_0x1a862c)/0x2);this['drawTextEx'](this[_0x2613ab(0x46a)],_0x4591a8,0x0,_0x1a862c+0x8);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x77d)]=function(){const _0x3b6c96=_0x46ffcc;return VisuMZ[_0x3b6c96(0x354)][_0x3b6c96(0x59e)][_0x3b6c96(0x17f)][_0x3b6c96(0x3b6)];},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x205)]=function(){const _0xf46f00=_0x46ffcc;return VisuMZ[_0xf46f00(0x354)][_0xf46f00(0x59e)][_0xf46f00(0x17f)]['MessageWait'];},Window_BattleLog[_0x46ffcc(0x9c1)]['backColor']=function(){const _0x5ea641=_0x46ffcc;return VisuMZ[_0x5ea641(0x354)][_0x5ea641(0x59e)][_0x5ea641(0x17f)][_0x5ea641(0xbe3)];},Window_BattleLog[_0x46ffcc(0x9c1)]['isFastForward']=function(){return![];},Window_BattleLog['prototype'][_0x46ffcc(0x261)]=function(_0x56dae7,_0x4c3318){const _0x28eb59=_0x46ffcc;this[_0x28eb59(0x64f)](_0x28eb59(0x32e)),BattleManager[_0x28eb59(0xb22)](_0x56dae7,_0x4c3318),this[_0x28eb59(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)]['emulateActionEffect']=function(_0x479232,_0x54048a,_0x495ac1){const _0x367ad6=_0x46ffcc;this['unshift'](_0x367ad6(0x32e)),BattleManager[_0x367ad6(0x16e)](_0x479232,_0x54048a,_0x495ac1),this[_0x367ad6(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x32e)]=function(){const _0x345520=_0x46ffcc;this[_0x345520(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x40a)]=function(_0x57ef2a){const _0x50afdf=_0x46ffcc,_0x2410a4=Array[_0x50afdf(0x9c1)][_0x50afdf(0x62f)]['call'](arguments,0x1),_0x55641f={'name':_0x57ef2a,'params':_0x2410a4},_0x3f887c=this[_0x50afdf(0xb5f)][_0x50afdf(0x6cd)](_0x902d6f=>_0x902d6f[_0x50afdf(0x1a8)])[_0x50afdf(0xb8c)](_0x50afdf(0x32e));_0x3f887c>=0x0?this[_0x50afdf(0xb5f)]['splice'](_0x3f887c,0x0,_0x55641f):this[_0x50afdf(0xb5f)][_0x50afdf(0x40a)](_0x55641f);},Window_BattleLog[_0x46ffcc(0x9c1)]['unshift']=function(_0x515e1b){const _0x5712bb=_0x46ffcc,_0x9337e1=Array['prototype'][_0x5712bb(0x62f)][_0x5712bb(0x2e0)](arguments,0x1);this[_0x5712bb(0xb5f)][_0x5712bb(0x64f)]({'name':_0x515e1b,'params':_0x9337e1});},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x452)]=function(){const _0x2f2e9c=_0x46ffcc;if(!$gameTemp[_0x2f2e9c(0x72d)]())return;console[_0x2f2e9c(0x637)](this[_0x2f2e9c(0xb5f)][_0x2f2e9c(0x6cd)](_0x54d935=>_0x54d935['name'])[_0x2f2e9c(0x9c3)]('\x0a'));},VisuMZ['BattleCore'][_0x46ffcc(0x3ab)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0xb95c94=_0x46ffcc;this[_0xb95c94(0xb6d)]=!![];},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_update']=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x5e2349=_0x46ffcc;VisuMZ[_0x5e2349(0x354)]['Window_BattleLog_update'][_0x5e2349(0x2e0)](this);if(this['_requestRefresh'])this[_0x5e2349(0x35f)]();},Window_BattleLog[_0x46ffcc(0x9c1)]['processRefresh']=function(){const _0x282b3a=_0x46ffcc;this['_requestRefresh']=![],VisuMZ['BattleCore'][_0x282b3a(0x3ab)][_0x282b3a(0x2e0)](this);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x584)]=function(_0x458f68){const _0x4ff497=_0x46ffcc;let _0x403872=VisuMZ[_0x4ff497(0x354)][_0x4ff497(0x59e)][_0x4ff497(0x17f)][_0x4ff497(0x92c)][_0x4ff497(0xb3e)]()[_0x4ff497(0xafd)](),_0x41a32a=this[_0x4ff497(0x9eb)][_0x458f68];if(_0x41a32a[_0x4ff497(0xe0)](/<LEFT>/i))_0x403872='left';else{if(_0x41a32a[_0x4ff497(0xe0)](/<CENTER>/i))_0x403872='center';else _0x41a32a['match'](/<RIGHT>/i)&&(_0x403872=_0x4ff497(0xa36));}_0x41a32a=_0x41a32a[_0x4ff497(0x5c1)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x41a32a=_0x41a32a['replace'](/\\I\[0\]/gi,'');const _0x380fe2=this[_0x4ff497(0xbb9)](_0x458f68);this[_0x4ff497(0xab6)][_0x4ff497(0x496)](_0x380fe2['x'],_0x380fe2['y'],_0x380fe2['width'],_0x380fe2[_0x4ff497(0x212)]);const _0x5b7c55=this['textSizeEx'](_0x41a32a)[_0x4ff497(0x448)];let _0xcc26ba=_0x380fe2['x'];if(_0x403872===_0x4ff497(0x7bf))_0xcc26ba+=(_0x380fe2[_0x4ff497(0x448)]-_0x5b7c55)/0x2;else _0x403872==='right'&&(_0xcc26ba+=_0x380fe2[_0x4ff497(0x448)]-_0x5b7c55);this[_0x4ff497(0x4b9)](_0x41a32a,_0xcc26ba,_0x380fe2['y'],_0x5b7c55+0x8);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb70)]=function(_0x172137){const _0x1f8a3f=_0x46ffcc;this[_0x1f8a3f(0x9eb)][_0x1f8a3f(0x40a)](_0x172137),this[_0x1f8a3f(0xb53)](),this[_0x1f8a3f(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xbc6)]=function(){const _0x31a8c7=_0x46ffcc;let _0x5b95f1=![];switch(this['_waitMode']){case _0x31a8c7(0x2c4):_0x5b95f1=this['_spriteset'][_0x31a8c7(0x16f)]();break;case _0x31a8c7(0x199):_0x5b95f1=this['_spriteset']['isAnyoneMoving']();break;case'animation':_0x5b95f1=this['_spriteset'][_0x31a8c7(0x470)]();break;case _0x31a8c7(0xaff):_0x5b95f1=this[_0x31a8c7(0x787)][_0x31a8c7(0xb13)]();break;case _0x31a8c7(0x764):_0x5b95f1=this[_0x31a8c7(0x787)][_0x31a8c7(0x409)]();break;case'opacity':_0x5b95f1=this[_0x31a8c7(0x787)]['isAnyoneChangingOpacity']();break;}return!_0x5b95f1&&(this[_0x31a8c7(0x8b6)]=''),_0x5b95f1;},Window_BattleLog[_0x46ffcc(0x9c1)]['waitForAnimation']=function(){const _0x3da89f=_0x46ffcc;this[_0x3da89f(0x54b)]('animation');},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x700)]=function(){const _0x32800f=_0x46ffcc;this['setWaitMode'](_0x32800f(0xaff));},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x44f)]=function(){const _0x1867bb=_0x46ffcc;this[_0x1867bb(0x54b)](_0x1867bb(0x764));},Window_BattleLog['prototype'][_0x46ffcc(0x953)]=function(){const _0x1e8dc2=_0x46ffcc;this['setWaitMode'](_0x1e8dc2(0x2a4));},Window_BattleLog[_0x46ffcc(0x9c1)]['startTurn']=function(){const _0x44f5e3=_0x46ffcc,_0x44b9d6=VisuMZ['BattleCore']['Settings']['BattleLog'];if(!_0x44b9d6['StartTurnShow'])return;this['push'](_0x44f5e3(0xb70),_0x44b9d6['StartTurnMsg']['format']($gameTroop[_0x44f5e3(0x4ac)]())),this[_0x44f5e3(0x40a)](_0x44f5e3(0x8a8),_0x44b9d6['StartTurnWait']),this[_0x44f5e3(0x40a)](_0x44f5e3(0x91f));};var $subject,$action,$targets;Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb36)]=function(_0x204c79,_0x25043b,_0x54fde3){const _0xef164e=_0x46ffcc;$subject=_0x204c79,$action=_0x25043b,$targets=_0x54fde3,this[_0xef164e(0x904)](_0x25043b)?BattleManager[_0xef164e(0x756)]():this[_0xef164e(0xab1)](_0x204c79,_0x25043b,_0x54fde3);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x904)]=function(_0x1635d8){const _0x4fa7c1=_0x46ffcc;if(!SceneManager[_0x4fa7c1(0xaf2)]())return![];if(!_0x1635d8)return![];if(!_0x1635d8[_0x4fa7c1(0x50d)]())return![];if(_0x1635d8[_0x4fa7c1(0x50d)]()[_0x4fa7c1(0x8fd)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x1635d8[_0x4fa7c1(0x50d)]()))return!![];return![];},Window_BattleLog['prototype'][_0x46ffcc(0xab1)]=function(_0x5a0146,_0x922331,_0x50cab7){const _0x36d291=_0x46ffcc;this[_0x36d291(0x79a)](_0x5a0146,_0x922331,_0x50cab7),this[_0x36d291(0xbee)](_0x5a0146,_0x922331,_0x50cab7),this['finishActionSet'](_0x5a0146,_0x922331,_0x50cab7);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x375)]=function(_0x2e0ef7,_0x20ed98){const _0xec2f59=_0x46ffcc,_0x4efed8=VisuMZ[_0xec2f59(0x354)][_0xec2f59(0x59e)][_0xec2f59(0x17f)];_0x4efed8[_0xec2f59(0x52b)]&&this[_0xec2f59(0x40a)]('addText',_0xec2f59(0xb8e)[_0xec2f59(0x498)](DataManager['battleDisplayText'](_0x20ed98)));if(DataManager[_0xec2f59(0x444)](_0x20ed98)){if(_0x4efed8[_0xec2f59(0x6de)])this[_0xec2f59(0x44d)](_0x20ed98[_0xec2f59(0x327)],_0x2e0ef7,_0x20ed98);if(_0x4efed8[_0xec2f59(0x3d2)])this['displayItemMessage'](_0x20ed98[_0xec2f59(0x355)],_0x2e0ef7,_0x20ed98);}else{if(_0x4efed8[_0xec2f59(0x38f)])this['displayItemMessage'](TextManager[_0xec2f59(0x562)],_0x2e0ef7,_0x20ed98);}},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x79a)]=function(_0x298875,_0x5a3854,_0x165bff){const _0x357266=_0x46ffcc,_0x463e0c=_0x5a3854[_0x357266(0x50d)]();this[_0x357266(0x375)](_0x298875,_0x463e0c),this['push'](_0x357266(0xbc1),_0x298875,_0x165bff,!![]),this['push']('performActionStart',_0x298875,_0x5a3854),this[_0x357266(0x40a)](_0x357266(0x100)),this[_0x357266(0x40a)]('performCastAnimation',_0x298875,_0x5a3854),this[_0x357266(0x40a)](_0x357266(0xbd3));},Window_BattleLog[_0x46ffcc(0x9c1)]['createEffectActionSet']=function(_0xa776f7,_0x2e61b3,_0x31fa59){const _0x269985=_0x46ffcc;if(this[_0x269985(0x809)](_0x2e61b3))this[_0x269985(0xbbb)](_0xa776f7,_0x2e61b3,_0x31fa59);else{if(this[_0x269985(0x671)](_0x2e61b3))this[_0x269985(0x51f)](_0xa776f7,_0x2e61b3,_0x31fa59);else _0x2e61b3['isForRandom']()?this['targetActionSet'](_0xa776f7,_0x2e61b3,_0x31fa59):this[_0x269985(0x382)](_0xa776f7,_0x2e61b3,_0x31fa59);}},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x3d1)]=function(_0x57bb3a,_0x252a82,_0x24d0c2,_0x3ab2aa){const _0x231f75=_0x46ffcc;if(_0x252a82){const _0x56c3a1=_0x57bb3a['battler']();this[_0x231f75(0x40a)]('performJump',[_0x57bb3a],_0x24d0c2,_0x3ab2aa),this[_0x231f75(0x40a)](_0x231f75(0x7fc),_0x57bb3a,_0x56c3a1[_0x231f75(0x2bd)],_0x56c3a1[_0x231f75(0x611)],_0x3ab2aa,![],_0x231f75(0x8e3)),this['push']('requestMotion',[_0x57bb3a],_0x231f75(0x3c4)),this[_0x231f75(0x40a)]('waitForMovement'),this[_0x231f75(0x40a)](_0x231f75(0x5f2),[_0x57bb3a],_0x231f75(0x5c4));}},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x809)]=function(_0x4d68a2){const _0x3fd7c2=_0x46ffcc;if(!_0x4d68a2['isPhysical']())return![];if(!_0x4d68a2['isForOne']())return![];if(!_0x4d68a2[_0x3fd7c2(0x2c5)]())return![];return VisuMZ[_0x3fd7c2(0x354)][_0x3fd7c2(0x59e)][_0x3fd7c2(0x721)][_0x3fd7c2(0xb8f)];},Window_BattleLog['prototype'][_0x46ffcc(0xbbb)]=function(_0x464689,_0x475f2e,_0x1e7d20){const _0x11d4df=_0x46ffcc,_0x2f9c69=_0x464689['getAttackMotion']()[_0x11d4df(0x56c)]<0x2,_0x11f019=0x14,_0x5d8223=0x30;let _0x3051b7=!![];_0x1e7d20['length']>0x0&&_0x464689[_0x11d4df(0x738)]()===_0x1e7d20[0x0][_0x11d4df(0x738)]()&&(_0x3051b7=![]);_0x2f9c69&&_0x3051b7&&(this[_0x11d4df(0x40a)]('performJump',[_0x464689],_0x5d8223,_0x11f019),this[_0x11d4df(0x40a)](_0x11d4df(0x13d),_0x464689,_0x1e7d20,_0x11d4df(0x901),_0x11f019,!![],_0x11d4df(0x8e3),!![]),this[_0x11d4df(0x40a)]('requestMotion',[_0x464689],_0x11d4df(0x5c4)),this[_0x11d4df(0x40a)]('waitForMovement'));let _0x12269b=_0x475f2e[_0x11d4df(0x3ed)]()?this[_0x11d4df(0x609)](_0x464689):0x1;for(let _0x2beae5=0x0;_0x2beae5<_0x12269b;_0x2beae5++){_0x475f2e[_0x11d4df(0x3ed)]()&&_0x464689[_0x11d4df(0x738)]()&&this[_0x11d4df(0x40a)](_0x11d4df(0x53b),_0x464689,_0x2beae5),_0x475f2e[_0x11d4df(0x50d)]()['animationId']<0x0?this['targetActionSet'](_0x464689,_0x475f2e,_0x1e7d20):this['wholeActionSet'](_0x464689,_0x475f2e,_0x1e7d20);}_0x475f2e[_0x11d4df(0x3ed)]()&&_0x464689[_0x11d4df(0x738)]()&&this['push'](_0x11d4df(0x744),_0x464689),this[_0x11d4df(0x40a)](_0x11d4df(0xbc1),_0x464689,_0x1e7d20,![]),this['addMeleeReturnActionSet'](_0x464689,_0x2f9c69,_0x5d8223,_0x11f019);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x671)]=function(_0x526e61){const _0x4709bc=_0x46ffcc;if(!_0x526e61['isPhysical']())return![];if(!_0x526e61[_0x4709bc(0x346)]())return![];if(!_0x526e61['isForOpponent']())return![];return VisuMZ[_0x4709bc(0x354)][_0x4709bc(0x59e)]['ActionSequence'][_0x4709bc(0x16c)];},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x51f)]=function(_0x2042b0,_0x51c3b2,_0xdfa42a){const _0x3a46f2=_0x46ffcc,_0x372107=_0x2042b0['getAttackMotion']()['type']<0x2,_0x56539d=0x14,_0x338efe=0x30;if(_0x372107){this[_0x3a46f2(0x40a)](_0x3a46f2(0x683),[_0x2042b0],_0x338efe,_0x56539d);const _0x4b6a27=_0xdfa42a[_0x3a46f2(0x9bf)]>0x1?_0x3a46f2(0x103):_0x3a46f2(0x901);this[_0x3a46f2(0x40a)](_0x3a46f2(0x13d),_0x2042b0,_0xdfa42a,_0x4b6a27,_0x56539d,!![],_0x3a46f2(0x8e3),!![]),this['push'](_0x3a46f2(0x5f2),[_0x2042b0],_0x3a46f2(0x5c4)),this[_0x3a46f2(0x40a)]('waitForMovement');}let _0xa930ed=_0x51c3b2['isAttack']()?this[_0x3a46f2(0x609)](_0x2042b0):0x1;for(let _0x319981=0x0;_0x319981<_0xa930ed;_0x319981++){_0x51c3b2[_0x3a46f2(0x3ed)]()&&_0x2042b0[_0x3a46f2(0x738)]()&&this['push'](_0x3a46f2(0x53b),_0x2042b0,_0x319981),this[_0x3a46f2(0x382)](_0x2042b0,_0x51c3b2,_0xdfa42a);}_0x51c3b2[_0x3a46f2(0x3ed)]()&&_0x2042b0[_0x3a46f2(0x738)]()&&this[_0x3a46f2(0x40a)](_0x3a46f2(0x744),_0x2042b0),this['push'](_0x3a46f2(0xbc1),_0x2042b0,_0xdfa42a,![]),this[_0x3a46f2(0x3d1)](_0x2042b0,_0x372107,_0x338efe,_0x56539d);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x2e9)]=function(_0x533418,_0x38c679,_0x5b5ff5){const _0x53f150=_0x46ffcc,_0x3f4d95=_0x38c679[_0x53f150(0x50d)]();for(const _0x4da8a7 of _0x5b5ff5){if(!_0x4da8a7)continue;this[_0x53f150(0x40a)](_0x53f150(0x3e2),_0x533418,_0x38c679),this['push'](_0x53f150(0x8a8),Sprite_Battler['_motionSpeed']),this[_0x53f150(0x40a)](_0x53f150(0x5ac),_0x533418,[_0x4da8a7],_0x3f4d95[_0x53f150(0x586)]),this[_0x53f150(0x40a)](_0x53f150(0x8a8),0x18),this[_0x53f150(0x40a)](_0x53f150(0x261),_0x533418,_0x4da8a7);}},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x382)]=function(_0x2063b5,_0x37838f,_0x238b92){const _0x514244=_0x46ffcc,_0x4709d9=_0x37838f[_0x514244(0x50d)]();let _0x5a7326=_0x37838f[_0x514244(0x3ed)]()?0x1+_0x2063b5[_0x514244(0x419)]():0x1;while(_0x5a7326--){this[_0x514244(0x40a)](_0x514244(0x3e2),_0x2063b5,_0x37838f),this[_0x514244(0x40a)](_0x514244(0x8a8),Sprite_Battler['_motionSpeed']),this[_0x514244(0x40a)]('showAnimation',_0x2063b5,_0x238b92[_0x514244(0x15c)](),_0x4709d9[_0x514244(0x586)]),this[_0x514244(0x40a)](_0x514244(0xbd3));}for(const _0x23d5cb of _0x238b92){if(!_0x23d5cb)continue;this[_0x514244(0x40a)]('actionEffect',_0x2063b5,_0x23d5cb);}},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x2a3)]=function(_0x415733,_0x27b3fd,_0x1a3789){const _0x1293d3=_0x46ffcc,_0x54619c=_0x27b3fd[_0x1293d3(0x50d)]();this['push'](_0x1293d3(0xbc1),_0x415733,_0x1a3789,![]),this[_0x1293d3(0x40a)](_0x1293d3(0x28e)),this['push']('waitForEffect'),this['push']('clear'),this[_0x1293d3(0x40a)]('performActionEnd',_0x415733),this[_0x1293d3(0x40a)](_0x1293d3(0x100));},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x72a)]=function(_0xdaa41e){$subject=null,$action=null,$targets=[];},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xa87)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x502)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x502)]=function(_0x5ce0e1){const _0x3ab2c4=_0x46ffcc;if(!VisuMZ[_0x3ab2c4(0x354)][_0x3ab2c4(0x59e)][_0x3ab2c4(0x17f)][_0x3ab2c4(0x759)])return;VisuMZ[_0x3ab2c4(0x354)][_0x3ab2c4(0xa87)][_0x3ab2c4(0x2e0)](this,_0x5ce0e1);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb05)]=function(_0x1c6d7b){const _0x11fc40=_0x46ffcc;this[_0x11fc40(0x40a)]('performCounter',_0x1c6d7b);VisuMZ['BattleCore'][_0x11fc40(0x59e)][_0x11fc40(0x721)][_0x11fc40(0xacd)]&&this[_0x11fc40(0x40a)](_0x11fc40(0x5ac),_0x1c6d7b,[BattleManager[_0x11fc40(0x30f)]],-0x1);if(!VisuMZ[_0x11fc40(0x354)][_0x11fc40(0x59e)][_0x11fc40(0x17f)][_0x11fc40(0x144)])return;this[_0x11fc40(0x40a)](_0x11fc40(0xb70),TextManager[_0x11fc40(0xa67)][_0x11fc40(0x498)](_0x1c6d7b['name']()));const _0x35c47a=VisuMZ[_0x11fc40(0x354)][_0x11fc40(0x59e)][_0x11fc40(0x17f)]['ShowCounterWait']??0x0;if(_0x35c47a>0x0)this[_0x11fc40(0x40a)](_0x11fc40(0x8a8),_0x35c47a);;},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x98e)]=function(_0x441749){const _0x401883=_0x46ffcc;this['push'](_0x401883(0x718),_0x441749);if(!VisuMZ[_0x401883(0x354)][_0x401883(0x59e)][_0x401883(0x17f)][_0x401883(0x631)])return;this['push'](_0x401883(0xb70),TextManager[_0x401883(0x160)]['format'](_0x441749[_0x401883(0x1a8)]()));const _0x49ed0e=VisuMZ[_0x401883(0x354)][_0x401883(0x59e)][_0x401883(0x17f)][_0x401883(0x155)]??0x0;if(_0x49ed0e>0x0)this['push'](_0x401883(0x8a8),_0x49ed0e);;},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x812)]=function(_0x32e416,_0x1814ad){const _0x40d28b=_0x46ffcc;if(VisuMZ['BattleCore'][_0x40d28b(0x59e)][_0x40d28b(0x721)]['ReflectPlayback']){const _0x1806c7=_0x1814ad[_0x40d28b(0x50d)]();this[_0x40d28b(0x40a)]('showAnimation',_0x32e416,[_0x32e416],_0x1806c7['animationId']);}},Window_BattleLog[_0x46ffcc(0x9c1)]['displaySubstitute']=function(_0xcb0541,_0x41bcf9){const _0x201f70=_0x46ffcc;this[_0x201f70(0x40a)](_0x201f70(0x28b),_0xcb0541,_0x41bcf9);if(!VisuMZ[_0x201f70(0x354)][_0x201f70(0x59e)][_0x201f70(0x17f)]['ShowSubstitute'])return;const _0x5a0d3f=_0xcb0541[_0x201f70(0x1a8)](),_0x57b667=TextManager['substitute'][_0x201f70(0x498)](_0x5a0d3f,_0x41bcf9['name']());this[_0x201f70(0x40a)](_0x201f70(0xb70),_0x57b667);const _0x5a4c11=VisuMZ[_0x201f70(0x354)][_0x201f70(0x59e)][_0x201f70(0x17f)][_0x201f70(0x5df)]??0x0;if(_0x5a4c11>0x0)this[_0x201f70(0x40a)](_0x201f70(0x8a8),_0x5a4c11);;},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb9a)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb9a)]=function(_0x4911b8,_0x37d65b){const _0x2e737c=_0x46ffcc;VisuMZ[_0x2e737c(0x354)][_0x2e737c(0x1de)][_0x2e737c(0x2e0)](this,_0x4911b8,_0x37d65b);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x714)]=Window_BattleLog[_0x46ffcc(0x9c1)]['displayFailure'],Window_BattleLog[_0x46ffcc(0x9c1)]['displayFailure']=function(_0x4f9437){const _0x23aac5=_0x46ffcc;if(!VisuMZ['BattleCore']['Settings'][_0x23aac5(0x17f)]['ShowFailure'])return;VisuMZ['BattleCore'][_0x23aac5(0x714)][_0x23aac5(0x2e0)](this,_0x4f9437);},VisuMZ['BattleCore'][_0x46ffcc(0x8b2)]=Window_BattleLog['prototype'][_0x46ffcc(0xb95)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xb95)]=function(_0x5bb78b){const _0x5b5b1e=_0x46ffcc;if(!VisuMZ[_0x5b5b1e(0x354)][_0x5b5b1e(0x59e)]['BattleLog'][_0x5b5b1e(0x8cb)])return;VisuMZ[_0x5b5b1e(0x354)]['Window_BattleLog_displayCritical'][_0x5b5b1e(0x2e0)](this,_0x5bb78b);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x2f1)]=Window_BattleLog['prototype'][_0x46ffcc(0xa81)],Window_BattleLog['prototype'][_0x46ffcc(0xa81)]=function(_0x437280){const _0x26b516=_0x46ffcc;!VisuMZ[_0x26b516(0x354)][_0x26b516(0x59e)][_0x26b516(0x17f)]['ShowMissEvasion']?this['push'](_0x26b516(0xacb),_0x437280):VisuMZ['BattleCore'][_0x26b516(0x2f1)]['call'](this,_0x437280);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x7d7)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x9b4)],Window_BattleLog[_0x46ffcc(0x9c1)]['displayEvasion']=function(_0x23adec){const _0x1db38f=_0x46ffcc;!VisuMZ[_0x1db38f(0x354)][_0x1db38f(0x59e)][_0x1db38f(0x17f)][_0x1db38f(0xf5)]?_0x23adec[_0x1db38f(0x804)]()[_0x1db38f(0x712)]?this[_0x1db38f(0x40a)]('performEvasion',_0x23adec):this['push'](_0x1db38f(0x2cc),_0x23adec):VisuMZ['BattleCore'][_0x1db38f(0x7d7)][_0x1db38f(0x2e0)](this,_0x23adec);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e7)]=function(_0x15cc1e){const _0x47617d=_0x46ffcc;_0x15cc1e['result']()['hpAffected']&&(_0x15cc1e[_0x47617d(0x8f2)]=0x0,_0x15cc1e[_0x47617d(0x804)]()['hpDamage']>0x0&&!_0x15cc1e[_0x47617d(0x804)]()[_0x47617d(0x3a7)]&&(_0x15cc1e['_lastHpDamage']=_0x15cc1e[_0x47617d(0x804)]()[_0x47617d(0x77c)],this[_0x47617d(0x40a)](_0x47617d(0x46b),_0x15cc1e)),_0x15cc1e['result']()[_0x47617d(0x77c)]<0x0&&this[_0x47617d(0x40a)](_0x47617d(0x5a5),_0x15cc1e),VisuMZ[_0x47617d(0x354)][_0x47617d(0x59e)][_0x47617d(0x17f)]['ShowHpDmg']&&this['push']('addText',this[_0x47617d(0x53f)](_0x15cc1e)));},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x642)]=Window_BattleLog['prototype'][_0x46ffcc(0x5c8)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x5c8)]=function(_0x403d7b){const _0x40d8e5=_0x46ffcc;if(!VisuMZ['BattleCore'][_0x40d8e5(0x59e)]['BattleLog']['ShowMpDmg'])return;VisuMZ[_0x40d8e5(0x354)][_0x40d8e5(0x642)][_0x40d8e5(0x2e0)](this,_0x403d7b);},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_displayTpDamage']=Window_BattleLog['prototype'][_0x46ffcc(0x635)],Window_BattleLog[_0x46ffcc(0x9c1)]['displayTpDamage']=function(_0x5e3f24){const _0x3db16d=_0x46ffcc;if(!VisuMZ[_0x3db16d(0x354)][_0x3db16d(0x59e)]['BattleLog'][_0x3db16d(0xe6)])return;VisuMZ[_0x3db16d(0x354)][_0x3db16d(0x37d)][_0x3db16d(0x2e0)](this,_0x5e3f24);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x653)]=function(_0x1e74fa){const _0x5d3439=_0x46ffcc;_0x1e74fa['result']()[_0x5d3439(0xad3)]()&&(this[_0x5d3439(0x40a)](_0x5d3439(0x5bf)),this[_0x5d3439(0x2e6)](_0x1e74fa),this[_0x5d3439(0x248)](_0x1e74fa),this[_0x5d3439(0x40a)](_0x5d3439(0x28e)));},Window_BattleLog['prototype'][_0x46ffcc(0x2cf)]=function(_0x10c290){const _0x21892f=_0x46ffcc,_0x25372b=_0x10c290['result'](),_0x20f6ef=_0x25372b[_0x21892f(0xb61)]();for(const _0x3d22e1 of _0x20f6ef){const _0x4418ad=_0x10c290[_0x21892f(0x738)]()?_0x3d22e1[_0x21892f(0x327)]:_0x3d22e1[_0x21892f(0x355)];_0x4418ad&&VisuMZ['BattleCore'][_0x21892f(0x59e)]['BattleLog'][_0x21892f(0x8d4)]&&(this[_0x21892f(0x40a)]('popBaseLine'),this[_0x21892f(0x40a)]('pushBaseLine'),this[_0x21892f(0x40a)](_0x21892f(0xb70),_0x4418ad[_0x21892f(0x498)](_0x10c290['name']())),this[_0x21892f(0x40a)](_0x21892f(0xa3f))),_0x3d22e1['id']===_0x10c290[_0x21892f(0xdc)]()&&this[_0x21892f(0x40a)](_0x21892f(0x791),_0x10c290);}},Window_BattleLog['prototype']['displayRemovedStates']=function(_0x3d5c42){const _0x5ab5bb=_0x46ffcc;if(!VisuMZ[_0x5ab5bb(0x354)]['Settings']['BattleLog']['ShowRemovedState'])return;const _0x38dd59=_0x3d5c42[_0x5ab5bb(0x804)](),_0x9ff972=_0x38dd59['removedStateObjects']();for(const _0x5f492e of _0x9ff972){_0x5f492e[_0x5ab5bb(0x6a6)]&&(this['push'](_0x5ab5bb(0x62e)),this[_0x5ab5bb(0x40a)]('pushBaseLine'),this['push'](_0x5ab5bb(0xb70),_0x5f492e[_0x5ab5bb(0x6a6)][_0x5ab5bb(0x498)](_0x3d5c42['name']())),this[_0x5ab5bb(0x40a)]('wait'));}},Window_BattleLog['prototype'][_0x46ffcc(0x248)]=function(_0x4d1a3e){const _0x24c878=_0x46ffcc,_0x44ef34=VisuMZ[_0x24c878(0x354)][_0x24c878(0x59e)]['BattleLog'],_0x38fc33=_0x4d1a3e['result']();if(_0x44ef34[_0x24c878(0x40d)])this[_0x24c878(0x456)](_0x4d1a3e,_0x38fc33[_0x24c878(0x9bc)],TextManager['buffAdd']);if(_0x44ef34[_0x24c878(0x70a)])this['displayBuffs'](_0x4d1a3e,_0x38fc33[_0x24c878(0xb8d)],TextManager[_0x24c878(0xbec)]);if(_0x44ef34[_0x24c878(0x9a4)])this[_0x24c878(0x456)](_0x4d1a3e,_0x38fc33['removedBuffs'],TextManager[_0x24c878(0x831)]);},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x456)]=function(_0x4199c5,_0x3a222a,_0x3df970){const _0x4db927=_0x46ffcc;for(const _0xe912e4 of _0x3a222a){const _0x2623b7=_0x3df970['format'](_0x4199c5['name'](),TextManager['param'](_0xe912e4));this['push'](_0x4db927(0x62e)),this[_0x4db927(0x40a)](_0x4db927(0x5bf)),this[_0x4db927(0x40a)](_0x4db927(0xb70),_0x2623b7),this[_0x4db927(0x40a)](_0x4db927(0xa3f));}},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x20f)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x91f)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x91f)]=function(){const _0x1fe678=_0x46ffcc;VisuMZ[_0x1fe678(0x354)][_0x1fe678(0x20f)]['call'](this),this[_0x1fe678(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x6c3)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x5bf)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x5bf)]=function(){const _0x398350=_0x46ffcc;VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine'][_0x398350(0x2e0)](this),this[_0x398350(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_popBaseLine']=Window_BattleLog['prototype'][_0x46ffcc(0x62e)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x46dc73=_0x46ffcc;VisuMZ[_0x46dc73(0x354)][_0x46dc73(0x99c)][_0x46dc73(0x2e0)](this),this[_0x46dc73(0x35f)](),this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x839)]=Window_BattleLog[_0x46ffcc(0x9c1)]['popupDamage'],Window_BattleLog[_0x46ffcc(0x9c1)]['popupDamage']=function(_0x3e8cf6){const _0x82b770=_0x46ffcc;VisuMZ[_0x82b770(0x354)]['Window_BattleLog_popupDamage'][_0x82b770(0x2e0)](this,_0x3e8cf6),this[_0x82b770(0x8d5)]();},Window_BattleLog['prototype'][_0x46ffcc(0x28e)]=function(){const _0x82ff23=_0x46ffcc;let _0x37e8bf=0x0;this[_0x82ff23(0x117)][_0x82ff23(0x9bf)]>0x0&&(_0x37e8bf=this['_baseLineStack'][this[_0x82ff23(0x117)][_0x82ff23(0x9bf)]-0x1]),this[_0x82ff23(0x9eb)]['length']>_0x37e8bf?this['wait']():this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0xbcb)],Window_BattleLog['prototype'][_0x46ffcc(0xbcb)]=function(_0x37fc66,_0xb9a3a2){const _0x4d0dee=_0x46ffcc;VisuMZ[_0x4d0dee(0x354)]['Window_BattleLog_performActionStart']['call'](this,_0x37fc66,_0xb9a3a2),this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x523)]=Window_BattleLog['prototype']['performAction'],Window_BattleLog['prototype']['performAction']=function(_0x502bf9,_0x272d84){const _0x2287ac=_0x46ffcc;VisuMZ[_0x2287ac(0x354)][_0x2287ac(0x523)][_0x2287ac(0x2e0)](this,_0x502bf9,_0x272d84),this[_0x2287ac(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0xb6f)]=Window_BattleLog['prototype'][_0x46ffcc(0x583)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x583)]=function(_0x4b4a40){const _0xb6c95b=_0x46ffcc;VisuMZ['BattleCore'][_0xb6c95b(0xb6f)][_0xb6c95b(0x2e0)](this,_0x4b4a40);for(const _0x1a76aa of BattleManager[_0xb6c95b(0x93e)]()){if(!_0x1a76aa)continue;if(_0x1a76aa[_0xb6c95b(0xb76)]())continue;_0x1a76aa[_0xb6c95b(0xab8)]();}this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x67b)]=Window_BattleLog['prototype'][_0x46ffcc(0x46b)],Window_BattleLog['prototype'][_0x46ffcc(0x46b)]=function(_0x3d8bf4){const _0xa27f5b=_0x46ffcc;VisuMZ[_0xa27f5b(0x354)]['Window_BattleLog_performDamage']['call'](this,_0x3d8bf4),this[_0xa27f5b(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x524)]=Window_BattleLog['prototype'][_0x46ffcc(0xacb)],Window_BattleLog['prototype'][_0x46ffcc(0xacb)]=function(_0x42cbcb){const _0x180168=_0x46ffcc;VisuMZ[_0x180168(0x354)][_0x180168(0x524)][_0x180168(0x2e0)](this,_0x42cbcb),this['callNextMethod']();},VisuMZ['BattleCore'][_0x46ffcc(0x54a)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x5a5)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x5a5)]=function(_0x7afc40){const _0xd0dd89=_0x46ffcc;VisuMZ[_0xd0dd89(0x354)][_0xd0dd89(0x54a)][_0xd0dd89(0x2e0)](this,_0x7afc40),this[_0xd0dd89(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x914)],Window_BattleLog['prototype'][_0x46ffcc(0x914)]=function(_0x19d0f9){const _0x2cf23f=_0x46ffcc;VisuMZ['BattleCore']['Window_BattleLog_performEvasion'][_0x2cf23f(0x2e0)](this,_0x19d0f9),this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x118)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x2cc)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x2cc)]=function(_0x3686a4){const _0x5a4f1d=_0x46ffcc;VisuMZ['BattleCore'][_0x5a4f1d(0x118)][_0x5a4f1d(0x2e0)](this,_0x3686a4),this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x657)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x657)]=function(_0x1e2ca1){const _0x44693d=_0x46ffcc;VisuMZ[_0x44693d(0x354)][_0x44693d(0x1fc)][_0x44693d(0x2e0)](this,_0x1e2ca1),this[_0x44693d(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x996)]=Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x718)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x718)]=function(_0xc8c10b){const _0x169c8e=_0x46ffcc;VisuMZ['BattleCore']['Window_BattleLog_performReflection']['call'](this,_0xc8c10b),this[_0x169c8e(0x8d5)]();},VisuMZ[_0x46ffcc(0x354)]['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype'][_0x46ffcc(0x28b)],Window_BattleLog['prototype'][_0x46ffcc(0x28b)]=function(_0x155a13,_0x4ecaf4){const _0x1d50e2=_0x46ffcc;VisuMZ[_0x1d50e2(0x354)][_0x1d50e2(0x321)][_0x1d50e2(0x2e0)](this,_0x155a13,_0x4ecaf4),this['callNextMethod']();},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x220)]=Window_BattleLog['prototype'][_0x46ffcc(0x791)],Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x791)]=function(_0x26df09){const _0x663386=_0x46ffcc;VisuMZ[_0x663386(0x354)][_0x663386(0x220)][_0x663386(0x2e0)](this,_0x26df09),this['callNextMethod']();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x7b3)]=function(_0x5a4d24,_0x3a791a){const _0x5f028f=_0x46ffcc;_0x5a4d24[_0x5f028f(0x7b3)](_0x3a791a),this[_0x5f028f(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x407)]=function(_0x4ed3dd,_0x1276a8){const _0x339cb3=_0x46ffcc,_0x43016c=_0x4ed3dd['attackAnimationId1']();_0x43016c<=0x0?SoundManager['playEnemyAttack']():this[_0x339cb3(0xae1)](_0x1276a8,_0x43016c);},Window_BattleLog[_0x46ffcc(0x9c1)]['applyImmortal']=function(_0x29cb5c,_0x1e8cec,_0x5d61c6){const _0x3c0fea=_0x46ffcc,_0x3ee85e=[_0x29cb5c][_0x3c0fea(0x385)](_0x1e8cec);for(const _0x4f0527 of _0x3ee85e){if(!_0x4f0527)continue;_0x4f0527[_0x3c0fea(0x395)](_0x5d61c6);}this['callNextMethod']();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x8a8)]=function(_0x3b78f9){const _0x2c0fc7=_0x46ffcc;this[_0x2c0fc7(0x5a0)]=_0x3b78f9;},Window_BattleLog[_0x46ffcc(0x9c1)]['requestMotion']=function(_0x598909,_0x280b3f){const _0x463f8b=_0x46ffcc;for(const _0x3a2932 of _0x598909){if(!_0x3a2932)continue;_0x3a2932[_0x463f8b(0x5f2)](_0x280b3f);}this[_0x463f8b(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x7fc)]=function(_0x55b621,_0x3ca807,_0x562706,_0x299098,_0x412a1e,_0x4e8847){const _0x31a5c1=_0x46ffcc;_0x55b621['moveBattlerToPoint'](_0x3ca807,_0x562706,_0x299098,_0x412a1e,_0x4e8847,-0x1),this[_0x31a5c1(0x8d5)]();},Window_BattleLog[_0x46ffcc(0x9c1)][_0x46ffcc(0x13d)]=function(_0x4df995,_0x161d0b,_0x5f052f,_0x26fc58,_0x2dc7bf,_0x4ff78c,_0x24c0c1){const _0xc6c2fc=_0x46ffcc,_0x41995d=Math[_0xc6c2fc(0x4d8)](..._0x161d0b['map'](_0x163ff9=>_0x163ff9['battler']()[_0xc6c2fc(0x72f)]-_0x163ff9['battler']()[_0xc6c2fc(0x54d)]()/0x2)),_0xf801c3=Math[_0xc6c2fc(0x148)](..._0x161d0b[_0xc6c2fc(0x6cd)](_0x5a68cd=>_0x5a68cd[_0xc6c2fc(0x430)]()[_0xc6c2fc(0x72f)]+_0x5a68cd[_0xc6c2fc(0x430)]()[_0xc6c2fc(0x54d)]()/0x2)),_0x3a3efb=Math[_0xc6c2fc(0x4d8)](..._0x161d0b[_0xc6c2fc(0x6cd)](_0x120e8d=>_0x120e8d['battler']()[_0xc6c2fc(0x97f)]-_0x120e8d['battler']()[_0xc6c2fc(0x8c2)]())),_0xf323b6=Math[_0xc6c2fc(0x148)](..._0x161d0b[_0xc6c2fc(0x6cd)](_0x39391c=>_0x39391c[_0xc6c2fc(0x430)]()['_baseY'])),_0x5b183a=_0x161d0b[_0xc6c2fc(0x8ba)](_0x3c11ab=>_0x3c11ab[_0xc6c2fc(0x738)]())['length'],_0x8f0adb=_0x161d0b[_0xc6c2fc(0x8ba)](_0x3dfbf5=>_0x3dfbf5[_0xc6c2fc(0x656)]())[_0xc6c2fc(0x9bf)];let _0x4ebd52=0x0,_0x5c297d=0x0;if(_0x5f052f[_0xc6c2fc(0xe0)](/front/i))_0x4ebd52=_0x5b183a>=_0x8f0adb?_0x41995d:_0xf801c3;else{if(_0x5f052f[_0xc6c2fc(0xe0)](/middle/i))_0x4ebd52=(_0x41995d+_0xf801c3)/0x2,_0x24c0c1=-0x1;else _0x5f052f['match'](/back/i)&&(_0x4ebd52=_0x5b183a>=_0x8f0adb?_0xf801c3:_0x41995d);}if(_0x5f052f['match'](/head/i))_0x5c297d=_0x3a3efb;else{if(_0x5f052f[_0xc6c2fc(0xe0)](/center/i)){_0x5c297d=(_0x3a3efb+_0xf323b6)/0x2;if(_0x4df995['battler']())_0x5c297d+=_0x4df995[_0xc6c2fc(0x430)]()[_0xc6c2fc(0x212)]/0x2;}else _0x5f052f[_0xc6c2fc(0xe0)](/base/i)&&(_0x5c297d=_0xf323b6);}_0x4df995[_0xc6c2fc(0x49f)](_0x4ebd52,_0x5c297d,_0x26fc58,_0x2dc7bf,_0x4ff78c,_0x24c0c1),this[_0xc6c2fc(0x8d5)]();},Window_BattleLog['prototype'][_0x46ffcc(0x683)]=function(_0x420bc4,_0x348929,_0x1ea4d7){const _0x502783=_0x46ffcc;for(const _0x41fd24 of _0x420bc4){if(!_0x41fd24)continue;_0x41fd24[_0x502783(0xd9)](_0x348929,_0x1ea4d7);}this[_0x502783(0x8d5)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x46ffcc(0x411)](Window_Command['prototype']),Window_BattleMultiTarget['prototype']['constructor']=Window_BattleMultiTarget,VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['MultiTarget']=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)]||{},Window_BattleMultiTarget[_0x46ffcc(0x878)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)][_0x46ffcc(0x368)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)][_0x46ffcc(0xa4e)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ['BattleCore'][_0x46ffcc(0x59e)]['MultiTarget'][_0x46ffcc(0xb63)]??!![],Window_BattleMultiTarget[_0x46ffcc(0x2a9)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)][_0x46ffcc(0x618)]??'All\x20Allies',Window_BattleMultiTarget[_0x46ffcc(0x123)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)][_0x46ffcc(0x7f1)]??_0x46ffcc(0x89b),Window_BattleMultiTarget[_0x46ffcc(0x7e1)]=VisuMZ['BattleCore']['Settings'][_0x46ffcc(0x99a)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x46ffcc(0x3fe)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)][_0x46ffcc(0x310)]??0x0,Window_BattleMultiTarget[_0x46ffcc(0x3e0)]=VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x99a)]['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x46ffcc(0x9b5)]=VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x99a)]['EnemyOffsetY']??0x0,Window_BattleMultiTarget[_0x46ffcc(0x9c1)]['initialize']=function(_0x130901,_0x757ba){const _0x570418=_0x46ffcc;this['_forActor']=_0x757ba,Window_Command[_0x570418(0x9c1)][_0x570418(0x3e3)][_0x570418(0x2e0)](this,_0x130901),this[_0x570418(0x9cb)](Window_BattleMultiTarget['BG_TYPE']),this['deactivate'](),this[_0x570418(0x369)](),this[_0x570418(0x9f5)]();},Window_BattleMultiTarget['prototype'][_0x46ffcc(0x7f7)]=function(){const _0x2eadc9=_0x46ffcc;return this[_0x2eadc9(0x316)];},Window_BattleMultiTarget[_0x46ffcc(0x9c1)]['makeCommandList']=function(){const _0x3477a5=_0x46ffcc;let _0x167367=this[_0x3477a5(0x7f7)]()?Window_BattleMultiTarget[_0x3477a5(0x2a9)]:Window_BattleMultiTarget[_0x3477a5(0x123)];if(Imported[_0x3477a5(0xbaf)]&&Window_BattleMultiTarget[_0x3477a5(0x2b0)]){this[_0x3477a5(0x30a)]=this['forActor']()?_0x3477a5(0x918):'pageup',this['_buttonText']=TextManager[_0x3477a5(0x77f)](this[_0x3477a5(0x30a)]);const _0x1ddf91=VisuMZ[_0x3477a5(0x574)][_0x3477a5(0x59e)][_0x3477a5(0x3fa)][_0x3477a5(0x680)];_0x167367=_0x1ddf91[_0x3477a5(0x498)](this[_0x3477a5(0xae3)],_0x167367);}this['addCommand'](_0x167367,'selectAll');},Window_BattleMultiTarget[_0x46ffcc(0x9c1)][_0x46ffcc(0x37f)]=function(_0x14f541){const _0x1eb836=_0x46ffcc,_0x360aa5=this[_0x1eb836(0xb73)](_0x14f541);this[_0x1eb836(0x4fc)](),this['changePaintOpacity'](this['isCommandEnabled'](_0x14f541));const _0x279f87=this[_0x1eb836(0x750)](_0x14f541),_0x58d8eb=this['textSizeEx'](_0x279f87)[_0x1eb836(0x448)],_0x23113c=_0x360aa5['x']+Math['floor']((_0x360aa5[_0x1eb836(0x448)]-_0x58d8eb)/0x2);this[_0x1eb836(0x4b9)](_0x279f87,_0x23113c,_0x360aa5['y'],_0x360aa5[_0x1eb836(0x448)]);},Window_BattleMultiTarget[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x3306c8=_0x46ffcc;Window_Command[_0x3306c8(0x9c1)]['update'][_0x3306c8(0x2e0)](this),this[_0x3306c8(0x829)](),this[_0x3306c8(0x71a)]();},Window_BattleMultiTarget['prototype'][_0x46ffcc(0x829)]=function(){const _0x3764b8=_0x46ffcc;this[_0x3764b8(0xa23)]=this[_0x3764b8(0x8fe)]();},Window_BattleMultiTarget['prototype'][_0x46ffcc(0x8fe)]=function(){const _0x4865c5=_0x46ffcc,_0x444c12=BattleManager[_0x4865c5(0x772)](),_0x47a204=_0x444c12&&_0x444c12[_0x4865c5(0x82c)]();if(!_0x47a204)return![];const _0x7cbcf=SceneManager['_scene'];if(this[_0x4865c5(0x7f7)]()){if(_0x7cbcf['_actorWindow'][_0x4865c5(0x164)]&&_0x7cbcf[_0x4865c5(0x6e0)][_0x4865c5(0xb0b)][_0x4865c5(0x918)])return!![];if(_0x7cbcf[_0x4865c5(0x1eb)][_0x4865c5(0x164)]&&_0x7cbcf[_0x4865c5(0x1eb)][_0x4865c5(0xb0b)]['pagedown'])return!![];}else{if(_0x7cbcf[_0x4865c5(0x1eb)][_0x4865c5(0x164)]&&_0x7cbcf[_0x4865c5(0x1eb)][_0x4865c5(0xb0b)]['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x46ffcc(0x9c1)]['updateKeyboardKeys']=function(){const _0x2ff66d=_0x46ffcc;if(!Imported['VisuMZ_0_CoreEngine'])return;this[_0x2ff66d(0xae3)]!==TextManager[_0x2ff66d(0x77f)](this[_0x2ff66d(0x30a)])&&this[_0x2ff66d(0xb53)]();},Window_BattleMultiTarget[_0x46ffcc(0x9c1)][_0x46ffcc(0xb55)]=function(){const _0x50da6d=_0x46ffcc;if(this['visible']&&TouchInput[_0x50da6d(0x7d5)]()){const _0x45674d=this['hitIndex']();if(_0x45674d>=0x0){const _0x40c14a=this[_0x50da6d(0x7f7)]()?_0x50da6d(0x918):_0x50da6d(0x332);Input['virtualClick'](_0x40c14a);}}};function Window_DamageCounter(){const _0x994f2=_0x46ffcc;this[_0x994f2(0x3e3)](...arguments);}Window_DamageCounter[_0x46ffcc(0x9c1)]=Object['create'](Window_Base[_0x46ffcc(0x9c1)]),Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x42f)]=Window_DamageCounter,Window_DamageCounter[_0x46ffcc(0x9b9)]={'enabled':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0xba9)]??!![],'customFontFace':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x5b3)][_0x46ffcc(0x664)]??'','textAlign':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x5b3)][_0x46ffcc(0x92c)]??_0x46ffcc(0x9f3),'hitsDmgFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x629)]??_0x46ffcc(0x165),'hitsHealFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0xa17)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','totalDmgFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['ComboWindow']['totalDmgFmt']??_0x46ffcc(0x4ae),'totalHealFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x585)]??_0x46ffcc(0x18f),'fadeShiftX':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x1a5)]??-0x2,'fadeShiftY':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x2ad)]??0x0,'positionOffsetX':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x951)]??0x0,'positionOffsetY':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0xaca)]??0x0,'updateDuration':VisuMZ['BattleCore'][_0x46ffcc(0x59e)]['ComboWindow'][_0x46ffcc(0xb6e)]??0x14,'minimumStayDuration':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)]['minimumStayDuration']??0x28,'minimumHits':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x5b3)][_0x46ffcc(0x733)]??0x1,'opacitySpeed':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['ComboWindow'][_0x46ffcc(0x172)]??0x10},Window_DamageCounter[_0x46ffcc(0x9c1)]['initialize']=function(_0x518794){const _0x2eaa22=_0x46ffcc;this[_0x2eaa22(0xa58)]=0x0,Window_Base[_0x2eaa22(0x9c1)][_0x2eaa22(0x3e3)][_0x2eaa22(0x2e0)](this,_0x518794),this[_0x2eaa22(0xba4)]=_0x518794['x'],this[_0x2eaa22(0xbac)]=_0x518794['y'],this[_0x2eaa22(0x698)](),this['setBackgroundType'](0x2);},Window_DamageCounter[_0x46ffcc(0x9c1)]['resetCounter']=function(){const _0x427ad1=_0x46ffcc;this[_0x427ad1(0x8e7)]=0x0,this[_0x427ad1(0x947)]=0x0,this['_totalDamage']=0x0,this[_0x427ad1(0x736)]=0x0,this[_0x427ad1(0x9fe)]=0x0;},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x2cd)]=function(){const _0x2912c1=_0x46ffcc;Window_Base[_0x2912c1(0x9c1)]['resetFontSettings']['call'](this);const _0x3bad8e=Window_DamageCounter[_0x2912c1(0x9b9)];_0x3bad8e[_0x2912c1(0x365)]?this[_0x2912c1(0xab6)]['fontFace']=_0x3bad8e[_0x2912c1(0x365)]:this[_0x2912c1(0xab6)][_0x2912c1(0x39c)]=$gameSystem[_0x2912c1(0x10b)]();};var $comboWindowReset=function(){const _0x4b5477=_0x46ffcc;if(!SceneManager[_0x4b5477(0xaf2)]())return;const _0x22767c=SceneManager[_0x4b5477(0x5e4)][_0x4b5477(0x140)];if(_0x22767c)_0x22767c['resetCounter']();};Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0xa37)]=function(_0x51f177){const _0x99e70e=_0x46ffcc;this[_0x99e70e(0x736)]+=Math['round'](_0x51f177);const _0x5ab4ee=Window_DamageCounter[_0x99e70e(0x9b9)];this['_updateDuration']=_0x5ab4ee['updateDuration'],this[_0x99e70e(0x736)]>=_0x5ab4ee[_0x99e70e(0x733)]&&(this['_visibleDuration']=_0x5ab4ee[_0x99e70e(0x9e9)]);};var $comboWindowIncreaseHits=function(_0x3e4728){const _0x3d8bd8=_0x46ffcc;if(!SceneManager[_0x3d8bd8(0xaf2)]())return;const _0x2dac1e=SceneManager['_scene'][_0x3d8bd8(0x140)];if(_0x2dac1e)_0x2dac1e[_0x3d8bd8(0xa37)](_0x3e4728);};Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0xa1c)]=function(_0x205c71){const _0x8fa0df=_0x46ffcc;this[_0x8fa0df(0x9fe)]+=Math['round'](_0x205c71);const _0x45a879=Window_DamageCounter[_0x8fa0df(0x9b9)];this[_0x8fa0df(0x8e7)]=_0x45a879[_0x8fa0df(0xb6e)],this[_0x8fa0df(0x736)]>=_0x45a879[_0x8fa0df(0x733)]&&(this[_0x8fa0df(0xa58)]=_0x45a879['minimumStayDuration']);};var $comboWindowIncreaseDamage=function(_0x2f1ada){const _0x2ce27c=_0x46ffcc;if(!SceneManager[_0x2ce27c(0xaf2)]())return;const _0x2c8f1d=SceneManager[_0x2ce27c(0x5e4)][_0x2ce27c(0x140)];if(_0x2c8f1d)_0x2c8f1d[_0x2ce27c(0xa1c)](_0x2f1ada);},$comboWindowIncreaseHealing=function(_0x3c8f89){const _0x43cdcb=_0x46ffcc;if(!SceneManager[_0x43cdcb(0xaf2)]())return;const _0x45e2ca=SceneManager[_0x43cdcb(0x5e4)][_0x43cdcb(0x140)];if(_0x45e2ca)_0x45e2ca['increaseTotal'](-_0x3c8f89);};VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x65e)]=Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2d4)],Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x2d4)]=function(){const _0x2e46b6=_0x46ffcc;this[_0x2e46b6(0x8be)](),VisuMZ[_0x2e46b6(0x354)][_0x2e46b6(0x65e)]['call'](this);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x8be)]=function(){const _0x4982c8=_0x46ffcc;if(!Window_DamageCounter['SETTINGS'][_0x4982c8(0x2cb)])return;const _0x4177cc=this[_0x4982c8(0x1a4)](),_0x340957=new Window_DamageCounter(_0x4177cc);this[_0x4982c8(0x9ed)](_0x340957),this['_damageCounterWindow']=_0x340957;},Scene_Battle[_0x46ffcc(0x9c1)]['damageCounterWindowRect']=function(){const _0x4b277c=_0x46ffcc;if(VisuMZ['BattleCore'][_0x4b277c(0x59e)]['ComboWindow'][_0x4b277c(0x425)])return VisuMZ['BattleCore'][_0x4b277c(0x59e)]['ComboWindow'][_0x4b277c(0x425)][_0x4b277c(0x2e0)](this);const _0xb1d94b=Math[_0x4b277c(0xa14)](Graphics[_0x4b277c(0x448)]/0x4),_0x3356b0=this[_0x4b277c(0x2fe)](0x2,!![]),_0x2f6839=0x0+this[_0x4b277c(0x4a8)](),_0x575bb8=Math[_0x4b277c(0x6da)](Graphics[_0x4b277c(0x78c)]*0x1/0x3)+this[_0x4b277c(0x982)]();return new Rectangle(_0x2f6839,_0x575bb8,_0xb1d94b,_0x3356b0);},Scene_Battle[_0x46ffcc(0x9c1)][_0x46ffcc(0x4a8)]=function(){return Window_DamageCounter['SETTINGS']['positionOffsetX'];},Scene_Battle[_0x46ffcc(0x9c1)]['comboWindowOffsetY']=function(){const _0x50bd54=_0x46ffcc;return Window_DamageCounter[_0x50bd54(0x9b9)]['positionOffsetY'];},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x881)]=function(){const _0x57ed73=_0x46ffcc;Window_Base[_0x57ed73(0x9c1)][_0x57ed73(0x881)][_0x57ed73(0x2e0)](this),this['updateCounter'](),this[_0x57ed73(0x3aa)]();},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x694)]=function(){const _0x15bc7a=_0x46ffcc;if(this[_0x15bc7a(0x8e7)]<=0x0)return;const _0x269616=this[_0x15bc7a(0x8e7)];this[_0x15bc7a(0x947)]=this[_0x15bc7a(0x736)],this[_0x15bc7a(0x238)]=(this[_0x15bc7a(0x238)]*(_0x269616-0x1)+this['_targetDamage'])/_0x269616,this[_0x15bc7a(0x8e7)]--,this['_updateDuration']<=0x0&&(this[_0x15bc7a(0x947)]=this[_0x15bc7a(0x736)],this[_0x15bc7a(0x238)]=this[_0x15bc7a(0x9fe)]),this[_0x15bc7a(0xb53)]();},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x3aa)]=function(){const _0x1b2666=_0x46ffcc,_0x230b04=Window_DamageCounter[_0x1b2666(0x9b9)],_0x9f9a70=this['visibilityState'](),_0x5c95f4=_0x230b04[_0x1b2666(0x172)]||0x1;if(_0x9f9a70&&this['contentsOpacity']<0xff)this['contentsOpacity']+=_0x5c95f4;else!_0x9f9a70&&this[_0x1b2666(0x95e)]>0x0&&(this[_0x1b2666(0x95e)]-=_0x5c95f4,this['x']+=_0x230b04[_0x1b2666(0x1a5)]||0x0,this['y']+=_0x230b04[_0x1b2666(0x2ad)]||0x0);},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x8fe)]=function(){const _0x1896c3=_0x46ffcc,_0x1b88ea=Window_DamageCounter[_0x1896c3(0x9b9)];if(this['_targetHits']>=_0x1b88ea[_0x1896c3(0x733)])return!![];if(this[_0x1896c3(0xa58)]-->0x0)return!![];return![];},VisuMZ[_0x46ffcc(0x354)]['Game_Action_executeHpDamage_ComboWindow']=Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x83b)],Game_Action[_0x46ffcc(0x9c1)][_0x46ffcc(0x83b)]=function(_0x1df2bc,_0x53441b){const _0x23d4e0=_0x46ffcc;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x53441b),VisuMZ[_0x23d4e0(0x354)]['Game_Action_executeHpDamage_ComboWindow'][_0x23d4e0(0x2e0)](this,_0x1df2bc,_0x53441b);},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x651)]=BattleManager[_0x46ffcc(0x72a)],BattleManager[_0x46ffcc(0x72a)]=function(){const _0x5de35c=_0x46ffcc;$comboWindowReset(),VisuMZ[_0x5de35c(0x354)][_0x5de35c(0x651)][_0x5de35c(0x2e0)](this);},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0x110d5c=_0x46ffcc;this['contents']['clear'](),this[_0x110d5c(0x8f6)](),this['x']=this[_0x110d5c(0xba4)],this['y']=this[_0x110d5c(0xbac)];},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0xa49)]=function(){const _0x41dfdc=_0x46ffcc,_0x10e553=Window_DamageCounter[_0x41dfdc(0x9b9)];return _0x10e553[_0x41dfdc(0x94c)]||'left';},Window_DamageCounter[_0x46ffcc(0x9c1)]['hitText']=function(){const _0x460f79=_0x46ffcc,_0x5527f0=Window_DamageCounter[_0x460f79(0x9b9)];let _0x5f0acc=this['_totalDamage']>=0x0?_0x5527f0['hitsDmgFmt']:_0x5527f0[_0x460f79(0xa17)];return _0x5f0acc[_0x460f79(0x498)](Math['abs'](Math['ceil'](this[_0x460f79(0x947)])));},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0xb31)]=function(){const _0x4078b4=_0x46ffcc,_0x59e52b=Window_DamageCounter['SETTINGS'];let _0x4b90f5=this[_0x4078b4(0x238)]>=0x0?_0x59e52b[_0x4078b4(0x6f2)]:_0x59e52b[_0x4078b4(0x585)];return _0x4b90f5['format'](Math['abs'](Math[_0x4078b4(0x6da)](this['_totalDamage'])));},Window_DamageCounter[_0x46ffcc(0x9c1)][_0x46ffcc(0x8f6)]=function(){const _0xc5acb8=_0x46ffcc;if(VisuMZ['BattleCore'][_0xc5acb8(0x59e)][_0xc5acb8(0x5b3)][_0xc5acb8(0xa62)])return VisuMZ[_0xc5acb8(0x354)][_0xc5acb8(0x59e)]['ComboWindow'][_0xc5acb8(0xa62)][_0xc5acb8(0x2e0)](this);let _0x12276c=0x0,_0x203149=0x0;const _0x2ab774=this[_0xc5acb8(0x9f1)](),_0x9c8df4=this[_0xc5acb8(0x520)](_0x2ab774);if(this[_0xc5acb8(0xa49)]()==='right')_0x12276c=this['innerWidth']-this[_0xc5acb8(0x274)]()-_0x9c8df4['width'];else this[_0xc5acb8(0xa49)]()===_0xc5acb8(0x7bf)?_0x12276c=Math['floor']((this[_0xc5acb8(0x7de)]-_0x9c8df4['width'])/0x2):_0x12276c=this[_0xc5acb8(0x274)]();this[_0xc5acb8(0x4b9)](_0x2ab774,_0x12276c,_0x203149),_0x203149+=Math['ceil'](this[_0xc5acb8(0x3eb)]()*0x2/0x3);const _0x334594=this[_0xc5acb8(0xb31)](),_0x1e256d=this['textSizeEx'](_0x334594);if(this['textAlignment']()==='right')_0x12276c=this[_0xc5acb8(0x7de)]-this['itemPadding']()-_0x1e256d[_0xc5acb8(0x448)];else this[_0xc5acb8(0xa49)]()===_0xc5acb8(0x7bf)?_0x12276c=Math['floor']((this[_0xc5acb8(0x7de)]-_0x1e256d[_0xc5acb8(0x448)])/0x2):_0x12276c=this['itemPadding']();this[_0xc5acb8(0x4b9)](_0x334594,_0x12276c,_0x203149);};function Window_InBattleStatus(){const _0xcce00e=_0x46ffcc;this[_0xcce00e(0x3e3)](...arguments);}Window_InBattleStatus[_0x46ffcc(0x9c1)]=Object['create'](Window_StatusBase[_0x46ffcc(0x9c1)]),Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x42f)]=Window_InBattleStatus,Window_InBattleStatus[_0x46ffcc(0x9b9)]={'bgType':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)]['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['InBattleStatus'][_0x46ffcc(0x828)]??'face','statusHelpDesc':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x341)]??_0x46ffcc(0x9f8),'pageButtons':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)][_0x46ffcc(0x3ec)]??!![],'pageButtonPosition':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)][_0x46ffcc(0x81a)]??'left','pageOffsetX':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xa08)]??0x0,'pageOffsetY':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x4c1)]??0x0,'buffValueFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x34d)]??_0x46ffcc(0x1c8),'debuffValueFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['InBattleStatus'][_0x46ffcc(0x973)]??_0x46ffcc(0xa24),'enemyStatus':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)]['enemyStatus']??!![],'enemyShowLevel':VisuMZ[_0x46ffcc(0x354)]['Settings']['InBattleStatus'][_0x46ffcc(0x2d0)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ['BattleCore'][_0x46ffcc(0x59e)]['InBattleStatus']['enemyHiddenParameter']??_0x46ffcc(0x4b6),'enemyShowParametersAlways':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)][_0x46ffcc(0xa6b)]??![],'enemyShowParametersIfBattleTest':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xaf6)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x8c5)]??!![]},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x3e3)]=function(_0x1e5192){const _0x118a6e=_0x46ffcc;Window_StatusBase[_0x118a6e(0x9c1)][_0x118a6e(0x3e3)][_0x118a6e(0x2e0)](this,_0x1e5192),this['setBackgroundType'](Window_InBattleStatus[_0x118a6e(0x9b9)]['bgType']),this[_0x118a6e(0xe7)](),this[_0x118a6e(0xa38)](),this[_0x118a6e(0x435)]();},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d1)]=function(_0xb5a808){const _0x2344ee=_0x46ffcc;this[_0x2344ee(0x50c)]=_0xb5a808,this[_0x2344ee(0xb53)](),this[_0x2344ee(0x517)]&&this['_statesWindow'][_0x2344ee(0x1d1)](_0xb5a808);},Window_InBattleStatus[_0x46ffcc(0x9c1)]['open']=function(){const _0x3d3c8d=_0x46ffcc;Window_StatusBase[_0x3d3c8d(0x9c1)][_0x3d3c8d(0xadc)][_0x3d3c8d(0x2e0)](this);if(this[_0x3d3c8d(0x517)])this[_0x3d3c8d(0x517)]['open']();this[_0x3d3c8d(0x729)](),Imported['VisuMZ_3_StateTooltips']&&SceneManager[_0x3d3c8d(0x7d1)](null);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x6d0)]=function(){const _0x2e218c=_0x46ffcc;Window_StatusBase[_0x2e218c(0x9c1)][_0x2e218c(0x6d0)][_0x2e218c(0x2e0)](this);if(this[_0x2e218c(0x517)])this['_statesWindow'][_0x2e218c(0x6d0)]();},Window_InBattleStatus['prototype'][_0x46ffcc(0xbe8)]=function(_0x47c4ac){this['_returnWindow']=_0x47c4ac;},Window_InBattleStatus[_0x46ffcc(0x9c1)]['getReturnWindow']=function(){const _0x4afe6c=_0x46ffcc;return this[_0x4afe6c(0x6a9)]||SceneManager[_0x4afe6c(0x5e4)][_0x4afe6c(0xb51)];},Window_InBattleStatus[_0x46ffcc(0x9c1)]['loadFaceImages']=function(){const _0x16cf45=_0x46ffcc;Window_StatusBase['prototype'][_0x16cf45(0x304)][_0x16cf45(0x2e0)](this),this[_0x16cf45(0x85a)]();},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x85a)]=function(){const _0x38ee09=_0x46ffcc;for(const _0x5a770e of $gameParty['members']()){if(!_0x5a770e)continue;_0x5a770e['characterName']()&&ImageManager[_0x38ee09(0x92b)](_0x5a770e[_0x38ee09(0x108)]()),_0x5a770e[_0x38ee09(0x824)]()&&ImageManager['loadSvActor'](_0x5a770e[_0x38ee09(0x824)]()),Imported[_0x38ee09(0x6ff)]&&_0x5a770e[_0x38ee09(0x187)]()&&ImageManager[_0x38ee09(0x907)](_0x5a770e[_0x38ee09(0x187)]());}},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xe7)]=function(){const _0x4c63b7=_0x46ffcc;this[_0x4c63b7(0x84b)]=new Sprite(),this[_0x4c63b7(0x84b)][_0x4c63b7(0x404)]['x']=0.5,this['_enemySprite'][_0x4c63b7(0x404)]['y']=0x1,this[_0x4c63b7(0xb15)](this[_0x4c63b7(0x84b)]);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xa38)]=function(){const _0x59491b=_0x46ffcc,_0x563ff0=this[_0x59491b(0xa2e)](),_0x35ac45=new Window_InBattleStatusStates(_0x563ff0);this['addChild'](_0x35ac45),_0x35ac45[_0x59491b(0x18a)](SceneManager[_0x59491b(0x5e4)][_0x59491b(0x76e)]),this['_statesWindow']=_0x35ac45;},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xa2e)]=function(){const _0x582217=_0x46ffcc,_0x36198a=Window_InBattleStatusStates[_0x582217(0x9b9)][_0x582217(0x408)],_0x2adca4=Math['min'](_0x36198a,Math[_0x582217(0x27a)](this['width']/0x2)),_0x27da94=Graphics['boxWidth']>0x44c?this['height']:this[_0x582217(0x3eb)]()*0x4+this[_0x582217(0x579)]*0x2,_0x4741e6=this[_0x582217(0x448)]-_0x2adca4,_0x3a55a6=this[_0x582217(0x212)]-_0x27da94;return new Rectangle(_0x4741e6,_0x3a55a6,_0x2adca4,_0x27da94);},Window_InBattleStatus[_0x46ffcc(0x9c1)]['createPageButtons']=function(){const _0xe6975d=_0x46ffcc;if(!ConfigManager[_0xe6975d(0x955)])return;if(!Window_InBattleStatus[_0xe6975d(0x9b9)][_0xe6975d(0x3ec)])return;this[_0xe6975d(0x4de)]=new Sprite_Button(_0xe6975d(0x332)),this[_0xe6975d(0x4de)]['x']=this[_0xe6975d(0x23c)]()+Window_InBattleStatus[_0xe6975d(0x9b9)][_0xe6975d(0xa08)],this[_0xe6975d(0x4de)]['y']=this[_0xe6975d(0xbbe)]()+Window_InBattleStatus[_0xe6975d(0x9b9)][_0xe6975d(0x4c1)];const _0x465a2f=this['_pageupButton']['x']+this[_0xe6975d(0x4de)]['width'];this['_pagedownButton']=new Sprite_Button(_0xe6975d(0x918)),this[_0xe6975d(0x3b9)]['x']=_0x465a2f+0x4,this[_0xe6975d(0x3b9)]['y']=this[_0xe6975d(0x4de)]['y'],this[_0xe6975d(0xb15)](this[_0xe6975d(0x4de)]),this['addChild'](this[_0xe6975d(0x3b9)]),this[_0xe6975d(0x4de)]['setClickHandler'](this[_0xe6975d(0x9f7)]['bind'](this)),this['_pagedownButton'][_0xe6975d(0x45c)](this['nextActor'][_0xe6975d(0x479)](this));},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x23c)]=function(){const _0x85b319=_0x46ffcc;if(Graphics['boxWidth']>0x44c&&Graphics[_0x85b319(0x78c)]>0x2bc){if(Window_InBattleStatus[_0x85b319(0x9b9)][_0x85b319(0x81a)]===_0x85b319(0x9f3)){let _0x404df1=Math[_0x85b319(0xa14)]((-this['x']-0x64)/0x2);if(_0x404df1>=-0x64)_0x404df1=this[_0x85b319(0x579)];return _0x404df1;}else{const _0x20eb49=Graphics[_0x85b319(0xab3)]-this['x']-this['width'];let _0x435be4=Math['floor']((_0x20eb49-0x64)/0x2)+this[_0x85b319(0x448)];return _0x435be4;}}else return this[_0x85b319(0x448)]-0x64-this[_0x85b319(0x579)]/0x2;},Window_InBattleStatus[_0x46ffcc(0x9c1)]['pageButtonY']=function(){const _0x3eaabd=_0x46ffcc;return Graphics['boxWidth']>0x44c&&Graphics[_0x3eaabd(0x78c)]>0x2bc?this[_0x3eaabd(0x212)]-0x30-this[_0x3eaabd(0x579)]:0x30+this[_0x3eaabd(0x579)];},Window_InBattleStatus['prototype']['previousActor']=function(){const _0x27981d=_0x46ffcc;let _0x39f0ea=this[_0x27981d(0x4b5)]();if(_0x39f0ea[_0x27981d(0x9bf)]<=0x1&&!Window_InBattleStatus['SETTINGS']['enemyStatus'])return;let _0x3a0c58=_0x39f0ea[_0x27981d(0xb8c)](this[_0x27981d(0x50c)]);_0x3a0c58--;_0x3a0c58<0x0&&(Window_InBattleStatus[_0x27981d(0x9b9)]['enemyStatus']&&(_0x39f0ea=this['getBattleMembers'](!![])),_0x3a0c58=_0x39f0ea['length']-0x1);const _0x151cc4=_0x39f0ea[_0x3a0c58];this[_0x27981d(0x1d1)](_0x151cc4),SoundManager[_0x27981d(0xa70)]();},Window_InBattleStatus['prototype'][_0x46ffcc(0x4ee)]=function(){const _0x39b404=_0x46ffcc;let _0xa2044d=this[_0x39b404(0x4b5)]();if(_0xa2044d['length']<=0x1&&!Window_InBattleStatus['SETTINGS'][_0x39b404(0x87b)])return;let _0x57ef47=_0xa2044d[_0x39b404(0xb8c)](this[_0x39b404(0x50c)]);_0x57ef47++;_0x57ef47>=_0xa2044d[_0x39b404(0x9bf)]&&(Window_InBattleStatus[_0x39b404(0x9b9)][_0x39b404(0x87b)]&&(_0xa2044d=this[_0x39b404(0x4b5)](!![])),_0x57ef47=0x0);const _0x2de0af=_0xa2044d[_0x57ef47];this[_0x39b404(0x1d1)](_0x2de0af),SoundManager[_0x39b404(0xa70)]();},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x4b5)]=function(_0x174697){const _0x174e8d=_0x46ffcc;let _0x1184ec=[];const _0x4dd0a4=_0x174697?this[_0x174e8d(0x50c)][_0x174e8d(0xbea)]():this[_0x174e8d(0x50c)]['friendsUnit']();return _0x4dd0a4===$gameParty?_0x1184ec=$gameParty[_0x174e8d(0xbdb)]():_0x1184ec=$gameTroop[_0x174e8d(0x312)](),_0x1184ec[_0x174e8d(0x112)](null);},Window_InBattleStatus['prototype'][_0x46ffcc(0x881)]=function(){const _0x56462a=_0x46ffcc;Window_Base[_0x56462a(0x9c1)][_0x56462a(0x881)]['call'](this),this['processHandling']();},Window_InBattleStatus[_0x46ffcc(0x9c1)]['processHandling']=function(){const _0x418c07=_0x46ffcc;if(this[_0x418c07(0xbb7)]()){if(this[_0x418c07(0x54e)]())return this[_0x418c07(0x823)]();if(Input[_0x418c07(0x39d)]('right'))return this[_0x418c07(0x4ee)]();if(Input['isRepeated'](_0x418c07(0x9f3)))return this[_0x418c07(0x9f7)]();}},SoundManager[_0x46ffcc(0xa70)]=function(){const _0x423299=_0x46ffcc;this[_0x423299(0x731)](0x0);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xbb7)]=function(){const _0x150e9d=_0x46ffcc;return this[_0x150e9d(0xb39)]()&&this['visible'];},Window_InBattleStatus['prototype'][_0x46ffcc(0x54e)]=function(){const _0x381d28=_0x46ffcc;if(Input[_0x381d28(0x477)]('cancel'))return!![];if(TouchInput[_0x381d28(0x120)]())return!![];return![];},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x823)]=function(){const _0x4bc1af=_0x46ffcc;SoundManager[_0x4bc1af(0x810)](),this[_0x4bc1af(0xa57)](),this[_0x4bc1af(0x517)]&&(this[_0x4bc1af(0x517)][_0x4bc1af(0x9f5)](),this[_0x4bc1af(0x517)][_0x4bc1af(0xa57)]()),SceneManager[_0x4bc1af(0x5e4)]['endInBattleStatus']();},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x729)]=function(){const _0x1b786c=_0x46ffcc;if(!this[_0x1b786c(0x4de)])return;if(!this[_0x1b786c(0x3b9)])return;const _0x494f4c=$gameParty[_0x1b786c(0xbdb)]()[_0x1b786c(0x9bf)]>0x0||Window_InBattleStatus['SETTINGS'][_0x1b786c(0x87b)];this['_pageupButton'][_0x1b786c(0xa23)]=_0x494f4c,this[_0x1b786c(0x3b9)][_0x1b786c(0xa23)]=_0x494f4c;},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0xb53)]=function(){const _0x588c00=_0x46ffcc;Window_StatusBase[_0x588c00(0x9c1)][_0x588c00(0xb53)][_0x588c00(0x2e0)](this);if(this[_0x588c00(0x84b)])this[_0x588c00(0x84b)]['hide']();this[_0x588c00(0xab6)][_0x588c00(0x91f)](),this['contentsBack'][_0x588c00(0x91f)]();if(!this[_0x588c00(0x50c)])return;this[_0x588c00(0x2b8)]();},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x2b8)]=function(){const _0x4a71cd=_0x46ffcc;if(VisuMZ[_0x4a71cd(0x354)][_0x4a71cd(0x59e)][_0x4a71cd(0x7da)]['StatusWindow_DrawJS'])return VisuMZ[_0x4a71cd(0x354)]['Settings'][_0x4a71cd(0x7da)][_0x4a71cd(0x1a3)][_0x4a71cd(0x2e0)](this);{const _0x2b3b0a=this[_0x4a71cd(0x1a9)]()/0x2,_0x3207c9=ImageManager[_0x4a71cd(0x4f2)],_0x56c143=_0x3207c9/0x2-this['lineHeight']()*1.5;this[_0x4a71cd(0x927)](this[_0x4a71cd(0x50c)],_0x2b3b0a+0x1,0x0,ImageManager[_0x4a71cd(0x35b)],_0x3207c9),this[_0x4a71cd(0x39e)](this['_battler'],_0x2b3b0a+0xb4,_0x56c143);}{let _0x1b4c48=this[_0x4a71cd(0x12e)](),_0x1a5d14=0x0,_0x43e64e=Math['ceil'](this[_0x4a71cd(0x12e)]()/0x2),_0xd0bb9b=0x0;const _0x21be70=this[_0x4a71cd(0x26b)]();let _0x2e85d8=_0x1a5d14;const _0x34c91a=this['innerHeight']-ImageManager[_0x4a71cd(0x4f2)],_0x2c299a=Math['ceil'](_0x21be70[_0x4a71cd(0x9bf)]/0x2)*this['lineHeight']();let _0x48bd8c=Math[_0x4a71cd(0xa14)]((_0x34c91a-_0x2c299a)/0x2)+ImageManager[_0x4a71cd(0x4f2)],_0x31b0e0=Math['floor'](_0x1b4c48/0x2);this[_0x4a71cd(0x517)]['y']!==0x0&&(this['_statesWindow']['y']=_0x48bd8c);for(const _0x2512b6 of _0x21be70){this[_0x4a71cd(0x8c7)](_0x2e85d8,_0x48bd8c,_0x31b0e0,this[_0x4a71cd(0x3eb)]()),this['drawParamData'](_0x2512b6,_0x2e85d8,_0x48bd8c,_0x31b0e0),_0xd0bb9b++,_0xd0bb9b%0x2===0x0?(_0x2e85d8=_0x1a5d14,_0x48bd8c+=this[_0x4a71cd(0x3eb)]()):_0x2e85d8=_0x43e64e;}}},Window_InBattleStatus['prototype'][_0x46ffcc(0x6af)]=function(){const _0x21e3cb=_0x46ffcc;return VisuMZ[_0x21e3cb(0x354)][_0x21e3cb(0x59e)][_0x21e3cb(0x7da)][_0x21e3cb(0x828)];},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x927)]=function(_0x17b3dd,_0x5d4166,_0x48397d,_0x52cd56,_0xfe2101){const _0x5333db=_0x46ffcc;if(_0x17b3dd[_0x5333db(0x738)]())switch(this[_0x5333db(0x6af)]()){case _0x5333db(0x814):break;case _0x5333db(0x44e):this['drawItemActorSprite'](_0x17b3dd,_0x5d4166,_0x48397d+0x1,_0x52cd56,_0xfe2101-0x2);break;case _0x5333db(0x527):this[_0x5333db(0xac7)](_0x17b3dd,_0x5d4166,_0x48397d+0x1,_0x52cd56,_0xfe2101-0x2);break;default:this[_0x5333db(0x330)](_0x17b3dd,_0x5d4166,_0x48397d,_0x52cd56,_0xfe2101);break;}else this[_0x5333db(0x9e6)](_0x17b3dd,_0x5d4166,_0x48397d,_0x52cd56,_0xfe2101);},Window_InBattleStatus['prototype'][_0x46ffcc(0x330)]=function(_0x25f539,_0x5490e7,_0x4d5b18,_0x24e325,_0x4adfe0){const _0x15e035=_0x46ffcc;_0x24e325=_0x24e325||ImageManager[_0x15e035(0x35b)],_0x4adfe0=_0x4adfe0||ImageManager['faceHeight'];const _0x463f34=ImageManager[_0x15e035(0x35b)],_0x2e0d97=_0x4adfe0-0x2,_0x9e5bbf=_0x5490e7+Math[_0x15e035(0x27a)]((_0x24e325-_0x463f34)/0x2);this[_0x15e035(0x42f)]===Window_MenuStatus&&this[_0x15e035(0x12b)](_0x25f539['isBattleMember']()),this['drawActorFace'](_0x25f539,_0x9e5bbf,_0x4d5b18,_0x463f34,_0x2e0d97),this[_0x15e035(0x12b)](!![]);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x1e3)]=function(_0x164f14,_0x3f3f5c,_0xc46abd,_0x14eab6,_0x1d16a9){const _0x161939=_0x46ffcc;_0x14eab6=_0x14eab6||ImageManager[_0x161939(0x35b)],_0x1d16a9=_0x1d16a9||ImageManager[_0x161939(0x4f2)];const _0x124ad4=_0x164f14[_0x161939(0x108)](),_0x5ad546=_0x164f14[_0x161939(0x287)](),_0x3b5a18=ImageManager[_0x161939(0x92b)](_0x124ad4),_0x4b1097=ImageManager[_0x161939(0x4e0)](_0x124ad4),_0x46a4d2=_0x3b5a18[_0x161939(0x448)]/(_0x4b1097?0x3:0xc),_0x522f7f=_0x3b5a18[_0x161939(0x212)]/(_0x4b1097?0x4:0x8),_0x395894=_0x14eab6,_0x34e0a0=_0x1d16a9-0x2,_0x37e7fe=_0x3f3f5c+Math[_0x161939(0x27a)](_0x395894/0x2),_0x4b86f7=_0xc46abd+Math[_0x161939(0xa14)]((_0x1d16a9+_0x522f7f)/0x2);this[_0x161939(0x42f)]===Window_MenuStatus&&this[_0x161939(0x12b)](_0x164f14[_0x161939(0x5e1)]());const _0x26ae49=Math[_0x161939(0x4d8)](_0x14eab6,_0x46a4d2),_0x3bfc38=Math['min'](_0x1d16a9,_0x522f7f),_0x5b3a2a=Math[_0x161939(0x27a)](_0x3f3f5c+Math[_0x161939(0x148)](_0x14eab6-_0x46a4d2,0x0)/0x2),_0x24e4c4=Math[_0x161939(0x27a)](_0xc46abd+Math[_0x161939(0x148)](_0x1d16a9-_0x522f7f,0x0)/0x2),_0x46d51a=_0x4b1097?0x0:_0x5ad546,_0x5666c8=(_0x46d51a%0x4*0x3+0x1)*_0x46a4d2,_0x435a2b=Math[_0x161939(0x27a)](_0x46d51a/0x4)*0x4*_0x522f7f;this['contents'][_0x161939(0x1e5)](_0x3b5a18,_0x5666c8,_0x435a2b,_0x26ae49,_0x3bfc38,_0x5b3a2a,_0x24e4c4),this['changePaintOpacity'](!![]);},Window_InBattleStatus['prototype']['drawItemActorSvBattler']=function(_0x441bd6,_0x17134f,_0x5ccef5,_0xba9c2d,_0x44d24f,_0x431b53){const _0x2bb516=_0x46ffcc;_0xba9c2d=_0xba9c2d||ImageManager[_0x2bb516(0x35b)],_0x44d24f=_0x44d24f||ImageManager[_0x2bb516(0x4f2)];const _0x3a9905=ImageManager[_0x2bb516(0xfb)](_0x431b53?_0x441bd6['svBattlerName']():_0x441bd6[_0x2bb516(0x824)]()),_0x71d9ea=_0x3a9905[_0x2bb516(0x448)]/ImageManager[_0x2bb516(0x8f5)],_0x82c878=_0x3a9905['height']/ImageManager[_0x2bb516(0x4e1)],_0x408383=_0xba9c2d,_0x560705=_0x44d24f-0x2,_0x1e1549=_0x17134f+Math['floor'](_0x408383/0x2),_0x4ae9a0=_0x5ccef5+Math[_0x2bb516(0xa14)]((_0x44d24f+_0x82c878)/0x2);this[_0x2bb516(0x42f)]===Window_MenuStatus&&this[_0x2bb516(0x12b)](_0x441bd6[_0x2bb516(0x5e1)]());const _0x57e967=_0x441bd6[_0x2bb516(0xec)]&&_0x441bd6[_0x2bb516(0xec)](),_0x445e7f=0x0,_0xaefa55=0x0,_0xb9008f=_0x57e967?_0x3a9905[_0x2bb516(0x448)]:_0x71d9ea,_0x4cc5aa=_0x57e967?_0x3a9905[_0x2bb516(0x212)]:_0x82c878,_0x40af7e=Math['min'](0x1,_0xba9c2d/_0xb9008f,_0x44d24f/_0x4cc5aa),_0x1eaf47=_0x40af7e*_0xb9008f,_0x48ea35=_0x40af7e*_0x4cc5aa,_0x3d5812=Math[_0x2bb516(0x27a)](_0x17134f+Math[_0x2bb516(0x148)](_0xba9c2d-_0x1eaf47,0x0)/0x2),_0xc6c5ad=Math[_0x2bb516(0x27a)](_0x5ccef5+Math[_0x2bb516(0x148)](_0x44d24f-_0x48ea35,0x0)/0x2);this[_0x2bb516(0xab6)][_0x2bb516(0x1e5)](_0x3a9905,_0x445e7f,_0xaefa55,_0xb9008f,_0x4cc5aa,_0x3d5812,_0xc6c5ad,_0x1eaf47,_0x48ea35),this[_0x2bb516(0x12b)](!![]);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x9e6)]=function(_0x489c30,_0x56267c,_0x5ddb0d,_0x2ceb40,_0x1f32c6){const _0x4295e1=_0x46ffcc;if(_0x489c30[_0x4295e1(0x978)]()){this['drawItemActorSvBattler'](_0x489c30,_0x56267c,_0x5ddb0d+0x1,_0x2ceb40,_0x1f32c6-0x2,!![]);return;}const _0x48d27f=_0x489c30['battlerName'](),_0x4a6e36=$gameSystem[_0x4295e1(0x5c0)]()?ImageManager[_0x4295e1(0x6e2)](_0x48d27f):ImageManager[_0x4295e1(0xb97)](_0x48d27f);_0x4a6e36[_0x4295e1(0xbf3)](this[_0x4295e1(0x875)][_0x4295e1(0x479)](this,_0x489c30,_0x4a6e36,_0x56267c,_0x5ddb0d,_0x2ceb40,_0x1f32c6));},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x875)]=function(_0xb06cc6,_0x19c928,_0x5a5a39,_0x2d7e94,_0x51daf1,_0x1dc341){const _0x4fbbc3=_0x46ffcc;if(this[_0x4fbbc3(0x50c)]!==_0xb06cc6)return;this['_enemySprite']['show'](),this['_enemySprite']['bitmap']=new Bitmap(_0x51daf1,_0x1dc341);const _0x37107e=_0x51daf1,_0x5248a8=_0x1dc341,_0x37081e=Math[_0x4fbbc3(0x4d8)](_0x37107e,_0x5248a8),_0x39aa68=this[_0x4fbbc3(0x84b)][_0x4fbbc3(0x267)],_0x2bea79=Math[_0x4fbbc3(0x4d8)](0x1,_0x37081e/_0x19c928['width'],_0x37081e/_0x19c928[_0x4fbbc3(0x212)]),_0x3b5081=_0x19c928[_0x4fbbc3(0x448)]*_0x2bea79,_0x83a283=_0x19c928[_0x4fbbc3(0x212)]*_0x2bea79,_0x1229ed=Math[_0x4fbbc3(0x6da)]((_0x37107e-_0x3b5081)/0x2),_0x559700=Math['round']((_0x5248a8-_0x83a283)/0x2);_0x39aa68[_0x4fbbc3(0x1e5)](_0x19c928,0x0,0x0,_0x19c928[_0x4fbbc3(0x448)],_0x19c928[_0x4fbbc3(0x212)],_0x1229ed,_0x559700,_0x3b5081,_0x83a283),this[_0x4fbbc3(0x84b)][_0x4fbbc3(0x404)]['x']=0.5,this[_0x4fbbc3(0x84b)][_0x4fbbc3(0x404)]['y']=0x1,this['_enemySprite']['x']=_0x5a5a39+_0x51daf1/0x2+this[_0x4fbbc3(0x579)],this[_0x4fbbc3(0x84b)]['y']=_0x2d7e94+_0x1dc341+this[_0x4fbbc3(0x579)],this[_0x4fbbc3(0x84b)]['setHue'](this[_0x4fbbc3(0x50c)][_0x4fbbc3(0x55d)]());},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x36f)]=function(_0x386faf,_0x25ae51,_0x2558f4,_0x478f2b){const _0x2ecc64=_0x46ffcc;if(_0x386faf[_0x2ecc64(0x656)]())_0x478f2b=this[_0x2ecc64(0x7de)]-_0x25ae51;Window_StatusBase['prototype']['drawActorName'][_0x2ecc64(0x2e0)](this,_0x386faf,_0x25ae51,_0x2558f4,_0x478f2b);},Window_InBattleStatus[_0x46ffcc(0x9c1)]['drawActorClass']=function(_0x2d2497,_0x4e3b2e,_0x28955f,_0x1ad661){const _0xf63517=_0x46ffcc;if(!_0x2d2497['isActor']())return;Window_StatusBase[_0xf63517(0x9c1)]['drawActorClass'][_0xf63517(0x2e0)](this,_0x2d2497,_0x4e3b2e,_0x28955f,_0x1ad661);},Window_InBattleStatus['prototype']['drawActorLevel']=function(_0x37220f,_0x472c91,_0x2791be){const _0x3be5ae=_0x46ffcc;if(_0x37220f['isEnemy']()&&!Window_InBattleStatus[_0x3be5ae(0x9b9)][_0x3be5ae(0x2d0)])return;Window_StatusBase[_0x3be5ae(0x9c1)]['drawActorLevel']['call'](this,_0x37220f,_0x472c91,_0x2791be);},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x9e1)]=function(_0x300363,_0x2b0dfc,_0x541608,_0x3fe058){const _0x5ecc42=_0x46ffcc;_0x300363[_0x5ecc42(0xb6a)]=!![],Window_StatusBase['prototype'][_0x5ecc42(0x9e1)]['call'](this,_0x300363,_0x2b0dfc,_0x541608,_0x3fe058),_0x300363['_hideAllIcons']=undefined;},VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x749)]=Game_BattlerBase['prototype']['allIcons'],Game_BattlerBase['prototype']['allIcons']=function(){const _0x59d308=_0x46ffcc;if(this[_0x59d308(0xb6a)])return[];return VisuMZ[_0x59d308(0x354)]['Game_BattlerBase_allIconsIBS'][_0x59d308(0x2e0)](this);},Window_InBattleStatus['prototype'][_0x46ffcc(0xb93)]=function(_0x13d3cc,_0xfe16bb,_0x3513d7,_0x49bb66){const _0x276591=_0x46ffcc,_0x9101bb=_0x276591(0x8c9)[_0x276591(0x498)](_0x13d3cc[_0x276591(0x43f)](),_0xfe16bb);let _0x38e25f=![];if(_0x13d3cc[_0x276591(0x656)]()){const _0x433a7e=Window_InBattleStatus[_0x276591(0x9b9)];if(_0xfe16bb==='hp'&&_0x433a7e[_0x276591(0xabc)])_0x38e25f=!![];if(_0xfe16bb==='mp'&&_0x433a7e[_0x276591(0x90f)])_0x38e25f=!![];if(_0xfe16bb==='tp'&&_0x433a7e[_0x276591(0x1fb)])_0x38e25f=!![];}const _0x3f1b5e=this['createInnerSprite'](_0x9101bb,_0x38e25f?Sprite_GaugeRate:Sprite_Gauge);_0x3f1b5e[_0x276591(0xb64)](_0x13d3cc,_0xfe16bb),_0x3f1b5e[_0x276591(0x43b)](_0x3513d7,_0x49bb66),_0x3f1b5e['show']();},Window_InBattleStatus[_0x46ffcc(0x9c1)]['drawingAreaWidth']=function(){const _0x14191f=_0x46ffcc,_0x27a709=this[_0x14191f(0x517)]?this[_0x14191f(0x517)][_0x14191f(0x448)]:0x0;return this[_0x14191f(0x7de)]-_0x27a709+this[_0x14191f(0x579)]*0x2;},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x26b)]=function(){const _0x52b12e=_0x46ffcc;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x52b12e(0x574)][_0x52b12e(0x59e)][_0x52b12e(0xbd8)][_0x52b12e(0xb4c)]:['MaxHP',_0x52b12e(0x4e3),_0x52b12e(0x4c2),_0x52b12e(0x6f6),_0x52b12e(0x4fb),_0x52b12e(0x23f),_0x52b12e(0x42b),'LUK'];},Window_InBattleStatus[_0x46ffcc(0x9c1)][_0x46ffcc(0x398)]=function(_0x356480,_0x4b1470,_0x37b210,_0x14c700){const _0xabe860=_0x46ffcc,_0x4bd70f=Window_InBattleStatus[_0xabe860(0x9b9)],_0x2e06a=Imported[_0xabe860(0xbaf)];this[_0xabe860(0x2cd)]();let _0x280f49='',_0x31de14=0x0,_0x226b4d=[_0xabe860(0x3c1),_0xabe860(0x582),'ATK',_0xabe860(0x6f6),_0xabe860(0x4fb),'MDF','AGI',_0xabe860(0x85b)][_0xabe860(0xb8c)](String(_0x356480)['toUpperCase']()[_0xabe860(0xafd)]());if(_0x2e06a)_0x280f49=TextManager['paramName'](_0x356480),_0x31de14=VisuMZ[_0xabe860(0x7f3)](_0x356480);else{if(_0x226b4d>=0x0&&_0x226b4d<0x8)_0x280f49=TextManager['param'](_0x226b4d);}if(_0x226b4d>=0x0&&_0x226b4d<0x8){const _0x4c67fe=this['_battler'][_0xabe860(0x7bb)][_0x226b4d];this[_0xabe860(0x50c)][_0xabe860(0x67f)](_0x4c67fe,_0x226b4d)!==0x0&&(_0x31de14=this['_battler'][_0xabe860(0x67f)](_0x4c67fe,_0x226b4d));}if(_0x280f49){let _0x233ff6='\x5cI[%2]\x5cC[16]%1\x5cC[0]'[_0xabe860(0x498)](_0x280f49,_0x31de14);_0x14c700<=0xd4&&(_0x233ff6=_0xabe860(0x702)[_0xabe860(0x498)](_0x280f49));const _0x11a81f=_0x14c700<=0xd4?'\x20':'\x20\x20';this[_0xabe860(0x4b9)](_0x11a81f+_0x233ff6,_0x4b1470,_0x37b210);}this[_0xabe860(0x4fc)]();let _0x30364a='';_0x2e06a?_0x30364a=this['_battler'][_0xabe860(0x39b)](_0x356480,!![]):_0x30364a=String(this[_0xabe860(0x50c)][_0xabe860(0x766)](_0x226b4d));if(this[_0xabe860(0x50c)][_0xabe860(0x656)]()){let _0x14a03a=!![];if(_0x4bd70f[_0xabe860(0xa6b)])_0x14a03a=![];if(_0x4bd70f['enemyShowParametersIfBattleTest']&&BattleManager[_0xabe860(0xa6a)]())_0x14a03a=![];if(_0x4bd70f[_0xabe860(0x8c5)]&&$gameSystem[_0xabe860(0xae5)]()[_0xabe860(0x6a2)](this[_0xabe860(0x50c)][_0xabe860(0x5ce)]()))_0x14a03a=![];_0x14a03a&&(_0x30364a=_0x4bd70f['enemyHiddenParameter']);}if(_0x226b4d>=0x0&&_0x226b4d<0x8){if(this[_0xabe860(0x50c)][_0xabe860(0x533)](_0x226b4d)>0x1)_0x30364a=_0x4bd70f[_0xabe860(0x34d)][_0xabe860(0x498)](_0x30364a),Imported[_0xabe860(0x179)]?this[_0xabe860(0x68c)](ColorManager[_0xabe860(0x31d)]()):this[_0xabe860(0x68c)](ColorManager[_0xabe860(0x7a8)]());else this[_0xabe860(0x50c)][_0xabe860(0x533)](_0x226b4d)<0x1&&(_0x30364a=_0x4bd70f[_0xabe860(0x973)]['format'](_0x30364a),Imported[_0xabe860(0x179)]?this[_0xabe860(0x68c)](ColorManager['debuffColor']()):this['changeTextColor'](ColorManager['powerDownColor']()));}if(String(_0x30364a)){const _0x5d33fa=_0x14c700<=0xd4?'\x20':'\x20\x20';this[_0xabe860(0x8fc)](_0x30364a+_0x5d33fa,_0x4b1470,_0x37b210,_0x14c700,_0xabe860(0xa36));}},Window_InBattleStatus['prototype'][_0x46ffcc(0x8c7)]=function(_0x4a327a,_0xc04c49,_0x4eb479,_0x38c18d){const _0x579039=_0x46ffcc;_0x38c18d=_0x38c18d||this['lineHeight'](),this[_0x579039(0x5bd)]['paintOpacity']=0xa0;const _0x3e0863=ColorManager['gaugeBackColor']();this['contentsBack']['fillRect'](_0x4a327a+0x1,_0xc04c49+0x1,_0x4eb479-0x2,_0x38c18d-0x2,_0x3e0863),this[_0x579039(0x5bd)][_0x579039(0x48e)]=0xff;},Game_BattlerBase[_0x46ffcc(0x9c1)]['getParamBuffAndStateRate']=function(_0x3c5287){const _0xe7b597=_0x46ffcc;let _0x1721a6=0x1;_0x1721a6*=this[_0xe7b597(0x303)](_0x3c5287);for(const _0xdf16ec of this[_0xe7b597(0x483)]()){if(!_0xdf16ec)continue;for(const _0x292773 of _0xdf16ec[_0xe7b597(0x8e4)]){if(!_0x292773)continue;if(_0x292773[_0xe7b597(0xb27)]!==Game_BattlerBase['TRAIT_PARAM'])continue;if(_0x292773[_0xe7b597(0x32c)]!==_0x3c5287)continue;_0x1721a6*=_0x292773[_0xe7b597(0x944)];}}return _0x1721a6;};function Window_InBattleStatusStates(){const _0x4f93ec=_0x46ffcc;this[_0x4f93ec(0x3e3)](...arguments);}Window_InBattleStatusStates[_0x46ffcc(0x9c1)]=Object['create'](Window_Command[_0x46ffcc(0x9c1)]),Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['constructor']=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x46ffcc(0x9b9)]={'maxWidth':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x769)]??0x180,'drawStates':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xadf)]??!![],'drawBuffs':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['InBattleStatus'][_0x46ffcc(0x2ce)]??!![],'drawDebuffs':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xbd1)]??!![],'normalIcon':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)]['normalIcon']??0x54,'normalText':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x75c)]??_0x46ffcc(0x47a),'normalHelp':VisuMZ['BattleCore']['Settings'][_0x46ffcc(0x7da)][_0x46ffcc(0x53c)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xe9)]??_0x46ffcc(0x8ca),'buffNameFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xbdd)]??_0x46ffcc(0x9ad),'buffHelpFmt':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)][_0x46ffcc(0x8b8)]??'Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','debuffNameFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0x3f4)]??'%1▼','debuffHelpFmt':VisuMZ[_0x46ffcc(0x354)]['Settings'][_0x46ffcc(0x7da)]['debuffHelpFmt']??'Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','actionsFmt':VisuMZ['BattleCore'][_0x46ffcc(0x59e)][_0x46ffcc(0x7da)][_0x46ffcc(0xbf4)]??_0x46ffcc(0x1b7),'turnsFmt':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['InBattleStatus'][_0x46ffcc(0xa0c)]??_0x46ffcc(0x846),'passiveText':VisuMZ[_0x46ffcc(0x354)][_0x46ffcc(0x59e)]['InBattleStatus'][_0x46ffcc(0x798)]??_0x46ffcc(0x649)},Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['initialize']=function(_0x3754fe){const _0x448737=_0x46ffcc;this[_0x448737(0x50c)]=null,Window_Command[_0x448737(0x9c1)][_0x448737(0x3e3)]['call'](this,_0x3754fe),this[_0x448737(0xa57)](),this[_0x448737(0x9f5)](),this['setBackgroundType'](0x2);},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d1)]=function(_0x242f2c){const _0x132795=_0x46ffcc;this[_0x132795(0x50c)]=_0x242f2c||null,this['refresh'](),this[_0x132795(0x2f2)](0x0),this[_0x132795(0x9c4)](0x0,0x0),this[_0x132795(0xaf5)]();},Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['playOkSound']=function(){},Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['makeCommandList']=function(){const _0x495829=_0x46ffcc;if(!this['_battler'])return;this[_0x495829(0x226)](),this[_0x495829(0x692)](),this['addBattlerBuffsDebuffs'](),this['addNormalStatus']();},Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['addBattlerAspect']=function(){const _0x1f1956=_0x46ffcc;if(!this[_0x1f1956(0x50c)][_0x1f1956(0x656)]())return;if(!this[_0x1f1956(0x50c)][_0x1f1956(0xbb5)]())return;const _0x18e333=this[_0x1f1956(0x50c)][_0x1f1956(0x79e)]()[_0x1f1956(0x1a8)],_0x4c0d0a=this['_battler'][_0x1f1956(0x79e)]()[_0x1f1956(0x216)],_0xf2eef0=this['_battler'][_0x1f1956(0x79e)]()[_0x1f1956(0x3e5)];let _0x4d02ae='';_0xf2eef0[_0x1f1956(0xe0)](/#(.*?)/gi)&&Imported[_0x1f1956(0x484)]?_0x4d02ae=_0x1f1956(0x6e4)[_0x1f1956(0x498)](_0x4c0d0a,_0x18e333,_0xf2eef0):_0x4d02ae=_0x1f1956(0x719)[_0x1f1956(0x498)](_0x4c0d0a,_0x18e333,_0xf2eef0),this[_0x1f1956(0x17c)](_0x4d02ae,'aspect',!![]);},Window_InBattleStatusStates[_0x46ffcc(0x9c1)]['addBattlerStates']=function(){const _0x52a264=_0x46ffcc;if(!Window_InBattleStatusStates[_0x52a264(0x9b9)][_0x52a264(0xadf)])return;for(const _0x579f18 of this[_0x52a264(0x50c)][_0x52a264(0x483)]()){if(!this[_0x52a264(0x6d9)](_0x579f18))continue;const _0x28d5ec=this['makeStateName'](_0x579f18);this[_0x52a264(0x17c)](_0x28d5ec,_0x52a264(0xabb),!![],_0x579f18['id']);}},Window_InBattleStatusStates['prototype']['includeState']=function(_0x5b3e06){const _0x5cbb41=_0x46ffcc;if(!_0x5b3e06)return![];if(_0x5b3e06[_0x5cbb41(0x1a8)]['trim']()==='')return![];if(_0x5b3e06[_0x5cbb41(0x1a8)]['includes'](_0x5cbb41(0x446)))return![];if(_0x5b3e06['iconIndex']<=0x0)return![];if(_0x5b3e06[_0x5cbb41(0xb71)])return![];return!![];},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x33f)]=function(_0x44cb9a){const _0x9d6af7=_0x46ffcc;let _0x22d1fc=_0x44cb9a[_0x9d6af7(0x216)],_0x4551ae=_0x44cb9a[_0x9d6af7(0x1a8)],_0x428730='0';return Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x9d6af7(0x484)]&&(_0x428730=String(ColorManager[_0x9d6af7(0xa80)](_0x44cb9a))),_0x428730[_0x9d6af7(0xe0)](/#(.*?)/gi)?_0x9d6af7(0x6e4)[_0x9d6af7(0x498)](_0x22d1fc,_0x4551ae,_0x428730):_0x9d6af7(0x719)[_0x9d6af7(0x498)](_0x22d1fc,_0x4551ae,_0x428730);},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x1d6)]=function(){const _0x4ec03f=_0x46ffcc;for(let _0x1136f0=0x0;_0x1136f0<0x8;_0x1136f0++){const _0x13238b=this[_0x4ec03f(0x863)](_0x1136f0);if(!_0x13238b)continue;this[_0x4ec03f(0x17c)](_0x13238b,_0x4ec03f(0x652),!![],_0x1136f0);}},Window_InBattleStatusStates['prototype']['makeBuffName']=function(_0x55de70){const _0x57dde1=_0x46ffcc;if(!this[_0x57dde1(0x50c)][_0x57dde1(0x2ca)](_0x55de70)&&!this[_0x57dde1(0x50c)][_0x57dde1(0x6fb)](_0x55de70))return'';const _0x638c29=Window_InBattleStatusStates[_0x57dde1(0x9b9)];if(this[_0x57dde1(0x50c)][_0x57dde1(0x2ca)](_0x55de70)&&!_0x638c29[_0x57dde1(0x2ce)])return'';if(this[_0x57dde1(0x50c)][_0x57dde1(0x6fb)](_0x55de70)&&!_0x638c29[_0x57dde1(0xbd1)])return'';const _0x3e3542=this[_0x57dde1(0x50c)][_0x57dde1(0x7bb)][_0x55de70];let _0x422c2c=this[_0x57dde1(0x50c)]['buffIconIndex'](_0x3e3542,_0x55de70),_0x321145=TextManager[_0x57dde1(0x766)](_0x55de70);_0x3e3542>0x0?_0x321145=_0x638c29['buffNameFmt'][_0x57dde1(0x498)](_0x321145):_0x321145=_0x638c29[_0x57dde1(0x3f4)]['format'](_0x321145);let _0x24ee05=0x0;return Imported[_0x57dde1(0x179)]&&(_0x24ee05=_0x3e3542>0x0?ColorManager[_0x57dde1(0x31d)]():ColorManager[_0x57dde1(0x531)]()),String(_0x24ee05)[_0x57dde1(0xe0)](/#(.*?)/gi)?_0x57dde1(0x6e4)[_0x57dde1(0x498)](_0x422c2c,_0x321145,_0x24ee05):_0x57dde1(0x719)['format'](_0x422c2c,_0x321145,_0x24ee05);},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x886)]=function(){const _0x4de83c=_0x46ffcc;if(this['_list'][_0x4de83c(0x9bf)]>0x0)return;const _0x33e20c=Window_InBattleStatusStates[_0x4de83c(0x9b9)],_0x3c33a2=_0x33e20c['normalIcon'],_0x571475=_0x33e20c[_0x4de83c(0x75c)],_0x28f3e5=_0x4de83c(0x2de)[_0x4de83c(0x498)](_0x3c33a2,_0x571475);this['addCommand'](_0x28f3e5,_0x4de83c(0x788));},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x37f)]=function(_0x43cffe){const _0x1141cb=_0x46ffcc,_0x39a931=this[_0x1141cb(0xb73)](_0x43cffe);this[_0x1141cb(0x12b)](0xff),this[_0x1141cb(0x4b9)](this['commandName'](_0x43cffe),_0x39a931['x'],_0x39a931['y']),this[_0x1141cb(0xadd)](_0x43cffe,_0x39a931);},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0xadd)]=function(_0x3227e9,_0x30eed5){const _0x4b29e7=_0x46ffcc;if(!Imported[_0x4b29e7(0x179)])return;const _0x4a4e66=this['commandSymbol'](_0x3227e9),_0x42b3b2=_0x30eed5['x']+0x2;if(_0x4a4e66===_0x4b29e7(0xabb)){const _0x516745=$dataStates[this[_0x4b29e7(0xa7e)][_0x3227e9][_0x4b29e7(0xa5d)]||0x0];this[_0x4b29e7(0x40b)](this[_0x4b29e7(0x50c)],_0x516745,_0x42b3b2,_0x30eed5['y']),this[_0x4b29e7(0x703)](this[_0x4b29e7(0x50c)],_0x516745,_0x42b3b2,_0x30eed5['y']);}else{if(_0x4a4e66===_0x4b29e7(0x652)){const _0x2a6476=this['_list'][_0x3227e9][_0x4b29e7(0xa5d)];this['drawActorBuffTurns'](this[_0x4b29e7(0x50c)],_0x2a6476,_0x42b3b2,_0x30eed5['y']),this[_0x4b29e7(0xba7)](this[_0x4b29e7(0x50c)],_0x2a6476,_0x42b3b2,_0x30eed5['y']);}}},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x885)]=function(){const _0x4e2ae5=_0x46ffcc,_0x24c388=this[_0x4e2ae5(0x3f5)]();let _0x5529f7='';if(_0x24c388===_0x4e2ae5(0x2fc))_0x5529f7=this[_0x4e2ae5(0x50c)]['getAspectData']()[_0x4e2ae5(0x311)];else{if(_0x24c388===_0x4e2ae5(0xabb))_0x5529f7=this[_0x4e2ae5(0x70e)]();else{if(_0x24c388===_0x4e2ae5(0x652))_0x5529f7=this['makeBuffHelpText']();else _0x24c388===_0x4e2ae5(0x788)&&(_0x5529f7=Window_InBattleStatusStates[_0x4e2ae5(0x9b9)][_0x4e2ae5(0x53c)]);}}_0x5529f7?this[_0x4e2ae5(0x76e)][_0x4e2ae5(0xa8d)](_0x5529f7):this[_0x4e2ae5(0x76e)][_0x4e2ae5(0x91f)]();},Window_InBattleStatusStates['prototype'][_0x46ffcc(0x70e)]=function(){const _0x345047=_0x46ffcc,_0x356ff4=Window_InBattleStatusStates['SETTINGS'],_0x1c7e8f=this[_0x345047(0x7ec)]();let _0x13f0bf='';const _0x559832=$dataStates[_0x1c7e8f]||null;if(_0x559832){const _0x3a6bff=_0x356ff4[_0x345047(0xe9)];let _0x4b50c7=_0x559832[_0x345047(0x8f3)]||_0x559832[_0x345047(0x311)]||'';Imported['VisuMZ_1_SkillsStatesCore']&&(_0x4b50c7=_0x4b50c7['format'](this[_0x345047(0x50c)][_0x345047(0x3bc)](_0x1c7e8f)));let _0x434de0=_0x345047(0x61f);if(this[_0x345047(0x50c)][_0x345047(0x861)](_0x1c7e8f)){if(_0x559832['autoRemovalTiming']===0x0)_0x434de0=_0x345047(0x814);if(_0x559832[_0x345047(0x175)]===0x1)_0x434de0=_0x345047(0x3e4);if(_0x559832[_0x345047(0x175)]===0x2)_0x434de0=_0x345047(0x792);}const _0x16d9a8=this[_0x345047(0x50c)][_0x345047(0x121)][_0x1c7e8f]||0x0;let _0x50a69d='\x5cC[0]';Imported[_0x345047(0x179)]&&Imported[_0x345047(0x484)]&&(_0x50a69d=ColorManager[_0x345047(0xa80)](_0x559832),_0x50a69d['match'](/#(.*?)/gi)?_0x50a69d='\x5cHEXCOLOR<%1>'[_0x345047(0x498)](_0x50a69d):_0x50a69d=_0x345047(0xbdc)[_0x345047(0x498)](_0x50a69d)),_0x13f0bf=_0x3a6bff[_0x345047(0x498)](_0x4b50c7,this['makeTurnsText'](_0x434de0,_0x16d9a8,_0x50a69d));}return _0x13f0bf;},Window_InBattleStatusStates['prototype'][_0x46ffcc(0x827)]=function(){const _0x18e1c8=_0x46ffcc,_0x58e3e4=Window_InBattleStatusStates[_0x18e1c8(0x9b9)],_0x500248=this[_0x18e1c8(0x7ec)]();let _0xaf7335='';const _0xeba087=this[_0x18e1c8(0x50c)][_0x18e1c8(0x2ca)](_0x500248),_0x36c60b=_0xeba087?_0x18e1c8(0x8b8):_0x18e1c8(0x418),_0x1c2f35=_0x58e3e4[_0x36c60b];let _0x639ea5=_0x18e1c8(0x597);Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x18e1c8(0x484)]&&(_0x639ea5=_0xeba087?ColorManager['buffColor']():ColorManager[_0x18e1c8(0x531)](),_0x639ea5[_0x18e1c8(0xe0)](/#(.*?)/gi)?_0x639ea5=_0x18e1c8(0xc4)[_0x18e1c8(0x498)](_0x639ea5):_0x639ea5=_0x18e1c8(0xbdc)[_0x18e1c8(0x498)](_0x639ea5));const _0x2a9f74=this[_0x18e1c8(0x50c)][_0x18e1c8(0x41a)][_0x500248]||0x0;return _0xaf7335=_0x1c2f35[_0x18e1c8(0x498)](TextManager[_0x18e1c8(0x766)](_0x500248),Math[_0x18e1c8(0x27a)](this[_0x18e1c8(0x50c)][_0x18e1c8(0x303)](_0x500248)*0x64)+'%',_0x639ea5,this[_0x18e1c8(0x7e6)]('turns',_0x2a9f74,_0x639ea5)),_0xaf7335;},Window_InBattleStatusStates[_0x46ffcc(0x9c1)][_0x46ffcc(0x7e6)]=function(_0x188583,_0x1b298a,_0x1452fd){const _0x572beb=_0x46ffcc,_0x299c16=Window_InBattleStatusStates['SETTINGS'];let _0x208d41=_0x299c16[_0x572beb(0x798)];if(_0x188583===_0x572beb(0x3e4))_0x208d41=_0x299c16[_0x572beb(0xbf4)];if(_0x188583==='turns')_0x208d41=_0x299c16[_0x572beb(0xb17)];if(_0x188583==='none')return'';return _0x208d41['format'](_0x1b298a,_0x1452fd);};